
F446RE_Nucleo_TEST_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007890  08007890  00017890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cac  08007cac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007cac  08007cac  00017cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cb4  08007cb4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001d8  08007e90  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08007e90  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b084  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c9  00000000  00000000  0002b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d7  00000000  00000000  0002ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a47  00000000  00000000  0002e487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb0a  00000000  00000000  00050ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb857  00000000  00000000  0005d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003414  00000000  00000000  00129230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0012c644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007878 	.word	0x08007878

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08007878 	.word	0x08007878

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c00:	f000 b9a6 	b.w	8000f50 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f83c 	bl	8000c88 <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2lz>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	460d      	mov	r5, r1
 8000c26:	f7ff ff71 	bl	8000b0c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x1c>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b80a 	b.w	8000c4c <__aeabi_d2ulz>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3e:	f000 f805 	bl	8000c4c <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2ulz>:
 8000c4c:	b5d0      	push	{r4, r6, r7, lr}
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__aeabi_d2ulz+0x34>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	f7ff fce7 	bl	8000628 <__aeabi_dmul>
 8000c5a:	f7ff ffa7 	bl	8000bac <__aeabi_d2uiz>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fc68 	bl	8000534 <__aeabi_ui2d>
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <__aeabi_d2ulz+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f7ff fcde 	bl	8000628 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fb20 	bl	80002b8 <__aeabi_dsub>
 8000c78:	f7ff ff98 	bl	8000bac <__aeabi_d2uiz>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c80:	3df00000 	.word	0x3df00000
 8000c84:	41f00000 	.word	0x41f00000

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_DMA_Init+0x3c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <MX_DMA_Init+0x3c>)
 8000f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_DMA_Init+0x3c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f001 f9d3 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f80:	2010      	movs	r0, #16
 8000f82:	f001 f9ec 	bl	800235e <HAL_NVIC_EnableIRQ>

}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <prv_parse_number>:
#define CTN(x)              ((x) - '0')
#define CHTN(x)             (((x) >= '0' && (x) <= '9') ? ((x) - '0') : (((x) >= 'a' && (x) <= 'z') ? ((x) - 'a' + 10) : (((x) >= 'A' && (x) <= 'Z') ? ((x) - 'A' + 10) : 0)))


static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d106      	bne.n	8001006 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3371      	adds	r3, #113	; 0x71
 8000ffc:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}
 8000ffe:	e002      	b.n	8001006 <prv_parse_number+0x22>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <prv_parse_number+0x30>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b20      	cmp	r3, #32
 8001012:	d0f5      	beq.n	8001000 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b2d      	cmp	r3, #45	; 0x2d
 800101a:	d104      	bne.n	8001026 <prv_parse_number+0x42>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <prv_parse_number+0x44>
 8001026:	2300      	movs	r3, #0
 8001028:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800102a:	e00d      	b.n	8001048 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	461a      	mov	r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3b30      	subs	r3, #48	; 0x30
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <prv_parse_number+0x7a>
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b2f      	cmp	r3, #47	; 0x2f
 8001054:	d903      	bls.n	800105e <prv_parse_number+0x7a>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b39      	cmp	r3, #57	; 0x39
 800105c:	d9e6      	bls.n	800102c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <prv_parse_number+0x86>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	425b      	negs	r3, r3
 8001068:	e000      	b.n	800106c <prv_parse_number+0x88>
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <prv_parse_float_number>:


static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d106      	bne.n	8001096 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3371      	adds	r3, #113	; 0x71
 800108c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}
 800108e:	e002      	b.n	8001096 <prv_parse_float_number+0x1e>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <prv_parse_float_number+0x2c>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b20      	cmp	r3, #32
 80010a2:	d0f5      	beq.n	8001090 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);
 80010a4:	2100      	movs	r1, #0
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f004 fbce 	bl	8005848 <strtod>
 80010ac:	ed87 0b02 	vstr	d0, [r7, #8]
#else
    res = strtof(t, NULL);
#endif

    return FLT(res);
 80010b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010b4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010b8:	eeb0 0a47 	vmov.f32	s0, s14
 80010bc:	eef0 0a67 	vmov.f32	s1, s15
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <prv_parse_lat_long>:


static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);
 80010d0:	2100      	movs	r1, #0
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffd0 	bl	8001078 <prv_parse_float_number>
 80010d8:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));
 80010dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e0:	f7ff fd3c 	bl	8000b5c <__aeabi_d2iz>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a1d      	ldr	r2, [pc, #116]	; (800115c <prv_parse_lat_long+0x94>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	1152      	asrs	r2, r2, #5
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa2e 	bl	8000554 <__aeabi_i2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <prv_parse_lat_long+0x98>)
 8001106:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800110a:	f7ff fa8d 	bl	8000628 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001116:	f7ff f8cf 	bl	80002b8 <__aeabi_dsub>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <prv_parse_lat_long+0x9c>)
 8001128:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800112c:	f7ff fba6 	bl	800087c <__aeabi_ddiv>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001138:	f7ff f8c0 	bl	80002bc <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001148:	ec43 2b17 	vmov	d7, r2, r3
}
 800114c:	eeb0 0a47 	vmov.f32	s0, s14
 8001150:	eef0 0a67 	vmov.f32	s1, s15
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	51eb851f 	.word	0x51eb851f
 8001160:	40590000 	.word	0x40590000
 8001164:	404e0000 	.word	0x404e0000

08001168 <prv_parse_term>:


static uint8_t
prv_parse_term(lwgps_t* gh) {
 8001168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001178:	2900      	cmp	r1, #0
 800117a:	d169      	bne.n	8001250 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3371      	adds	r3, #113	; 0x71
 8001180:	2206      	movs	r2, #6
 8001182:	49ba      	ldr	r1, [pc, #744]	; (800146c <prv_parse_term+0x304>)
 8001184:	4618      	mov	r0, r3
 8001186:	f004 fc78 	bl	8005a7a <strncmp>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d009      	beq.n	80011a4 <prv_parse_term+0x3c>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3371      	adds	r3, #113	; 0x71
 8001194:	2206      	movs	r2, #6
 8001196:	49b6      	ldr	r1, [pc, #728]	; (8001470 <prv_parse_term+0x308>)
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fc6e 	bl	8005a7a <strncmp>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d104      	bne.n	80011ae <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80011ac:	e04e      	b.n	800124c <prv_parse_term+0xe4>
#endif
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3371      	adds	r3, #113	; 0x71
 80011b2:	2206      	movs	r2, #6
 80011b4:	49af      	ldr	r1, [pc, #700]	; (8001474 <prv_parse_term+0x30c>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fc5f 	bl	8005a7a <strncmp>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <prv_parse_term+0x6e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3371      	adds	r3, #113	; 0x71
 80011c6:	2206      	movs	r2, #6
 80011c8:	49ab      	ldr	r1, [pc, #684]	; (8001478 <prv_parse_term+0x310>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fc55 	bl	8005a7a <strncmp>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d104      	bne.n	80011e0 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2202      	movs	r2, #2
 80011da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80011de:	e035      	b.n	800124c <prv_parse_term+0xe4>
#endif
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3371      	adds	r3, #113	; 0x71
 80011e4:	2206      	movs	r2, #6
 80011e6:	49a5      	ldr	r1, [pc, #660]	; (800147c <prv_parse_term+0x314>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 fc46 	bl	8005a7a <strncmp>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <prv_parse_term+0xa0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3371      	adds	r3, #113	; 0x71
 80011f8:	2206      	movs	r2, #6
 80011fa:	49a1      	ldr	r1, [pc, #644]	; (8001480 <prv_parse_term+0x318>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 fc3c 	bl	8005a7a <strncmp>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2203      	movs	r2, #3
 800120c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001210:	e01c      	b.n	800124c <prv_parse_term+0xe4>
#endif
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3371      	adds	r3, #113	; 0x71
 8001216:	2206      	movs	r2, #6
 8001218:	499a      	ldr	r1, [pc, #616]	; (8001484 <prv_parse_term+0x31c>)
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fc2d 	bl	8005a7a <strncmp>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <prv_parse_term+0xd2>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3371      	adds	r3, #113	; 0x71
 800122a:	2206      	movs	r2, #6
 800122c:	4996      	ldr	r1, [pc, #600]	; (8001488 <prv_parse_term+0x320>)
 800122e:	4618      	mov	r0, r3
 8001230:	f004 fc23 	bl	8005a7a <strncmp>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d104      	bne.n	8001244 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2204      	movs	r2, #4
 800123e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001242:	e003      	b.n	800124c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif
        } else {
            gh->p.stat = STAT_UNKNOWN;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 800124c:	2301      	movs	r3, #1
 800124e:	e231      	b.n	80016b4 <prv_parse_term+0x54c>
    }


    if (gh->p.stat == STAT_UNKNOWN) {
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001256:	2900      	cmp	r1, #0
 8001258:	f000 822b 	beq.w	80016b2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001262:	2901      	cmp	r1, #1
 8001264:	f040 80c9 	bne.w	80013fa <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800126e:	3b01      	subs	r3, #1
 8001270:	2b0a      	cmp	r3, #10
 8001272:	f200 8213 	bhi.w	800169c <prv_parse_term+0x534>
 8001276:	a201      	add	r2, pc, #4	; (adr r2, 800127c <prv_parse_term+0x114>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	080012a9 	.word	0x080012a9
 8001280:	08001323 	.word	0x08001323
 8001284:	08001339 	.word	0x08001339
 8001288:	08001363 	.word	0x08001363
 800128c:	08001379 	.word	0x08001379
 8001290:	080013a3 	.word	0x080013a3
 8001294:	080013b7 	.word	0x080013b7
 8001298:	0800169d 	.word	0x0800169d
 800129c:	080013cb 	.word	0x080013cb
 80012a0:	0800169d 	.word	0x0800169d
 80012a4:	080013e3 	.word	0x080013e3
            case 1:
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012ae:	3b30      	subs	r3, #48	; 0x30
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80012c2:	4413      	add	r3, r2
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	3b30      	subs	r3, #48	; 0x30
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80012d6:	3b30      	subs	r3, #48	; 0x30
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	0092      	lsls	r2, r2, #2
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80012ea:	4413      	add	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3b30      	subs	r3, #48	; 0x30
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80012fe:	3b30      	subs	r3, #48	; 0x30
 8001300:	b2db      	uxtb	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	b2da      	uxtb	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001312:	4413      	add	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	3b30      	subs	r3, #48	; 0x30
 8001318:	b2da      	uxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001320:	e1c7      	b.n	80016b2 <prv_parse_term+0x54a>
            case 2:
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fed0 	bl	80010c8 <prv_parse_lat_long>
 8001328:	eeb0 7a40 	vmov.f32	s14, s0
 800132c:	eef0 7a60 	vmov.f32	s15, s1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001336:	e1bc      	b.n	80016b2 <prv_parse_term+0x54a>
            case 3:
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800133e:	2b53      	cmp	r3, #83	; 0x53
 8001340:	d005      	beq.n	800134e <prv_parse_term+0x1e6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001348:	2b73      	cmp	r3, #115	; 0x73
 800134a:	f040 81a9 	bne.w	80016a0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001354:	4690      	mov	r8, r2
 8001356:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8001360:	e19e      	b.n	80016a0 <prv_parse_term+0x538>
            case 4:
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff feb0 	bl	80010c8 <prv_parse_lat_long>
 8001368:	eeb0 7a40 	vmov.f32	s14, s0
 800136c:	eef0 7a60 	vmov.f32	s15, s1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001376:	e19c      	b.n	80016b2 <prv_parse_term+0x54a>
            case 5:
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800137e:	2b57      	cmp	r3, #87	; 0x57
 8001380:	d005      	beq.n	800138e <prv_parse_term+0x226>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001388:	2b77      	cmp	r3, #119	; 0x77
 800138a:	f040 818b 	bne.w	80016a4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001394:	4614      	mov	r4, r2
 8001396:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 80013a0:	e180      	b.n	80016a4 <prv_parse_term+0x53c>
            case 6:
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80013a2:	2100      	movs	r1, #0
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fe1d 	bl	8000fe4 <prv_parse_number>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 80013b4:	e17d      	b.n	80016b2 <prv_parse_term+0x54a>
            case 7:
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80013b6:	2100      	movs	r1, #0
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fe13 	bl	8000fe4 <prv_parse_number>
 80013be:	4603      	mov	r3, r0
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 80013c8:	e173      	b.n	80016b2 <prv_parse_term+0x54a>
            case 9:
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80013ca:	2100      	movs	r1, #0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fe53 	bl	8001078 <prv_parse_float_number>
 80013d2:	eeb0 7a40 	vmov.f32	s14, s0
 80013d6:	eef0 7a60 	vmov.f32	s15, s1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80013e0:	e167      	b.n	80016b2 <prv_parse_term+0x54a>
            case 11:
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe47 	bl	8001078 <prv_parse_float_number>
 80013ea:	eeb0 7a40 	vmov.f32	s14, s0
 80013ee:	eef0 7a60 	vmov.f32	s15, s1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80013f8:	e15b      	b.n	80016b2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001400:	2902      	cmp	r1, #2
 8001402:	f040 8083 	bne.w	800150c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800140c:	3b02      	subs	r3, #2
 800140e:	2b0f      	cmp	r3, #15
 8001410:	d860      	bhi.n	80014d4 <prv_parse_term+0x36c>
 8001412:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <prv_parse_term+0x2b0>)
 8001414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001418:	08001459 	.word	0x08001459
 800141c:	080014d5 	.word	0x080014d5
 8001420:	080014d5 	.word	0x080014d5
 8001424:	080014d5 	.word	0x080014d5
 8001428:	080014d5 	.word	0x080014d5
 800142c:	080014d5 	.word	0x080014d5
 8001430:	080014d5 	.word	0x080014d5
 8001434:	080014d5 	.word	0x080014d5
 8001438:	080014d5 	.word	0x080014d5
 800143c:	080014d5 	.word	0x080014d5
 8001440:	080014d5 	.word	0x080014d5
 8001444:	080014d5 	.word	0x080014d5
 8001448:	080014d5 	.word	0x080014d5
 800144c:	0800148d 	.word	0x0800148d
 8001450:	080014a5 	.word	0x080014a5
 8001454:	080014bd 	.word	0x080014bd
            case 2:
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001458:	2100      	movs	r1, #0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fdc2 	bl	8000fe4 <prv_parse_number>
 8001460:	4603      	mov	r3, r0
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 800146a:	e122      	b.n	80016b2 <prv_parse_term+0x54a>
 800146c:	08007890 	.word	0x08007890
 8001470:	08007898 	.word	0x08007898
 8001474:	080078a0 	.word	0x080078a0
 8001478:	080078a8 	.word	0x080078a8
 800147c:	080078b0 	.word	0x080078b0
 8001480:	080078b8 	.word	0x080078b8
 8001484:	080078c0 	.word	0x080078c0
 8001488:	080078c8 	.word	0x080078c8
            case 15:
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 800148c:	2100      	movs	r1, #0
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fdf2 	bl	8001078 <prv_parse_float_number>
 8001494:	eeb0 7a40 	vmov.f32	s14, s0
 8001498:	eef0 7a60 	vmov.f32	s15, s1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80014a2:	e106      	b.n	80016b2 <prv_parse_term+0x54a>
            case 16:
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fde6 	bl	8001078 <prv_parse_float_number>
 80014ac:	eeb0 7a40 	vmov.f32	s14, s0
 80014b0:	eef0 7a60 	vmov.f32	s15, s1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80014ba:	e0fa      	b.n	80016b2 <prv_parse_term+0x54a>
            case 17:
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80014bc:	2100      	movs	r1, #0
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fdda 	bl	8001078 <prv_parse_float_number>
 80014c4:	eeb0 7a40 	vmov.f32	s14, s0
 80014c8:	eef0 7a60 	vmov.f32	s15, s1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80014d2:	e0ee      	b.n	80016b2 <prv_parse_term+0x54a>
            default:

                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80014da:	2b02      	cmp	r3, #2
 80014dc:	f240 80e4 	bls.w	80016a8 <prv_parse_term+0x540>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80014e6:	2b0e      	cmp	r3, #14
 80014e8:	f200 80de 	bhi.w	80016a8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 80014ec:	2100      	movs	r1, #0
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fd78 	bl	8000fe4 <prv_parse_number>
 80014f4:	4602      	mov	r2, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80014fc:	3b03      	subs	r3, #3
 80014fe:	b2d1      	uxtb	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	460a      	mov	r2, r1
 8001506:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 800150a:	e0cd      	b.n	80016a8 <prv_parse_term+0x540>
        }
#endif
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001512:	2903      	cmp	r1, #3
 8001514:	d11b      	bne.n	800154e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800151c:	2b02      	cmp	r3, #2
 800151e:	d002      	beq.n	8001526 <prv_parse_term+0x3be>
 8001520:	2b03      	cmp	r3, #3
 8001522:	d00a      	beq.n	800153a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif
                break;
 8001524:	e0c5      	b.n	80016b2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001526:	2100      	movs	r1, #0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fd5b 	bl	8000fe4 <prv_parse_number>
 800152e:	4603      	mov	r3, r0
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001538:	e0bb      	b.n	80016b2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800153a:	2100      	movs	r1, #0
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fd51 	bl	8000fe4 <prv_parse_number>
 8001542:	4603      	mov	r3, r0
 8001544:	b2da      	uxtb	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 800154c:	e0b1      	b.n	80016b2 <prv_parse_term+0x54a>
        }
#endif
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001554:	2904      	cmp	r1, #4
 8001556:	f040 80ac 	bne.w	80016b2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001560:	3902      	subs	r1, #2
 8001562:	2909      	cmp	r1, #9
 8001564:	f200 80a2 	bhi.w	80016ac <prv_parse_term+0x544>
 8001568:	a001      	add	r0, pc, #4	; (adr r0, 8001570 <prv_parse_term+0x408>)
 800156a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800156e:	bf00      	nop
 8001570:	08001599 	.word	0x08001599
 8001574:	080016ad 	.word	0x080016ad
 8001578:	080016ad 	.word	0x080016ad
 800157c:	080016ad 	.word	0x080016ad
 8001580:	080016ad 	.word	0x080016ad
 8001584:	080015b3 	.word	0x080015b3
 8001588:	080015cb 	.word	0x080015cb
 800158c:	080015e3 	.word	0x080015e3
 8001590:	0800165d 	.word	0x0800165d
 8001594:	08001675 	.word	0x08001675
            case 2:
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800159e:	2b41      	cmp	r3, #65	; 0x41
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80015b0:	e07f      	b.n	80016b2 <prv_parse_term+0x54a>
            case 7:
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80015b2:	2100      	movs	r1, #0
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fd5f 	bl	8001078 <prv_parse_float_number>
 80015ba:	eeb0 7a40 	vmov.f32	s14, s0
 80015be:	eef0 7a60 	vmov.f32	s15, s1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80015c8:	e073      	b.n	80016b2 <prv_parse_term+0x54a>
            case 8:
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 80015ca:	2100      	movs	r1, #0
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fd53 	bl	8001078 <prv_parse_float_number>
 80015d2:	eeb0 7a40 	vmov.f32	s14, s0
 80015d6:	eef0 7a60 	vmov.f32	s15, s1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80015e0:	e067      	b.n	80016b2 <prv_parse_term+0x54a>
            case 9:
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80015e8:	3b30      	subs	r3, #48	; 0x30
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015fc:	4413      	add	r3, r2
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	3b30      	subs	r3, #48	; 0x30
 8001602:	b2da      	uxtb	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001610:	3b30      	subs	r3, #48	; 0x30
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	b2da      	uxtb	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001624:	4413      	add	r3, r2
 8001626:	b2db      	uxtb	r3, r3
 8001628:	3b30      	subs	r3, #48	; 0x30
 800162a:	b2da      	uxtb	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001638:	3b30      	subs	r3, #48	; 0x30
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4413      	add	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800164c:	4413      	add	r3, r2
 800164e:	b2db      	uxtb	r3, r3
 8001650:	3b30      	subs	r3, #48	; 0x30
 8001652:	b2da      	uxtb	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 800165a:	e02a      	b.n	80016b2 <prv_parse_term+0x54a>
            case 10:
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800165c:	2100      	movs	r1, #0
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fd0a 	bl	8001078 <prv_parse_float_number>
 8001664:	eeb0 7a40 	vmov.f32	s14, s0
 8001668:	eef0 7a60 	vmov.f32	s15, s1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001672:	e01e      	b.n	80016b2 <prv_parse_term+0x54a>
            case 11:
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 800167a:	2957      	cmp	r1, #87	; 0x57
 800167c:	d004      	beq.n	8001688 <prv_parse_term+0x520>
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001684:	2977      	cmp	r1, #119	; 0x77
 8001686:	d113      	bne.n	80016b0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 800168e:	4602      	mov	r2, r0
 8001690:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 800169a:	e009      	b.n	80016b0 <prv_parse_term+0x548>
                break;
 800169c:	bf00      	nop
 800169e:	e008      	b.n	80016b2 <prv_parse_term+0x54a>
                break;
 80016a0:	bf00      	nop
 80016a2:	e006      	b.n	80016b2 <prv_parse_term+0x54a>
                break;
 80016a4:	bf00      	nop
 80016a6:	e004      	b.n	80016b2 <prv_parse_term+0x54a>
                break;
 80016a8:	bf00      	nop
 80016aa:	e002      	b.n	80016b2 <prv_parse_term+0x54a>
            default:
                break;
 80016ac:	bf00      	nop
 80016ae:	e000      	b.n	80016b2 <prv_parse_term+0x54a>
                break;
 80016b0:	bf00      	nop
                break;
        }
#endif
#endif
    }
    return 1;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016be:	bf00      	nop

080016c0 <prv_check_crc>:

#if LWGPS_CFG_CRC

static uint8_t
prv_check_crc(lwgps_t* gh) {
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016ce:	2b2f      	cmp	r3, #47	; 0x2f
 80016d0:	d90d      	bls.n	80016ee <prv_check_crc+0x2e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016d8:	2b39      	cmp	r3, #57	; 0x39
 80016da:	d808      	bhi.n	80016ee <prv_check_crc+0x2e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016e2:	3b30      	subs	r3, #48	; 0x30
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	e026      	b.n	800173c <prv_check_crc+0x7c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016f4:	2b60      	cmp	r3, #96	; 0x60
 80016f6:	d90d      	bls.n	8001714 <prv_check_crc+0x54>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016fe:	2b7a      	cmp	r3, #122	; 0x7a
 8001700:	d808      	bhi.n	8001714 <prv_check_crc+0x54>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001708:	3b57      	subs	r3, #87	; 0x57
 800170a:	b2db      	uxtb	r3, r3
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	b2db      	uxtb	r3, r3
 8001710:	b25a      	sxtb	r2, r3
 8001712:	e013      	b.n	800173c <prv_check_crc+0x7c>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800171a:	2b40      	cmp	r3, #64	; 0x40
 800171c:	d90d      	bls.n	800173a <prv_check_crc+0x7a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001724:	2b5a      	cmp	r3, #90	; 0x5a
 8001726:	d808      	bhi.n	800173a <prv_check_crc+0x7a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800172e:	3b37      	subs	r3, #55	; 0x37
 8001730:	b2db      	uxtb	r3, r3
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	b2db      	uxtb	r3, r3
 8001736:	b25a      	sxtb	r2, r3
 8001738:	e000      	b.n	800173c <prv_check_crc+0x7c>
 800173a:	2200      	movs	r2, #0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001742:	2b2f      	cmp	r3, #47	; 0x2f
 8001744:	d90c      	bls.n	8001760 <prv_check_crc+0xa0>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800174c:	2b39      	cmp	r3, #57	; 0x39
 800174e:	d807      	bhi.n	8001760 <prv_check_crc+0xa0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001756:	b25b      	sxtb	r3, r3
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	b25b      	sxtb	r3, r3
 800175e:	e028      	b.n	80017b2 <prv_check_crc+0xf2>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001766:	2b60      	cmp	r3, #96	; 0x60
 8001768:	d90e      	bls.n	8001788 <prv_check_crc+0xc8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001770:	2b7a      	cmp	r3, #122	; 0x7a
 8001772:	d809      	bhi.n	8001788 <prv_check_crc+0xc8>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800177a:	3b57      	subs	r3, #87	; 0x57
 800177c:	b2db      	uxtb	r3, r3
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	b25b      	sxtb	r3, r3
 8001786:	e014      	b.n	80017b2 <prv_check_crc+0xf2>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800178e:	2b40      	cmp	r3, #64	; 0x40
 8001790:	d90e      	bls.n	80017b0 <prv_check_crc+0xf0>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001798:	2b5a      	cmp	r3, #90	; 0x5a
 800179a:	d809      	bhi.n	80017b0 <prv_check_crc+0xf0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80017a2:	3b37      	subs	r3, #55	; 0x37
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	e000      	b.n	80017b2 <prv_check_crc+0xf2>
 80017b0:	2300      	movs	r3, #0
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <prv_copy_from_tmp_memory>:
#define prv_check_crc(_gh)              (1)
#endif /* LWGPS_CFG_CRC */


static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d136      	bne.n	8001856 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001854:	e061      	b.n	800191a <prv_copy_from_tmp_memory+0x144>
#endif
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800185c:	2b02      	cmp	r3, #2
 800185e:	d121      	bne.n	80018a4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	33a1      	adds	r3, #161	; 0xa1
 800189a:	220c      	movs	r2, #12
 800189c:	4619      	mov	r1, r3
 800189e:	f004 f972 	bl	8005b86 <memcpy>
 80018a2:	e03a      	b.n	800191a <prv_copy_from_tmp_memory+0x144>
#endif
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d106      	bne.n	80018bc <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80018ba:	e02e      	b.n	800191a <prv_copy_from_tmp_memory+0x144>
#endif
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d129      	bne.n	800191a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif
    }
    return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <lwgps_init>:


uint8_t
lwgps_init(lwgps_t* gh) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));
 800192c:	22b0      	movs	r2, #176	; 0xb0
 800192e:	2100      	movs	r1, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f004 f89a 	bl	8005a6a <memset>
    return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <lwgps_process>:

uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
#endif
    const uint8_t* d = data;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {
 8001950:	e0ad      	b.n	8001aae <lwgps_process+0x16e>
        if (*d == '$') {
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b24      	cmp	r3, #36	; 0x24
 8001958:	d128      	bne.n	80019ac <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3370      	adds	r3, #112	; 0x70
 800195e:	2240      	movs	r2, #64	; 0x40
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f004 f881 	bl	8005a6a <memset>
            TERM_ADD(gh, *d);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800196e:	2b0b      	cmp	r3, #11
 8001970:	f200 8097 	bhi.w	8001aa2 <lwgps_process+0x162>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800197a:	4619      	mov	r1, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	440b      	add	r3, r1
 8001984:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800198e:	3301      	adds	r3, #1
 8001990:	b2da      	uxtb	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80019aa:	e07a      	b.n	8001aa2 <lwgps_process+0x162>
        } else if (*d == ',') {
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b2c      	cmp	r3, #44	; 0x2c
 80019b2:	d11d      	bne.n	80019f0 <lwgps_process+0xb0>
            prv_parse_term(gh);
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff fbd7 	bl	8001168 <prv_parse_term>
            CRC_ADD(gh, *d);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4053      	eors	r3, r2
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80019ee:	e058      	b.n	8001aa2 <lwgps_process+0x162>
        } else if (*d == '*') {
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b2a      	cmp	r3, #42	; 0x2a
 80019f6:	d117      	bne.n	8001a28 <lwgps_process+0xe8>
            prv_parse_term(gh);
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff fbb5 	bl	8001168 <prv_parse_term>
            gh->p.star = 1;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001a26:	e03c      	b.n	8001aa2 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b0d      	cmp	r3, #13
 8001a2e:	d109      	bne.n	8001a44 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff fe45 	bl	80016c0 <prv_check_crc>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d032      	beq.n	8001aa2 <lwgps_process+0x162>

                prv_copy_from_tmp_memory(gh);
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7ff feca 	bl	80017d6 <prv_copy_from_tmp_memory>
 8001a42:	e02e      	b.n	8001aa2 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif
            }
        } else {
            if (!gh->p.star) {
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <lwgps_process+0x122>
                CRC_ADD(gh, *d);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4053      	eors	r3, r2
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a68:	2b0b      	cmp	r3, #11
 8001a6a:	d81a      	bhi.n	8001aa2 <lwgps_process+0x162>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a72:	4619      	mov	r1, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a86:	3301      	adds	r3, #1
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f47f af4e 	bne.w	8001952 <lwgps_process+0x12>
        }
    }
    return 1;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
		if(huart == &huart2) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_UART_RxCpltCallback+0x68>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d127      	bne.n	8001b20 <HAL_UART_RxCpltCallback+0x60>
			if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_UART_RxCpltCallback+0x6c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b0a      	cmp	r3, #10
 8001ad6:	d010      	beq.n	8001afa <HAL_UART_RxCpltCallback+0x3a>
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_UART_RxCpltCallback+0x70>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <HAL_UART_RxCpltCallback+0x3a>
				rx_buffer[rx_index++] = rx_data;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_UART_RxCpltCallback+0x70>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	b2d1      	uxtb	r1, r2
 8001aea:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <HAL_UART_RxCpltCallback+0x70>)
 8001aec:	7011      	strb	r1, [r2, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_UART_RxCpltCallback+0x6c>)
 8001af2:	7819      	ldrb	r1, [r3, #0]
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_UART_RxCpltCallback+0x74>)
 8001af6:	5499      	strb	r1, [r3, r2]
 8001af8:	e00d      	b.n	8001b16 <HAL_UART_RxCpltCallback+0x56>
			} else {
				lwgps_process(&gps, rx_buffer, rx_index+1);
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_UART_RxCpltCallback+0x70>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	461a      	mov	r2, r3
 8001b02:	490c      	ldr	r1, [pc, #48]	; (8001b34 <HAL_UART_RxCpltCallback+0x74>)
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <HAL_UART_RxCpltCallback+0x78>)
 8001b06:	f7ff ff1b 	bl	8001940 <lwgps_process>
				rx_index = 0;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_UART_RxCpltCallback+0x70>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
				rx_data = 0;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_UART_RxCpltCallback+0x6c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_DMA(&huart2, &rx_data, 1);
 8001b16:	2201      	movs	r2, #1
 8001b18:	4904      	ldr	r1, [pc, #16]	; (8001b2c <HAL_UART_RxCpltCallback+0x6c>)
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <HAL_UART_RxCpltCallback+0x68>)
 8001b1c:	f001 ffd2 	bl	8003ac4 <HAL_UART_Receive_DMA>
		}
	}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000330 	.word	0x20000330
 8001b2c:	20000329 	.word	0x20000329
 8001b30:	20000328 	.word	0x20000328
 8001b34:	200002a8 	.word	0x200002a8
 8001b38:	200001f8 	.word	0x200001f8

08001b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b40:	f000 faa4 	bl	800208c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b44:	f000 f816 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b48:	f7ff fa24 	bl	8000f94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b4c:	f7ff fa02 	bl	8000f54 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b50:	f000 f9c6 	bl	8001ee0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	  lwgps_init(&gps);
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <main+0x2c>)
 8001b56:	f7ff fee5 	bl	8001924 <lwgps_init>
	  HAL_UART_Receive_DMA(&huart2, &rx_data, 1);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <main+0x30>)
 8001b5e:	4804      	ldr	r0, [pc, #16]	; (8001b70 <main+0x34>)
 8001b60:	f001 ffb0 	bl	8003ac4 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <main+0x28>
 8001b66:	bf00      	nop
 8001b68:	200001f8 	.word	0x200001f8
 8001b6c:	20000329 	.word	0x20000329
 8001b70:	20000330 	.word	0x20000330

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b094      	sub	sp, #80	; 0x50
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	2234      	movs	r2, #52	; 0x34
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 ff71 	bl	8005a6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <SystemClock_Config+0xdc>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <SystemClock_Config+0xdc>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <SystemClock_Config+0xdc>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <SystemClock_Config+0xe0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a25      	ldr	r2, [pc, #148]	; (8001c54 <SystemClock_Config+0xe0>)
 8001bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <SystemClock_Config+0xe0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001be2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001be4:	230f      	movs	r3, #15
 8001be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001be8:	23d8      	movs	r3, #216	; 0xd8
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fc73 	bl	80034e8 <HAL_RCC_OscConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c08:	f000 f826 	bl	8001c58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c0c:	f001 f958 	bl	8002ec0 <HAL_PWREx_EnableOverDrive>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c16:	f000 f81f 	bl	8001c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2105      	movs	r1, #5
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 f991 	bl	8002f60 <HAL_RCC_ClockConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c44:	f000 f808 	bl	8001c58 <Error_Handler>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3750      	adds	r7, #80	; 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5c:	b672      	cpsid	i
}
 8001c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <Error_Handler+0x8>
	...

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 fa16 	bl	8002130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA1_Stream5_IRQHandler+0x10>)
 8001d0e:	f000 fcd9 	bl	80026c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000378 	.word	0x20000378

08001d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <USART2_IRQHandler+0x10>)
 8001d22:	f001 fef5 	bl	8003b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000330 	.word	0x20000330

08001d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return 1;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_kill>:

int _kill(int pid, int sig)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d4a:	f003 feef 	bl	8005b2c <__errno>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2216      	movs	r2, #22
 8001d52:	601a      	str	r2, [r3, #0]
  return -1;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_exit>:

void _exit (int status)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ffe7 	bl	8001d40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d72:	e7fe      	b.n	8001d72 <_exit+0x12>

08001d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e00a      	b.n	8001d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d86:	f3af 8000 	nop.w
 8001d8a:	4601      	mov	r1, r0
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60ba      	str	r2, [r7, #8]
 8001d92:	b2ca      	uxtb	r2, r1
 8001d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dbf0      	blt.n	8001d86 <_read+0x12>
  }

  return len;
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e009      	b.n	8001dd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbf1      	blt.n	8001dc0 <_write+0x12>
  }
  return len;
 8001ddc:	687b      	ldr	r3, [r7, #4]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_close>:

int _close(int file)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <_isatty>:

int _isatty(int file)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <_sbrk+0x5c>)
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <_sbrk+0x60>)
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <_sbrk+0x64>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <_sbrk+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d207      	bcs.n	8001e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e80:	f003 fe54 	bl	8005b2c <__errno>
 8001e84:	4603      	mov	r3, r0
 8001e86:	220c      	movs	r2, #12
 8001e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8e:	e009      	b.n	8001ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <_sbrk+0x64>)
 8001ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20020000 	.word	0x20020000
 8001eb0:	00000400 	.word	0x00000400
 8001eb4:	2000032c 	.word	0x2000032c
 8001eb8:	20000528 	.word	0x20000528

08001ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <SystemInit+0x20>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	4a05      	ldr	r2, [pc, #20]	; (8001edc <SystemInit+0x20>)
 8001ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <MX_USART2_UART_Init+0x50>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001eec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f16:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f18:	f001 fd84 	bl	8003a24 <HAL_UART_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f22:	f7ff fe99 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000330 	.word	0x20000330
 8001f30:	40004400 	.word	0x40004400

08001f34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a34      	ldr	r2, [pc, #208]	; (8002024 <HAL_UART_MspInit+0xf0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d162      	bne.n	800201c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_UART_MspInit+0xf4>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a32      	ldr	r2, [pc, #200]	; (8002028 <HAL_UART_MspInit+0xf4>)
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_UART_MspInit+0xf4>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <HAL_UART_MspInit+0xf4>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a2b      	ldr	r2, [pc, #172]	; (8002028 <HAL_UART_MspInit+0xf4>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_UART_MspInit+0xf4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f8e:	230c      	movs	r3, #12
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4820      	ldr	r0, [pc, #128]	; (800202c <HAL_UART_MspInit+0xf8>)
 8001faa:	f000 fdf5 	bl	8002b98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fb0:	4a20      	ldr	r2, [pc, #128]	; (8002034 <HAL_UART_MspInit+0x100>)
 8001fb2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ff0:	480f      	ldr	r0, [pc, #60]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8001ff2:	f000 f9cf 	bl	8002394 <HAL_DMA_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001ffc:	f7ff fe2c 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8002004:	63da      	str	r2, [r3, #60]	; 0x3c
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_UART_MspInit+0xfc>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	2026      	movs	r0, #38	; 0x26
 8002012:	f000 f988 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002016:	2026      	movs	r0, #38	; 0x26
 8002018:	f000 f9a1 	bl	800235e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	; 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40004400 	.word	0x40004400
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000
 8002030:	20000378 	.word	0x20000378
 8002034:	40026088 	.word	0x40026088

08002038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002070 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800203c:	f7ff ff3e 	bl	8001ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002042:	490d      	ldr	r1, [pc, #52]	; (8002078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002058:	4c0a      	ldr	r4, [pc, #40]	; (8002084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002066:	f003 fd67 	bl	8005b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206a:	f7ff fd67 	bl	8001b3c <main>
  bx  lr    
 800206e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002078:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800207c:	08007cbc 	.word	0x08007cbc
  ldr r2, =_sbss
 8002080:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002084:	20000528 	.word	0x20000528

08002088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC_IRQHandler>
	...

0800208c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <HAL_Init+0x40>)
 8002096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_Init+0x40>)
 80020a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_Init+0x40>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b4:	2003      	movs	r0, #3
 80020b6:	f000 f92b 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ba:	200f      	movs	r0, #15
 80020bc:	f000 f808 	bl	80020d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c0:	f7ff fdd0 	bl	8001c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x54>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x58>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f943 	bl	800237a <HAL_SYSTICK_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00e      	b.n	800211c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0f      	cmp	r3, #15
 8002102:	d80a      	bhi.n	800211a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002104:	2200      	movs	r2, #0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800210c:	f000 f90b 	bl	8002326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <HAL_InitTick+0x5c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000000 	.word	0x20000000
 8002128:	20000008 	.word	0x20000008
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008
 8002154:	200003d8 	.word	0x200003d8

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200003d8 	.word	0x200003d8

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022f0:	f7ff ff8e 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff29 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff3e 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff8e 	bl	8002264 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5d 	bl	8002210 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff31 	bl	80021d4 <__NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ffa2 	bl	80022cc <SysTick_Config>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023a0:	f7ff feda 	bl	8002158 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e099      	b.n	80024e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d0:	e00f      	b.n	80023f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d2:	f7ff fec1 	bl	8002158 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d908      	bls.n	80023f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e078      	b.n	80024e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e8      	bne.n	80023d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_DMA_Init+0x158>)
 800240c:	4013      	ands	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2b04      	cmp	r3, #4
 800244a:	d107      	bne.n	800245c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4313      	orrs	r3, r2
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f023 0307 	bic.w	r3, r3, #7
 8002472:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	2b04      	cmp	r3, #4
 8002484:	d117      	bne.n	80024b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00e      	beq.n	80024b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fb01 	bl	8002aa0 <DMA_CheckFifoParam>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2240      	movs	r2, #64	; 0x40
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024b2:	2301      	movs	r3, #1
 80024b4:	e016      	b.n	80024e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fab8 	bl	8002a34 <DMA_CalcBaseAndBitshift>
 80024c4:	4603      	mov	r3, r0
 80024c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	223f      	movs	r2, #63	; 0x3f
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	f010803f 	.word	0xf010803f

080024f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_DMA_Start_IT+0x26>
 8002512:	2302      	movs	r3, #2
 8002514:	e040      	b.n	8002598 <HAL_DMA_Start_IT+0xa8>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d12f      	bne.n	800258a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2202      	movs	r2, #2
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa4a 	bl	80029d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	223f      	movs	r2, #63	; 0x3f
 800254a:	409a      	lsls	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0216 	orr.w	r2, r2, #22
 800255e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0208 	orr.w	r2, r2, #8
 8002576:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e005      	b.n	8002596 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002592:	2302      	movs	r3, #2
 8002594:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002596:	7dfb      	ldrb	r3, [r7, #23]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025ae:	f7ff fdd3 	bl	8002158 <HAL_GetTick>
 80025b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d008      	beq.n	80025d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e052      	b.n	8002678 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0216 	bic.w	r2, r2, #22
 80025e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d103      	bne.n	8002602 <HAL_DMA_Abort+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0208 	bic.w	r2, r2, #8
 8002610:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002622:	e013      	b.n	800264c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002624:	f7ff fd98 	bl	8002158 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b05      	cmp	r3, #5
 8002630:	d90c      	bls.n	800264c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2203      	movs	r2, #3
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e015      	b.n	8002678 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1e4      	bne.n	8002624 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	223f      	movs	r2, #63	; 0x3f
 8002660:	409a      	lsls	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d004      	beq.n	800269e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2280      	movs	r2, #128	; 0x80
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e00c      	b.n	80026b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2205      	movs	r2, #5
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026d0:	4b8e      	ldr	r3, [pc, #568]	; (800290c <HAL_DMA_IRQHandler+0x248>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a8e      	ldr	r2, [pc, #568]	; (8002910 <HAL_DMA_IRQHandler+0x24c>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0a9b      	lsrs	r3, r3, #10
 80026dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	2208      	movs	r2, #8
 80026f0:	409a      	lsls	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01a      	beq.n	8002730 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0204 	bic.w	r2, r2, #4
 8002716:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2208      	movs	r2, #8
 800271e:	409a      	lsls	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f043 0201 	orr.w	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	2201      	movs	r2, #1
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d012      	beq.n	8002766 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2201      	movs	r2, #1
 8002754:	409a      	lsls	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f043 0202 	orr.w	r2, r3, #2
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2204      	movs	r2, #4
 800276c:	409a      	lsls	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d012      	beq.n	800279c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00b      	beq.n	800279c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	2204      	movs	r2, #4
 800278a:	409a      	lsls	r2, r3
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f043 0204 	orr.w	r2, r3, #4
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	2210      	movs	r2, #16
 80027a2:	409a      	lsls	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d043      	beq.n	8002834 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d03c      	beq.n	8002834 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	2210      	movs	r2, #16
 80027c0:	409a      	lsls	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d018      	beq.n	8002806 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d108      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d024      	beq.n	8002834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
 80027f2:	e01f      	b.n	8002834 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01b      	beq.n	8002834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
 8002804:	e016      	b.n	8002834 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0208 	bic.w	r2, r2, #8
 8002822:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	2220      	movs	r2, #32
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 808f 	beq.w	8002964 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8087 	beq.w	8002964 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	2220      	movs	r2, #32
 800285c:	409a      	lsls	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b05      	cmp	r3, #5
 800286c:	d136      	bne.n	80028dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0216 	bic.w	r2, r2, #22
 800287c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800288c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d103      	bne.n	800289e <HAL_DMA_IRQHandler+0x1da>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0208 	bic.w	r2, r2, #8
 80028ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	223f      	movs	r2, #63	; 0x3f
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d07e      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
        }
        return;
 80028da:	e079      	b.n	80029d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01d      	beq.n	8002926 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10d      	bne.n	8002914 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d031      	beq.n	8002964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
 8002908:	e02c      	b.n	8002964 <HAL_DMA_IRQHandler+0x2a0>
 800290a:	bf00      	nop
 800290c:	20000000 	.word	0x20000000
 8002910:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
 8002924:	e01e      	b.n	8002964 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10f      	bne.n	8002954 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0210 	bic.w	r2, r2, #16
 8002942:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	2b00      	cmp	r3, #0
 800296a:	d032      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d022      	beq.n	80029be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2205      	movs	r2, #5
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	3301      	adds	r3, #1
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	429a      	cmp	r2, r3
 800299a:	d307      	bcc.n	80029ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f2      	bne.n	8002990 <HAL_DMA_IRQHandler+0x2cc>
 80029aa:	e000      	b.n	80029ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
 80029ce:	e000      	b.n	80029d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029d0:	bf00      	nop
    }
  }
}
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	d108      	bne.n	8002a18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a16:	e007      	b.n	8002a28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	60da      	str	r2, [r3, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3b10      	subs	r3, #16
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <DMA_CalcBaseAndBitshift+0x64>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a4e:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <DMA_CalcBaseAndBitshift+0x68>)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d909      	bls.n	8002a76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	659a      	str	r2, [r3, #88]	; 0x58
 8002a74:	e007      	b.n	8002a86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	aaaaaaab 	.word	0xaaaaaaab
 8002a9c:	080078e8 	.word	0x080078e8

08002aa0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d11f      	bne.n	8002afa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d856      	bhi.n	8002b6e <DMA_CheckFifoParam+0xce>
 8002ac0:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <DMA_CheckFifoParam+0x28>)
 8002ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac6:	bf00      	nop
 8002ac8:	08002ad9 	.word	0x08002ad9
 8002acc:	08002aeb 	.word	0x08002aeb
 8002ad0:	08002ad9 	.word	0x08002ad9
 8002ad4:	08002b6f 	.word	0x08002b6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d046      	beq.n	8002b72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e043      	b.n	8002b72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002af2:	d140      	bne.n	8002b76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af8:	e03d      	b.n	8002b76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b02:	d121      	bne.n	8002b48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d837      	bhi.n	8002b7a <DMA_CheckFifoParam+0xda>
 8002b0a:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <DMA_CheckFifoParam+0x70>)
 8002b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b10:	08002b21 	.word	0x08002b21
 8002b14:	08002b27 	.word	0x08002b27
 8002b18:	08002b21 	.word	0x08002b21
 8002b1c:	08002b39 	.word	0x08002b39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      break;
 8002b24:	e030      	b.n	8002b88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d025      	beq.n	8002b7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b36:	e022      	b.n	8002b7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b40:	d11f      	bne.n	8002b82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b46:	e01c      	b.n	8002b82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d903      	bls.n	8002b56 <DMA_CheckFifoParam+0xb6>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d003      	beq.n	8002b5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b54:	e018      	b.n	8002b88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5a:	e015      	b.n	8002b88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6c:	e00b      	b.n	8002b86 <DMA_CheckFifoParam+0xe6>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e00a      	b.n	8002b88 <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
 8002b74:	e008      	b.n	8002b88 <DMA_CheckFifoParam+0xe8>
      break;
 8002b76:	bf00      	nop
 8002b78:	e006      	b.n	8002b88 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e004      	b.n	8002b88 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e002      	b.n	8002b88 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b82:	bf00      	nop
 8002b84:	e000      	b.n	8002b88 <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
    }
  } 
  
  return status; 
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	e165      	b.n	8002e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	f040 8154 	bne.w	8002e7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d005      	beq.n	8002bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d130      	bne.n	8002c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c20:	2201      	movs	r2, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 0201 	and.w	r2, r3, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d017      	beq.n	8002c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d123      	bne.n	8002cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	08da      	lsrs	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	220f      	movs	r2, #15
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	08da      	lsrs	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3208      	adds	r2, #8
 8002cd6:	69b9      	ldr	r1, [r7, #24]
 8002cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80ae 	beq.w	8002e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	4b5d      	ldr	r3, [pc, #372]	; (8002e98 <HAL_GPIO_Init+0x300>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4a5c      	ldr	r2, [pc, #368]	; (8002e98 <HAL_GPIO_Init+0x300>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2e:	4b5a      	ldr	r3, [pc, #360]	; (8002e98 <HAL_GPIO_Init+0x300>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d3a:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_GPIO_Init+0x304>)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_GPIO_Init+0x308>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d025      	beq.n	8002db2 <HAL_GPIO_Init+0x21a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4e      	ldr	r2, [pc, #312]	; (8002ea4 <HAL_GPIO_Init+0x30c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <HAL_GPIO_Init+0x216>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4d      	ldr	r2, [pc, #308]	; (8002ea8 <HAL_GPIO_Init+0x310>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d019      	beq.n	8002daa <HAL_GPIO_Init+0x212>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <HAL_GPIO_Init+0x314>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_GPIO_Init+0x20e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_GPIO_Init+0x318>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00d      	beq.n	8002da2 <HAL_GPIO_Init+0x20a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4a      	ldr	r2, [pc, #296]	; (8002eb4 <HAL_GPIO_Init+0x31c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <HAL_GPIO_Init+0x206>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a49      	ldr	r2, [pc, #292]	; (8002eb8 <HAL_GPIO_Init+0x320>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_GPIO_Init+0x202>
 8002d96:	2306      	movs	r3, #6
 8002d98:	e00c      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00a      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002d9e:	2305      	movs	r3, #5
 8002da0:	e008      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002da2:	2304      	movs	r3, #4
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002da6:	2303      	movs	r3, #3
 8002da8:	e004      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e002      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002db2:	2300      	movs	r3, #0
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f002 0203 	and.w	r2, r2, #3
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc4:	4935      	ldr	r1, [pc, #212]	; (8002e9c <HAL_GPIO_Init+0x304>)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd2:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df6:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dfc:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	f67f ae96 	bls.w	8002bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40021400 	.word	0x40021400
 8002eb8:	40021800 	.word	0x40021800
 8002ebc:	40013c00 	.word	0x40013c00

08002ec0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_PWREx_EnableOverDrive+0x94>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eec:	f7ff f934 	bl	8002158 <HAL_GetTick>
 8002ef0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ef2:	e009      	b.n	8002f08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ef4:	f7ff f930 	bl	8002158 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f02:	d901      	bls.n	8002f08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e01f      	b.n	8002f48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f1c:	f7ff f91c 	bl	8002158 <HAL_GetTick>
 8002f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f22:	e009      	b.n	8002f38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f24:	f7ff f918 	bl	8002158 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f32:	d901      	bls.n	8002f38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e007      	b.n	8002f48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f44:	d1ee      	bne.n	8002f24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40023800 	.word	0x40023800
 8002f54:	420e0040 	.word	0x420e0040
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	420e0044 	.word	0x420e0044

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0cc      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b68      	ldr	r3, [pc, #416]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d90c      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b65      	ldr	r3, [pc, #404]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b63      	ldr	r3, [pc, #396]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0b8      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb4:	4b59      	ldr	r3, [pc, #356]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a58      	ldr	r2, [pc, #352]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fcc:	4b53      	ldr	r3, [pc, #332]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd8:	4b50      	ldr	r3, [pc, #320]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	494d      	ldr	r1, [pc, #308]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d044      	beq.n	8003080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	4b47      	ldr	r3, [pc, #284]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d119      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e07f      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d003      	beq.n	800301e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301a:	2b03      	cmp	r3, #3
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06f      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e067      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303e:	4b37      	ldr	r3, [pc, #220]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f023 0203 	bic.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4934      	ldr	r1, [pc, #208]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003050:	f7ff f882 	bl	8002158 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	e00a      	b.n	800306e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003058:	f7ff f87e 	bl	8002158 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e04f      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	4b2b      	ldr	r3, [pc, #172]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 020c 	and.w	r2, r3, #12
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	429a      	cmp	r2, r3
 800307e:	d1eb      	bne.n	8003058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003080:	4b25      	ldr	r3, [pc, #148]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d20c      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e032      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4916      	ldr	r1, [pc, #88]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	490e      	ldr	r1, [pc, #56]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030e6:	f000 f855 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 80030ea:	4602      	mov	r2, r0
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	490a      	ldr	r1, [pc, #40]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	5ccb      	ldrb	r3, [r1, r3]
 80030fa:	fa22 f303 	lsr.w	r3, r2, r3
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe ffe2 	bl	80020d0 <HAL_InitTick>

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023c00 	.word	0x40023c00
 800311c:	40023800 	.word	0x40023800
 8003120:	080078d0 	.word	0x080078d0
 8003124:	20000000 	.word	0x20000000
 8003128:	20000004 	.word	0x20000004

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCC_GetHCLKFreq+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000000 	.word	0x20000000

08003144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003148:	f7ff fff0 	bl	800312c <HAL_RCC_GetHCLKFreq>
 800314c:	4602      	mov	r2, r0
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0a9b      	lsrs	r3, r3, #10
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	4903      	ldr	r1, [pc, #12]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800315a:	5ccb      	ldrb	r3, [r1, r3]
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	080078e0 	.word	0x080078e0

0800316c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003170:	f7ff ffdc 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	0b5b      	lsrs	r3, r3, #13
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4903      	ldr	r1, [pc, #12]	; (8003190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	080078e0 	.word	0x080078e0

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b0a6      	sub	sp, #152	; 0x98
 800319a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ba:	4bc8      	ldr	r3, [pc, #800]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	f200 817e 	bhi.w	80034c4 <HAL_RCC_GetSysClockFreq+0x330>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	08003205 	.word	0x08003205
 80031d4:	080034c5 	.word	0x080034c5
 80031d8:	080034c5 	.word	0x080034c5
 80031dc:	080034c5 	.word	0x080034c5
 80031e0:	0800320d 	.word	0x0800320d
 80031e4:	080034c5 	.word	0x080034c5
 80031e8:	080034c5 	.word	0x080034c5
 80031ec:	080034c5 	.word	0x080034c5
 80031f0:	08003215 	.word	0x08003215
 80031f4:	080034c5 	.word	0x080034c5
 80031f8:	080034c5 	.word	0x080034c5
 80031fc:	080034c5 	.word	0x080034c5
 8003200:	0800337f 	.word	0x0800337f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003204:	4bb6      	ldr	r3, [pc, #728]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800320a:	e15f      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800320c:	4bb5      	ldr	r3, [pc, #724]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 800320e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003212:	e15b      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003214:	4bb1      	ldr	r3, [pc, #708]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800321c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003220:	4bae      	ldr	r3, [pc, #696]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d031      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322c:	4bab      	ldr	r3, [pc, #684]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	099b      	lsrs	r3, r3, #6
 8003232:	2200      	movs	r2, #0
 8003234:	66bb      	str	r3, [r7, #104]	; 0x68
 8003236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323e:	663b      	str	r3, [r7, #96]	; 0x60
 8003240:	2300      	movs	r3, #0
 8003242:	667b      	str	r3, [r7, #100]	; 0x64
 8003244:	4ba7      	ldr	r3, [pc, #668]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003246:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800324a:	462a      	mov	r2, r5
 800324c:	fb03 f202 	mul.w	r2, r3, r2
 8003250:	2300      	movs	r3, #0
 8003252:	4621      	mov	r1, r4
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	4aa2      	ldr	r2, [pc, #648]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 800325c:	4621      	mov	r1, r4
 800325e:	fba1 1202 	umull	r1, r2, r1, r2
 8003262:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003264:	460a      	mov	r2, r1
 8003266:	67ba      	str	r2, [r7, #120]	; 0x78
 8003268:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800326a:	4413      	add	r3, r2
 800326c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800326e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003272:	2200      	movs	r2, #0
 8003274:	65bb      	str	r3, [r7, #88]	; 0x58
 8003276:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003278:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800327c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003280:	f7fd fcb4 	bl	8000bec <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800328e:	e064      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003290:	4b92      	ldr	r3, [pc, #584]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	2200      	movs	r2, #0
 8003298:	653b      	str	r3, [r7, #80]	; 0x50
 800329a:	657a      	str	r2, [r7, #84]	; 0x54
 800329c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a4:	2300      	movs	r3, #0
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80032ac:	4622      	mov	r2, r4
 80032ae:	462b      	mov	r3, r5
 80032b0:	f04f 0000 	mov.w	r0, #0
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	0159      	lsls	r1, r3, #5
 80032ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032be:	0150      	lsls	r0, r2, #5
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4621      	mov	r1, r4
 80032c6:	1a51      	subs	r1, r2, r1
 80032c8:	6139      	str	r1, [r7, #16]
 80032ca:	4629      	mov	r1, r5
 80032cc:	eb63 0301 	sbc.w	r3, r3, r1
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032de:	4659      	mov	r1, fp
 80032e0:	018b      	lsls	r3, r1, #6
 80032e2:	4651      	mov	r1, sl
 80032e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e8:	4651      	mov	r1, sl
 80032ea:	018a      	lsls	r2, r1, #6
 80032ec:	4651      	mov	r1, sl
 80032ee:	ebb2 0801 	subs.w	r8, r2, r1
 80032f2:	4659      	mov	r1, fp
 80032f4:	eb63 0901 	sbc.w	r9, r3, r1
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003304:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003308:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800330c:	4690      	mov	r8, r2
 800330e:	4699      	mov	r9, r3
 8003310:	4623      	mov	r3, r4
 8003312:	eb18 0303 	adds.w	r3, r8, r3
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	462b      	mov	r3, r5
 800331a:	eb49 0303 	adc.w	r3, r9, r3
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800332c:	4629      	mov	r1, r5
 800332e:	028b      	lsls	r3, r1, #10
 8003330:	4621      	mov	r1, r4
 8003332:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003336:	4621      	mov	r1, r4
 8003338:	028a      	lsls	r2, r1, #10
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003342:	2200      	movs	r2, #0
 8003344:	643b      	str	r3, [r7, #64]	; 0x40
 8003346:	647a      	str	r2, [r7, #68]	; 0x44
 8003348:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800334c:	f7fd fc4e 	bl	8000bec <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4613      	mov	r3, r2
 8003356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800335a:	4b60      	ldr	r3, [pc, #384]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0c1b      	lsrs	r3, r3, #16
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	3301      	adds	r3, #1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800336c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800337c:	e0a6      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338a:	4b54      	ldr	r3, [pc, #336]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d02a      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	2200      	movs	r2, #0
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033a8:	2100      	movs	r1, #0
 80033aa:	4b4e      	ldr	r3, [pc, #312]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 80033ac:	fb03 f201 	mul.w	r2, r3, r1
 80033b0:	2300      	movs	r3, #0
 80033b2:	fb00 f303 	mul.w	r3, r0, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 80033ba:	fba0 1202 	umull	r1, r2, r0, r2
 80033be:	677a      	str	r2, [r7, #116]	; 0x74
 80033c0:	460a      	mov	r2, r1
 80033c2:	673a      	str	r2, [r7, #112]	; 0x70
 80033c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033c6:	4413      	add	r3, r2
 80033c8:	677b      	str	r3, [r7, #116]	; 0x74
 80033ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ce:	2200      	movs	r2, #0
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
 80033d2:	637a      	str	r2, [r7, #52]	; 0x34
 80033d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033d8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80033dc:	f7fd fc06 	bl	8000bec <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033ea:	e05b      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	2200      	movs	r2, #0
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	0159      	lsls	r1, r3, #5
 8003416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800341a:	0150      	lsls	r0, r2, #5
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4641      	mov	r1, r8
 8003422:	ebb2 0a01 	subs.w	sl, r2, r1
 8003426:	4649      	mov	r1, r9
 8003428:	eb63 0b01 	sbc.w	fp, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800343c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003440:	ebb2 040a 	subs.w	r4, r2, sl
 8003444:	eb63 050b 	sbc.w	r5, r3, fp
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	00eb      	lsls	r3, r5, #3
 8003452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003456:	00e2      	lsls	r2, r4, #3
 8003458:	4614      	mov	r4, r2
 800345a:	461d      	mov	r5, r3
 800345c:	4643      	mov	r3, r8
 800345e:	18e3      	adds	r3, r4, r3
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	464b      	mov	r3, r9
 8003464:	eb45 0303 	adc.w	r3, r5, r3
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003476:	4629      	mov	r1, r5
 8003478:	028b      	lsls	r3, r1, #10
 800347a:	4621      	mov	r1, r4
 800347c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003480:	4621      	mov	r1, r4
 8003482:	028a      	lsls	r2, r1, #10
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800348c:	2200      	movs	r2, #0
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	61fa      	str	r2, [r7, #28]
 8003492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003496:	f7fd fba9 	bl	8000bec <__aeabi_uldivmod>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4613      	mov	r3, r2
 80034a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	0f1b      	lsrs	r3, r3, #28
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80034b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034c2:	e003      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80034c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3798      	adds	r7, #152	; 0x98
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	00f42400 	.word	0x00f42400
 80034e4:	017d7840 	.word	0x017d7840

080034e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e28d      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8083 	beq.w	800360e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003508:	4b94      	ldr	r3, [pc, #592]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b04      	cmp	r3, #4
 8003512:	d019      	beq.n	8003548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003514:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800351c:	2b08      	cmp	r3, #8
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003520:	4b8e      	ldr	r3, [pc, #568]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352c:	d00c      	beq.n	8003548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b8b      	ldr	r3, [pc, #556]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d112      	bne.n	8003560 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b84      	ldr	r3, [pc, #528]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05b      	beq.n	800360c <HAL_RCC_OscConfig+0x124>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d157      	bne.n	800360c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e25a      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x90>
 800356a:	4b7c      	ldr	r3, [pc, #496]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7b      	ldr	r2, [pc, #492]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0xcc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0xb4>
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a75      	ldr	r2, [pc, #468]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b73      	ldr	r3, [pc, #460]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a72      	ldr	r2, [pc, #456]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0xcc>
 800359c:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b6c      	ldr	r3, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6b      	ldr	r2, [pc, #428]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe fdcc 	bl	8002158 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe fdc8 	bl	8002158 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e21f      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0xdc>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe fdb8 	bl	8002158 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe fdb4 	bl	8002158 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e20b      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x104>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06f      	beq.n	80036fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800361a:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b00      	cmp	r3, #0
 8003624:	d017      	beq.n	8003656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003626:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800362e:	2b08      	cmp	r3, #8
 8003630:	d105      	bne.n	800363e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d11c      	bne.n	8003684 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b44      	ldr	r3, [pc, #272]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x186>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e1d3      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4937      	ldr	r1, [pc, #220]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	e03a      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fe fd61 	bl	8002158 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369a:	f7fe fd5d 	bl	8002158 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1b4      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4925      	ldr	r1, [pc, #148]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe fd40 	bl	8002158 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036dc:	f7fe fd3c 	bl	8002158 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e193      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d036      	beq.n	8003774 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fe fd20 	bl	8002158 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371c:	f7fe fd1c 	bl	8002158 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e173      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x234>
 800373a:	e01b      	b.n	8003774 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fe fd09 	bl	8002158 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	e00e      	b.n	8003768 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374a:	f7fe fd05 	bl	8002158 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d907      	bls.n	8003768 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e15c      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
 800375c:	40023800 	.word	0x40023800
 8003760:	42470000 	.word	0x42470000
 8003764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b8a      	ldr	r3, [pc, #552]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ea      	bne.n	800374a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8097 	beq.w	80038b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b83      	ldr	r3, [pc, #524]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b7f      	ldr	r3, [pc, #508]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a7e      	ldr	r2, [pc, #504]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b7c      	ldr	r3, [pc, #496]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b79      	ldr	r3, [pc, #484]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b76      	ldr	r3, [pc, #472]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a75      	ldr	r2, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fe fcc5 	bl	8002158 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fe fcc1 	bl	8002158 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e118      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x31e>
 80037f8:	4b66      	ldr	r3, [pc, #408]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a65      	ldr	r2, [pc, #404]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x358>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x340>
 800380e:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a60      	ldr	r2, [pc, #384]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b5e      	ldr	r3, [pc, #376]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x358>
 8003828:	4b5a      	ldr	r3, [pc, #360]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a59      	ldr	r2, [pc, #356]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
 8003834:	4b57      	ldr	r3, [pc, #348]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a56      	ldr	r2, [pc, #344]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fe fc86 	bl	8002158 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe fc82 	bl	8002158 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0d7      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0ee      	beq.n	8003850 <HAL_RCC_OscConfig+0x368>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe fc70 	bl	8002158 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fe fc6c 	bl	8002158 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0c1      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ee      	bne.n	800387c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80ad 	beq.w	8003a14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d060      	beq.n	8003988 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d145      	bne.n	800395a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fc40 	bl	8002158 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fc3c 	bl	8002158 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e093      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	3b01      	subs	r3, #1
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	071b      	lsls	r3, r3, #28
 8003926:	491b      	ldr	r1, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fe fc11 	bl	8002158 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fe fc0d 	bl	8002158 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e064      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x452>
 8003958:	e05c      	b.n	8003a14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe fbfa 	bl	8002158 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe fbf6 	bl	8002158 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e04d      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x480>
 8003986:	e045      	b.n	8003a14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e040      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
 800399c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <HAL_RCC_OscConfig+0x538>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d030      	beq.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d129      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d122      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d8:	4293      	cmp	r3, r2
 80039da:	d119      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d10f      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e042      	b.n	8003abc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe fa72 	bl	8001f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fe6b 	bl	8004744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d112      	bne.n	8003b04 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_Receive_DMA+0x26>
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e00b      	b.n	8003b06 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fbc2 	bl	8004284 <UART_Start_Receive_DMA>
 8003b00:	4603      	mov	r3, r0
 8003b02:	e000      	b.n	8003b06 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b0ba      	sub	sp, #232	; 0xe8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10f      	bne.n	8003b76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_UART_IRQHandler+0x66>
 8003b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fd29 	bl	80045c6 <UART_Receive_IT>
      return;
 8003b74:	e25b      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80de 	beq.w	8003d3c <HAL_UART_IRQHandler+0x22c>
 8003b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80d1 	beq.w	8003d3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_UART_IRQHandler+0xae>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <HAL_UART_IRQHandler+0xd2>
 8003bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f043 0202 	orr.w	r2, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_UART_IRQHandler+0xf6>
 8003bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f043 0204 	orr.w	r2, r3, #4
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d011      	beq.n	8003c36 <HAL_UART_IRQHandler+0x126>
 8003c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f043 0208 	orr.w	r2, r3, #8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 81f2 	beq.w	8004024 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_UART_IRQHandler+0x14e>
 8003c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fcb4 	bl	80045c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <HAL_UART_IRQHandler+0x17a>
 8003c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04f      	beq.n	8003d2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fbbc 	bl	8004408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d141      	bne.n	8003d22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3314      	adds	r3, #20
 8003cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1d9      	bne.n	8003c9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d013      	beq.n	8003d1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	4a7e      	ldr	r2, [pc, #504]	; (8003ef0 <HAL_UART_IRQHandler+0x3e0>)
 8003cf8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fcbe 	bl	8002680 <HAL_DMA_Abort_IT>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d14:	4610      	mov	r0, r2
 8003d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e00e      	b.n	8003d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f99e 	bl	800405c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	e00a      	b.n	8003d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f99a 	bl	800405c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	e006      	b.n	8003d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f996 	bl	800405c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003d36:	e175      	b.n	8004024 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	bf00      	nop
    return;
 8003d3a:	e173      	b.n	8004024 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f040 814f 	bne.w	8003fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8148 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8141 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	f040 80b6 	bne.w	8003ef4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8145 	beq.w	8004028 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003da6:	429a      	cmp	r2, r3
 8003da8:	f080 813e 	bcs.w	8004028 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003db2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dbe:	f000 8088 	beq.w	8003ed2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1d9      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3314      	adds	r3, #20
 8003e14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e1      	bne.n	8003e0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3314      	adds	r3, #20
 8003e50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e3      	bne.n	8003e4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea2:	f023 0310 	bic.w	r3, r3, #16
 8003ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003eb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003eb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e3      	bne.n	8003e90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe fb67 	bl	80025a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8c1 	bl	8004070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eee:	e09b      	b.n	8004028 <HAL_UART_IRQHandler+0x518>
 8003ef0:	080044cf 	.word	0x080044cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 808e 	beq.w	800402c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8089 	beq.w	800402c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f3e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e3      	bne.n	8003f1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3314      	adds	r3, #20
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	623b      	str	r3, [r7, #32]
   return(result);
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f76:	633a      	str	r2, [r7, #48]	; 0x30
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e3      	bne.n	8003f52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fbc:	61fa      	str	r2, [r7, #28]
 8003fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	69b9      	ldr	r1, [r7, #24]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e3      	bne.n	8003f98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f847 	bl	8004070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fe2:	e023      	b.n	800402c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_UART_IRQHandler+0x4f4>
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fa7a 	bl	80044f6 <UART_Transmit_IT>
    return;
 8004002:	e014      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00e      	beq.n	800402e <HAL_UART_IRQHandler+0x51e>
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 faba 	bl	8004596 <UART_EndTransmit_IT>
    return;
 8004022:	e004      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
    return;
 8004024:	bf00      	nop
 8004026:	e002      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
      return;
 8004028:	bf00      	nop
 800402a:	e000      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
      return;
 800402c:	bf00      	nop
  }
}
 800402e:	37e8      	adds	r7, #232	; 0xe8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b09c      	sub	sp, #112	; 0x70
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d172      	bne.n	800418a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a6:	2200      	movs	r2, #0
 80040a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80040cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	667b      	str	r3, [r7, #100]	; 0x64
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004100:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	623b      	str	r3, [r7, #32]
   return(result);
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004128:	663b      	str	r3, [r7, #96]	; 0x60
 800412a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3314      	adds	r3, #20
 8004130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004132:	633a      	str	r2, [r7, #48]	; 0x30
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e5      	bne.n	8004112 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	2b01      	cmp	r3, #1
 8004154:	d119      	bne.n	800418a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	60fb      	str	r3, [r7, #12]
   return(result);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f023 0310 	bic.w	r3, r3, #16
 800416c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800416e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004176:	61fa      	str	r2, [r7, #28]
 8004178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	69b9      	ldr	r1, [r7, #24]
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	617b      	str	r3, [r7, #20]
   return(result);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	2200      	movs	r2, #0
 800418e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800419c:	4619      	mov	r1, r3
 800419e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041a0:	f7ff ff66 	bl	8004070 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041a4:	e002      	b.n	80041ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80041a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041a8:	f7fd fc8a 	bl	8001ac0 <HAL_UART_RxCpltCallback>
}
 80041ac:	bf00      	nop
 80041ae:	3770      	adds	r7, #112	; 0x70
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d108      	bne.n	80041e2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4619      	mov	r1, r3
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff ff48 	bl	8004070 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041e0:	e002      	b.n	80041e8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff30 	bl	8004048 <HAL_UART_RxHalfCpltCallback>
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b21      	cmp	r3, #33	; 0x21
 8004222:	d108      	bne.n	8004236 <UART_DMAError+0x46>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004230:	68b8      	ldr	r0, [r7, #8]
 8004232:	f000 f8c1 	bl	80043b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b22      	cmp	r3, #34	; 0x22
 8004256:	d108      	bne.n	800426a <UART_DMAError+0x7a>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004264:	68b8      	ldr	r0, [r7, #8]
 8004266:	f000 f8cf 	bl	8004408 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f043 0210 	orr.w	r2, r3, #16
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f7ff fef0 	bl	800405c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b098      	sub	sp, #96	; 0x60
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2222      	movs	r2, #34	; 0x22
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	4a3e      	ldr	r2, [pc, #248]	; (80043ac <UART_Start_Receive_DMA+0x128>)
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	4a3d      	ldr	r2, [pc, #244]	; (80043b0 <UART_Start_Receive_DMA+0x12c>)
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	4a3c      	ldr	r2, [pc, #240]	; (80043b4 <UART_Start_Receive_DMA+0x130>)
 80042c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	2200      	movs	r2, #0
 80042ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80042cc:	f107 0308 	add.w	r3, r7, #8
 80042d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	f7fe f904 	bl	80024f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d019      	beq.n	800433a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	65bb      	str	r3, [r7, #88]	; 0x58
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	330c      	adds	r3, #12
 8004324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004326:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800432c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e5      	bne.n	8004306 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3314      	adds	r3, #20
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	657b      	str	r3, [r7, #84]	; 0x54
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800435a:	63ba      	str	r2, [r7, #56]	; 0x38
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e5      	bne.n	800433a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3314      	adds	r3, #20
 8004374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	617b      	str	r3, [r7, #20]
   return(result);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004384:	653b      	str	r3, [r7, #80]	; 0x50
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800438e:	627a      	str	r2, [r7, #36]	; 0x24
 8004390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6a39      	ldr	r1, [r7, #32]
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	61fb      	str	r3, [r7, #28]
   return(result);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e5      	bne.n	800436e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3760      	adds	r7, #96	; 0x60
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	08004089 	.word	0x08004089
 80043b0:	080041b5 	.word	0x080041b5
 80043b4:	080041f1 	.word	0x080041f1

080043b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b089      	sub	sp, #36	; 0x24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	61ba      	str	r2, [r7, #24]
 80043e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	613b      	str	r3, [r7, #16]
   return(result);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80043fc:	bf00      	nop
 80043fe:	3724      	adds	r7, #36	; 0x24
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b095      	sub	sp, #84	; 0x54
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004430:	643a      	str	r2, [r7, #64]	; 0x40
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3314      	adds	r3, #20
 800444a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	61fb      	str	r3, [r7, #28]
   return(result);
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	64bb      	str	r3, [r7, #72]	; 0x48
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3314      	adds	r3, #20
 8004462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004464:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e5      	bne.n	8004444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	2b01      	cmp	r3, #1
 800447e:	d119      	bne.n	80044b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f023 0310 	bic.w	r3, r3, #16
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044a0:	61ba      	str	r2, [r7, #24]
 80044a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6979      	ldr	r1, [r7, #20]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	613b      	str	r3, [r7, #16]
   return(result);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044c2:	bf00      	nop
 80044c4:	3754      	adds	r7, #84	; 0x54
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7ff fdb7 	bl	800405c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b21      	cmp	r3, #33	; 0x21
 8004508:	d13e      	bne.n	8004588 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004512:	d114      	bne.n	800453e <UART_Transmit_IT+0x48>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d110      	bne.n	800453e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004530:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	1c9a      	adds	r2, r3, #2
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	621a      	str	r2, [r3, #32]
 800453c:	e008      	b.n	8004550 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	1c59      	adds	r1, r3, #1
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6211      	str	r1, [r2, #32]
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29b      	uxth	r3, r3
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4619      	mov	r1, r3
 800455e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10f      	bne.n	8004584 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004572:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004582:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	e000      	b.n	800458a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004588:	2302      	movs	r3, #2
  }
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff fd3c 	bl	8004034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b08c      	sub	sp, #48	; 0x30
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b22      	cmp	r3, #34	; 0x22
 80045d8:	f040 80ae 	bne.w	8004738 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d117      	bne.n	8004616 <UART_Receive_IT+0x50>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d113      	bne.n	8004616 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004604:	b29a      	uxth	r2, r3
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	1c9a      	adds	r2, r3, #2
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	629a      	str	r2, [r3, #40]	; 0x28
 8004614:	e026      	b.n	8004664 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004628:	d007      	beq.n	800463a <UART_Receive_IT+0x74>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <UART_Receive_IT+0x82>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e008      	b.n	800465a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004654:	b2da      	uxtb	r2, r3
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29b      	uxth	r3, r3
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4619      	mov	r1, r3
 8004672:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004674:	2b00      	cmp	r3, #0
 8004676:	d15d      	bne.n	8004734 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0220 	bic.w	r2, r2, #32
 8004686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d135      	bne.n	800472a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	613b      	str	r3, [r7, #16]
   return(result);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	623a      	str	r2, [r7, #32]
 80046e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	69f9      	ldr	r1, [r7, #28]
 80046ea:	6a3a      	ldr	r2, [r7, #32]
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e5      	bne.n	80046c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b10      	cmp	r3, #16
 8004704:	d10a      	bne.n	800471c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fca4 	bl	8004070 <HAL_UARTEx_RxEventCallback>
 8004728:	e002      	b.n	8004730 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd f9c8 	bl	8001ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e002      	b.n	800473a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3730      	adds	r7, #48	; 0x30
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004748:	b0c0      	sub	sp, #256	; 0x100
 800474a:	af00      	add	r7, sp, #0
 800474c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	68d9      	ldr	r1, [r3, #12]
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	ea40 0301 	orr.w	r3, r0, r1
 800476c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	431a      	orrs	r2, r3
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	431a      	orrs	r2, r3
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800479c:	f021 010c 	bic.w	r1, r1, #12
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047aa:	430b      	orrs	r3, r1
 80047ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047be:	6999      	ldr	r1, [r3, #24]
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	ea40 0301 	orr.w	r3, r0, r1
 80047ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4b8f      	ldr	r3, [pc, #572]	; (8004a10 <UART_SetConfig+0x2cc>)
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d005      	beq.n	80047e4 <UART_SetConfig+0xa0>
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b8d      	ldr	r3, [pc, #564]	; (8004a14 <UART_SetConfig+0x2d0>)
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d104      	bne.n	80047ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e4:	f7fe fcc2 	bl	800316c <HAL_RCC_GetPCLK2Freq>
 80047e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047ec:	e003      	b.n	80047f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ee:	f7fe fca9 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 80047f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	f040 810c 	bne.w	8004a1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004808:	2200      	movs	r2, #0
 800480a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800480e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004812:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004816:	4622      	mov	r2, r4
 8004818:	462b      	mov	r3, r5
 800481a:	1891      	adds	r1, r2, r2
 800481c:	65b9      	str	r1, [r7, #88]	; 0x58
 800481e:	415b      	adcs	r3, r3
 8004820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004822:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004826:	4621      	mov	r1, r4
 8004828:	eb12 0801 	adds.w	r8, r2, r1
 800482c:	4629      	mov	r1, r5
 800482e:	eb43 0901 	adc.w	r9, r3, r1
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800483e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004846:	4690      	mov	r8, r2
 8004848:	4699      	mov	r9, r3
 800484a:	4623      	mov	r3, r4
 800484c:	eb18 0303 	adds.w	r3, r8, r3
 8004850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004854:	462b      	mov	r3, r5
 8004856:	eb49 0303 	adc.w	r3, r9, r3
 800485a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800486a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800486e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004872:	460b      	mov	r3, r1
 8004874:	18db      	adds	r3, r3, r3
 8004876:	653b      	str	r3, [r7, #80]	; 0x50
 8004878:	4613      	mov	r3, r2
 800487a:	eb42 0303 	adc.w	r3, r2, r3
 800487e:	657b      	str	r3, [r7, #84]	; 0x54
 8004880:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004888:	f7fc f9b0 	bl	8000bec <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <UART_SetConfig+0x2d4>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	011c      	lsls	r4, r3, #4
 800489a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80048b4:	415b      	adcs	r3, r3
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048bc:	4641      	mov	r1, r8
 80048be:	eb12 0a01 	adds.w	sl, r2, r1
 80048c2:	4649      	mov	r1, r9
 80048c4:	eb43 0b01 	adc.w	fp, r3, r1
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048dc:	4692      	mov	sl, r2
 80048de:	469b      	mov	fp, r3
 80048e0:	4643      	mov	r3, r8
 80048e2:	eb1a 0303 	adds.w	r3, sl, r3
 80048e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ea:	464b      	mov	r3, r9
 80048ec:	eb4b 0303 	adc.w	r3, fp, r3
 80048f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004900:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004904:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004908:	460b      	mov	r3, r1
 800490a:	18db      	adds	r3, r3, r3
 800490c:	643b      	str	r3, [r7, #64]	; 0x40
 800490e:	4613      	mov	r3, r2
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	647b      	str	r3, [r7, #68]	; 0x44
 8004916:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800491a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800491e:	f7fc f965 	bl	8000bec <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4611      	mov	r1, r2
 8004928:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <UART_SetConfig+0x2d4>)
 800492a:	fba3 2301 	umull	r2, r3, r3, r1
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2264      	movs	r2, #100	; 0x64
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	1acb      	subs	r3, r1, r3
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800493e:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <UART_SetConfig+0x2d4>)
 8004940:	fba3 2302 	umull	r2, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800494c:	441c      	add	r4, r3
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004958:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800495c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	63b9      	str	r1, [r7, #56]	; 0x38
 8004968:	415b      	adcs	r3, r3
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004970:	4641      	mov	r1, r8
 8004972:	1851      	adds	r1, r2, r1
 8004974:	6339      	str	r1, [r7, #48]	; 0x30
 8004976:	4649      	mov	r1, r9
 8004978:	414b      	adcs	r3, r1
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004988:	4659      	mov	r1, fp
 800498a:	00cb      	lsls	r3, r1, #3
 800498c:	4651      	mov	r1, sl
 800498e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004992:	4651      	mov	r1, sl
 8004994:	00ca      	lsls	r2, r1, #3
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	4603      	mov	r3, r0
 800499c:	4642      	mov	r2, r8
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049a4:	464b      	mov	r3, r9
 80049a6:	460a      	mov	r2, r1
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049c4:	460b      	mov	r3, r1
 80049c6:	18db      	adds	r3, r3, r3
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ca:	4613      	mov	r3, r2
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049da:	f7fc f907 	bl	8000bec <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <UART_SetConfig+0x2d4>)
 80049e4:	fba3 1302 	umull	r1, r3, r3, r2
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	2164      	movs	r1, #100	; 0x64
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	3332      	adds	r3, #50	; 0x32
 80049f6:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <UART_SetConfig+0x2d4>)
 80049f8:	fba2 2303 	umull	r2, r3, r2, r3
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	f003 0207 	and.w	r2, r3, #7
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4422      	add	r2, r4
 8004a0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a0c:	e106      	b.n	8004c1c <UART_SetConfig+0x4d8>
 8004a0e:	bf00      	nop
 8004a10:	40011000 	.word	0x40011000
 8004a14:	40011400 	.word	0x40011400
 8004a18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a2e:	4642      	mov	r2, r8
 8004a30:	464b      	mov	r3, r9
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	6239      	str	r1, [r7, #32]
 8004a36:	415b      	adcs	r3, r3
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a3e:	4641      	mov	r1, r8
 8004a40:	1854      	adds	r4, r2, r1
 8004a42:	4649      	mov	r1, r9
 8004a44:	eb43 0501 	adc.w	r5, r3, r1
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	00eb      	lsls	r3, r5, #3
 8004a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a56:	00e2      	lsls	r2, r4, #3
 8004a58:	4614      	mov	r4, r2
 8004a5a:	461d      	mov	r5, r3
 8004a5c:	4643      	mov	r3, r8
 8004a5e:	18e3      	adds	r3, r4, r3
 8004a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a64:	464b      	mov	r3, r9
 8004a66:	eb45 0303 	adc.w	r3, r5, r3
 8004a6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	008b      	lsls	r3, r1, #2
 8004a8e:	4621      	mov	r1, r4
 8004a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a94:	4621      	mov	r1, r4
 8004a96:	008a      	lsls	r2, r1, #2
 8004a98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a9c:	f7fc f8a6 	bl	8000bec <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4b60      	ldr	r3, [pc, #384]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	011c      	lsls	r4, r3, #4
 8004aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ab8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004abc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ac0:	4642      	mov	r2, r8
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	1891      	adds	r1, r2, r2
 8004ac6:	61b9      	str	r1, [r7, #24]
 8004ac8:	415b      	adcs	r3, r3
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	1851      	adds	r1, r2, r1
 8004ad4:	6139      	str	r1, [r7, #16]
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	414b      	adcs	r3, r1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae8:	4659      	mov	r1, fp
 8004aea:	00cb      	lsls	r3, r1, #3
 8004aec:	4651      	mov	r1, sl
 8004aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af2:	4651      	mov	r1, sl
 8004af4:	00ca      	lsls	r2, r1, #3
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	4642      	mov	r2, r8
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b04:	464b      	mov	r3, r9
 8004b06:	460a      	mov	r2, r1
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b28:	4649      	mov	r1, r9
 8004b2a:	008b      	lsls	r3, r1, #2
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b32:	4641      	mov	r1, r8
 8004b34:	008a      	lsls	r2, r1, #2
 8004b36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b3a:	f7fc f857 	bl	8000bec <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	4b38      	ldr	r3, [pc, #224]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004b46:	fba3 2301 	umull	r2, r3, r3, r1
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2264      	movs	r2, #100	; 0x64
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	1acb      	subs	r3, r1, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	; 0x32
 8004b58:	4a33      	ldr	r2, [pc, #204]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b64:	441c      	add	r4, r3
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b6e:	677a      	str	r2, [r7, #116]	; 0x74
 8004b70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	1891      	adds	r1, r2, r2
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	415b      	adcs	r3, r3
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b84:	4641      	mov	r1, r8
 8004b86:	1851      	adds	r1, r2, r1
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	414b      	adcs	r3, r1
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b9c:	4659      	mov	r1, fp
 8004b9e:	00cb      	lsls	r3, r1, #3
 8004ba0:	4651      	mov	r1, sl
 8004ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba6:	4651      	mov	r1, sl
 8004ba8:	00ca      	lsls	r2, r1, #3
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	189b      	adds	r3, r3, r2
 8004bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	460a      	mov	r2, r1
 8004bba:	eb42 0303 	adc.w	r3, r2, r3
 8004bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bca:	667a      	str	r2, [r7, #100]	; 0x64
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bd8:	4649      	mov	r1, r9
 8004bda:	008b      	lsls	r3, r1, #2
 8004bdc:	4641      	mov	r1, r8
 8004bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be2:	4641      	mov	r1, r8
 8004be4:	008a      	lsls	r2, r1, #2
 8004be6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bea:	f7fb ffff 	bl	8000bec <__aeabi_uldivmod>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	2164      	movs	r1, #100	; 0x64
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	3332      	adds	r3, #50	; 0x32
 8004c06:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	f003 020f 	and.w	r2, r3, #15
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4422      	add	r2, r4
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c22:	46bd      	mov	sp, r7
 8004c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c28:	51eb851f 	.word	0x51eb851f

08004c2c <sulp>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4604      	mov	r4, r0
 8004c30:	460d      	mov	r5, r1
 8004c32:	ec45 4b10 	vmov	d0, r4, r5
 8004c36:	4616      	mov	r6, r2
 8004c38:	f001 ff8c 	bl	8006b54 <__ulp>
 8004c3c:	ec51 0b10 	vmov	r0, r1, d0
 8004c40:	b17e      	cbz	r6, 8004c62 <sulp+0x36>
 8004c42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004c46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dd09      	ble.n	8004c62 <sulp+0x36>
 8004c4e:	051b      	lsls	r3, r3, #20
 8004c50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c54:	2400      	movs	r4, #0
 8004c56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	f7fb fce3 	bl	8000628 <__aeabi_dmul>
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	0000      	movs	r0, r0
	...

08004c68 <_strtod_l>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	ed2d 8b02 	vpush	{d8}
 8004c70:	b09b      	sub	sp, #108	; 0x6c
 8004c72:	4604      	mov	r4, r0
 8004c74:	9213      	str	r2, [sp, #76]	; 0x4c
 8004c76:	2200      	movs	r2, #0
 8004c78:	9216      	str	r2, [sp, #88]	; 0x58
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	f04f 0800 	mov.w	r8, #0
 8004c80:	f04f 0900 	mov.w	r9, #0
 8004c84:	460a      	mov	r2, r1
 8004c86:	9215      	str	r2, [sp, #84]	; 0x54
 8004c88:	7811      	ldrb	r1, [r2, #0]
 8004c8a:	292b      	cmp	r1, #43	; 0x2b
 8004c8c:	d04c      	beq.n	8004d28 <_strtod_l+0xc0>
 8004c8e:	d83a      	bhi.n	8004d06 <_strtod_l+0x9e>
 8004c90:	290d      	cmp	r1, #13
 8004c92:	d834      	bhi.n	8004cfe <_strtod_l+0x96>
 8004c94:	2908      	cmp	r1, #8
 8004c96:	d834      	bhi.n	8004d02 <_strtod_l+0x9a>
 8004c98:	2900      	cmp	r1, #0
 8004c9a:	d03d      	beq.n	8004d18 <_strtod_l+0xb0>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	920a      	str	r2, [sp, #40]	; 0x28
 8004ca0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004ca2:	7832      	ldrb	r2, [r6, #0]
 8004ca4:	2a30      	cmp	r2, #48	; 0x30
 8004ca6:	f040 80b4 	bne.w	8004e12 <_strtod_l+0x1aa>
 8004caa:	7872      	ldrb	r2, [r6, #1]
 8004cac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004cb0:	2a58      	cmp	r2, #88	; 0x58
 8004cb2:	d170      	bne.n	8004d96 <_strtod_l+0x12e>
 8004cb4:	9302      	str	r3, [sp, #8]
 8004cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	ab16      	add	r3, sp, #88	; 0x58
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4a8e      	ldr	r2, [pc, #568]	; (8004ef8 <_strtod_l+0x290>)
 8004cc0:	ab17      	add	r3, sp, #92	; 0x5c
 8004cc2:	a915      	add	r1, sp, #84	; 0x54
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f001 f82b 	bl	8005d20 <__gethex>
 8004cca:	f010 070f 	ands.w	r7, r0, #15
 8004cce:	4605      	mov	r5, r0
 8004cd0:	d005      	beq.n	8004cde <_strtod_l+0x76>
 8004cd2:	2f06      	cmp	r7, #6
 8004cd4:	d12a      	bne.n	8004d2c <_strtod_l+0xc4>
 8004cd6:	3601      	adds	r6, #1
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9615      	str	r6, [sp, #84]	; 0x54
 8004cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8004cde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f040 857f 	bne.w	80057e4 <_strtod_l+0xb7c>
 8004ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce8:	b1db      	cbz	r3, 8004d22 <_strtod_l+0xba>
 8004cea:	4642      	mov	r2, r8
 8004cec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cf0:	ec43 2b10 	vmov	d0, r2, r3
 8004cf4:	b01b      	add	sp, #108	; 0x6c
 8004cf6:	ecbd 8b02 	vpop	{d8}
 8004cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfe:	2920      	cmp	r1, #32
 8004d00:	d1cc      	bne.n	8004c9c <_strtod_l+0x34>
 8004d02:	3201      	adds	r2, #1
 8004d04:	e7bf      	b.n	8004c86 <_strtod_l+0x1e>
 8004d06:	292d      	cmp	r1, #45	; 0x2d
 8004d08:	d1c8      	bne.n	8004c9c <_strtod_l+0x34>
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	910a      	str	r1, [sp, #40]	; 0x28
 8004d0e:	1c51      	adds	r1, r2, #1
 8004d10:	9115      	str	r1, [sp, #84]	; 0x54
 8004d12:	7852      	ldrb	r2, [r2, #1]
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	d1c3      	bne.n	8004ca0 <_strtod_l+0x38>
 8004d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d1a:	9515      	str	r5, [sp, #84]	; 0x54
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f040 855f 	bne.w	80057e0 <_strtod_l+0xb78>
 8004d22:	4642      	mov	r2, r8
 8004d24:	464b      	mov	r3, r9
 8004d26:	e7e3      	b.n	8004cf0 <_strtod_l+0x88>
 8004d28:	2100      	movs	r1, #0
 8004d2a:	e7ef      	b.n	8004d0c <_strtod_l+0xa4>
 8004d2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d2e:	b13a      	cbz	r2, 8004d40 <_strtod_l+0xd8>
 8004d30:	2135      	movs	r1, #53	; 0x35
 8004d32:	a818      	add	r0, sp, #96	; 0x60
 8004d34:	f002 f80b 	bl	8006d4e <__copybits>
 8004d38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f001 fbde 	bl	80064fc <_Bfree>
 8004d40:	3f01      	subs	r7, #1
 8004d42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004d44:	2f04      	cmp	r7, #4
 8004d46:	d806      	bhi.n	8004d56 <_strtod_l+0xee>
 8004d48:	e8df f007 	tbb	[pc, r7]
 8004d4c:	201d0314 	.word	0x201d0314
 8004d50:	14          	.byte	0x14
 8004d51:	00          	.byte	0x00
 8004d52:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8004d56:	05e9      	lsls	r1, r5, #23
 8004d58:	bf48      	it	mi
 8004d5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004d5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d62:	0d1b      	lsrs	r3, r3, #20
 8004d64:	051b      	lsls	r3, r3, #20
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1b9      	bne.n	8004cde <_strtod_l+0x76>
 8004d6a:	f000 fedf 	bl	8005b2c <__errno>
 8004d6e:	2322      	movs	r3, #34	; 0x22
 8004d70:	6003      	str	r3, [r0, #0]
 8004d72:	e7b4      	b.n	8004cde <_strtod_l+0x76>
 8004d74:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8004d78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004d84:	e7e7      	b.n	8004d56 <_strtod_l+0xee>
 8004d86:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004f00 <_strtod_l+0x298>
 8004d8a:	e7e4      	b.n	8004d56 <_strtod_l+0xee>
 8004d8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004d90:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004d94:	e7df      	b.n	8004d56 <_strtod_l+0xee>
 8004d96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	9215      	str	r2, [sp, #84]	; 0x54
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b30      	cmp	r3, #48	; 0x30
 8004da0:	d0f9      	beq.n	8004d96 <_strtod_l+0x12e>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d09b      	beq.n	8004cde <_strtod_l+0x76>
 8004da6:	2301      	movs	r3, #1
 8004da8:	f04f 0a00 	mov.w	sl, #0
 8004dac:	9304      	str	r3, [sp, #16]
 8004dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004db6:	46d3      	mov	fp, sl
 8004db8:	220a      	movs	r2, #10
 8004dba:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004dbc:	7806      	ldrb	r6, [r0, #0]
 8004dbe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004dc2:	b2d9      	uxtb	r1, r3
 8004dc4:	2909      	cmp	r1, #9
 8004dc6:	d926      	bls.n	8004e16 <_strtod_l+0x1ae>
 8004dc8:	494c      	ldr	r1, [pc, #304]	; (8004efc <_strtod_l+0x294>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f000 fe55 	bl	8005a7a <strncmp>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d030      	beq.n	8004e36 <_strtod_l+0x1ce>
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	9005      	str	r0, [sp, #20]
 8004dda:	465e      	mov	r6, fp
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2a65      	cmp	r2, #101	; 0x65
 8004de0:	d001      	beq.n	8004de6 <_strtod_l+0x17e>
 8004de2:	2a45      	cmp	r2, #69	; 0x45
 8004de4:	d113      	bne.n	8004e0e <_strtod_l+0x1a6>
 8004de6:	b91e      	cbnz	r6, 8004df0 <_strtod_l+0x188>
 8004de8:	9a04      	ldr	r2, [sp, #16]
 8004dea:	4302      	orrs	r2, r0
 8004dec:	d094      	beq.n	8004d18 <_strtod_l+0xb0>
 8004dee:	2600      	movs	r6, #0
 8004df0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004df2:	1c6a      	adds	r2, r5, #1
 8004df4:	9215      	str	r2, [sp, #84]	; 0x54
 8004df6:	786a      	ldrb	r2, [r5, #1]
 8004df8:	2a2b      	cmp	r2, #43	; 0x2b
 8004dfa:	d074      	beq.n	8004ee6 <_strtod_l+0x27e>
 8004dfc:	2a2d      	cmp	r2, #45	; 0x2d
 8004dfe:	d078      	beq.n	8004ef2 <_strtod_l+0x28a>
 8004e00:	f04f 0c00 	mov.w	ip, #0
 8004e04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e08:	2909      	cmp	r1, #9
 8004e0a:	d97f      	bls.n	8004f0c <_strtod_l+0x2a4>
 8004e0c:	9515      	str	r5, [sp, #84]	; 0x54
 8004e0e:	2700      	movs	r7, #0
 8004e10:	e09e      	b.n	8004f50 <_strtod_l+0x2e8>
 8004e12:	2300      	movs	r3, #0
 8004e14:	e7c8      	b.n	8004da8 <_strtod_l+0x140>
 8004e16:	f1bb 0f08 	cmp.w	fp, #8
 8004e1a:	bfd8      	it	le
 8004e1c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004e1e:	f100 0001 	add.w	r0, r0, #1
 8004e22:	bfda      	itte	le
 8004e24:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e28:	9309      	strle	r3, [sp, #36]	; 0x24
 8004e2a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004e2e:	f10b 0b01 	add.w	fp, fp, #1
 8004e32:	9015      	str	r0, [sp, #84]	; 0x54
 8004e34:	e7c1      	b.n	8004dba <_strtod_l+0x152>
 8004e36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	9215      	str	r2, [sp, #84]	; 0x54
 8004e3c:	785a      	ldrb	r2, [r3, #1]
 8004e3e:	f1bb 0f00 	cmp.w	fp, #0
 8004e42:	d037      	beq.n	8004eb4 <_strtod_l+0x24c>
 8004e44:	9005      	str	r0, [sp, #20]
 8004e46:	465e      	mov	r6, fp
 8004e48:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004e4c:	2b09      	cmp	r3, #9
 8004e4e:	d912      	bls.n	8004e76 <_strtod_l+0x20e>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e7c4      	b.n	8004dde <_strtod_l+0x176>
 8004e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	9215      	str	r2, [sp, #84]	; 0x54
 8004e5a:	785a      	ldrb	r2, [r3, #1]
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	2a30      	cmp	r2, #48	; 0x30
 8004e60:	d0f8      	beq.n	8004e54 <_strtod_l+0x1ec>
 8004e62:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	f200 84c1 	bhi.w	80057ee <_strtod_l+0xb86>
 8004e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e6e:	9005      	str	r0, [sp, #20]
 8004e70:	2000      	movs	r0, #0
 8004e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e74:	4606      	mov	r6, r0
 8004e76:	3a30      	subs	r2, #48	; 0x30
 8004e78:	f100 0301 	add.w	r3, r0, #1
 8004e7c:	d014      	beq.n	8004ea8 <_strtod_l+0x240>
 8004e7e:	9905      	ldr	r1, [sp, #20]
 8004e80:	4419      	add	r1, r3
 8004e82:	9105      	str	r1, [sp, #20]
 8004e84:	4633      	mov	r3, r6
 8004e86:	eb00 0c06 	add.w	ip, r0, r6
 8004e8a:	210a      	movs	r1, #10
 8004e8c:	4563      	cmp	r3, ip
 8004e8e:	d113      	bne.n	8004eb8 <_strtod_l+0x250>
 8004e90:	1833      	adds	r3, r6, r0
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	f106 0601 	add.w	r6, r6, #1
 8004e98:	4406      	add	r6, r0
 8004e9a:	dc1a      	bgt.n	8004ed2 <_strtod_l+0x26a>
 8004e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e9e:	230a      	movs	r3, #10
 8004ea0:	fb03 2301 	mla	r3, r3, r1, r2
 8004ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004eaa:	1c51      	adds	r1, r2, #1
 8004eac:	9115      	str	r1, [sp, #84]	; 0x54
 8004eae:	7852      	ldrb	r2, [r2, #1]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	e7c9      	b.n	8004e48 <_strtod_l+0x1e0>
 8004eb4:	4658      	mov	r0, fp
 8004eb6:	e7d2      	b.n	8004e5e <_strtod_l+0x1f6>
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	f103 0301 	add.w	r3, r3, #1
 8004ebe:	dc03      	bgt.n	8004ec8 <_strtod_l+0x260>
 8004ec0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004ec2:	434f      	muls	r7, r1
 8004ec4:	9709      	str	r7, [sp, #36]	; 0x24
 8004ec6:	e7e1      	b.n	8004e8c <_strtod_l+0x224>
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	bfd8      	it	le
 8004ecc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004ed0:	e7dc      	b.n	8004e8c <_strtod_l+0x224>
 8004ed2:	2e10      	cmp	r6, #16
 8004ed4:	bfdc      	itt	le
 8004ed6:	230a      	movle	r3, #10
 8004ed8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004edc:	e7e3      	b.n	8004ea6 <_strtod_l+0x23e>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9305      	str	r3, [sp, #20]
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e780      	b.n	8004de8 <_strtod_l+0x180>
 8004ee6:	f04f 0c00 	mov.w	ip, #0
 8004eea:	1caa      	adds	r2, r5, #2
 8004eec:	9215      	str	r2, [sp, #84]	; 0x54
 8004eee:	78aa      	ldrb	r2, [r5, #2]
 8004ef0:	e788      	b.n	8004e04 <_strtod_l+0x19c>
 8004ef2:	f04f 0c01 	mov.w	ip, #1
 8004ef6:	e7f8      	b.n	8004eea <_strtod_l+0x282>
 8004ef8:	08007900 	.word	0x08007900
 8004efc:	080078f0 	.word	0x080078f0
 8004f00:	7ff00000 	.word	0x7ff00000
 8004f04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f06:	1c51      	adds	r1, r2, #1
 8004f08:	9115      	str	r1, [sp, #84]	; 0x54
 8004f0a:	7852      	ldrb	r2, [r2, #1]
 8004f0c:	2a30      	cmp	r2, #48	; 0x30
 8004f0e:	d0f9      	beq.n	8004f04 <_strtod_l+0x29c>
 8004f10:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004f14:	2908      	cmp	r1, #8
 8004f16:	f63f af7a 	bhi.w	8004e0e <_strtod_l+0x1a6>
 8004f1a:	3a30      	subs	r2, #48	; 0x30
 8004f1c:	9208      	str	r2, [sp, #32]
 8004f1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f20:	920c      	str	r2, [sp, #48]	; 0x30
 8004f22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f24:	1c57      	adds	r7, r2, #1
 8004f26:	9715      	str	r7, [sp, #84]	; 0x54
 8004f28:	7852      	ldrb	r2, [r2, #1]
 8004f2a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004f2e:	f1be 0f09 	cmp.w	lr, #9
 8004f32:	d938      	bls.n	8004fa6 <_strtod_l+0x33e>
 8004f34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f36:	1a7f      	subs	r7, r7, r1
 8004f38:	2f08      	cmp	r7, #8
 8004f3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004f3e:	dc03      	bgt.n	8004f48 <_strtod_l+0x2e0>
 8004f40:	9908      	ldr	r1, [sp, #32]
 8004f42:	428f      	cmp	r7, r1
 8004f44:	bfa8      	it	ge
 8004f46:	460f      	movge	r7, r1
 8004f48:	f1bc 0f00 	cmp.w	ip, #0
 8004f4c:	d000      	beq.n	8004f50 <_strtod_l+0x2e8>
 8004f4e:	427f      	negs	r7, r7
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	d14f      	bne.n	8004ff4 <_strtod_l+0x38c>
 8004f54:	9904      	ldr	r1, [sp, #16]
 8004f56:	4301      	orrs	r1, r0
 8004f58:	f47f aec1 	bne.w	8004cde <_strtod_l+0x76>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f47f aedb 	bne.w	8004d18 <_strtod_l+0xb0>
 8004f62:	2a69      	cmp	r2, #105	; 0x69
 8004f64:	d029      	beq.n	8004fba <_strtod_l+0x352>
 8004f66:	dc26      	bgt.n	8004fb6 <_strtod_l+0x34e>
 8004f68:	2a49      	cmp	r2, #73	; 0x49
 8004f6a:	d026      	beq.n	8004fba <_strtod_l+0x352>
 8004f6c:	2a4e      	cmp	r2, #78	; 0x4e
 8004f6e:	f47f aed3 	bne.w	8004d18 <_strtod_l+0xb0>
 8004f72:	499b      	ldr	r1, [pc, #620]	; (80051e0 <_strtod_l+0x578>)
 8004f74:	a815      	add	r0, sp, #84	; 0x54
 8004f76:	f001 f913 	bl	80061a0 <__match>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	f43f aecc 	beq.w	8004d18 <_strtod_l+0xb0>
 8004f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b28      	cmp	r3, #40	; 0x28
 8004f86:	d12f      	bne.n	8004fe8 <_strtod_l+0x380>
 8004f88:	4996      	ldr	r1, [pc, #600]	; (80051e4 <_strtod_l+0x57c>)
 8004f8a:	aa18      	add	r2, sp, #96	; 0x60
 8004f8c:	a815      	add	r0, sp, #84	; 0x54
 8004f8e:	f001 f91b 	bl	80061c8 <__hexnan>
 8004f92:	2805      	cmp	r0, #5
 8004f94:	d128      	bne.n	8004fe8 <_strtod_l+0x380>
 8004f96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004fa0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004fa4:	e69b      	b.n	8004cde <_strtod_l+0x76>
 8004fa6:	9f08      	ldr	r7, [sp, #32]
 8004fa8:	210a      	movs	r1, #10
 8004faa:	fb01 2107 	mla	r1, r1, r7, r2
 8004fae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004fb2:	9208      	str	r2, [sp, #32]
 8004fb4:	e7b5      	b.n	8004f22 <_strtod_l+0x2ba>
 8004fb6:	2a6e      	cmp	r2, #110	; 0x6e
 8004fb8:	e7d9      	b.n	8004f6e <_strtod_l+0x306>
 8004fba:	498b      	ldr	r1, [pc, #556]	; (80051e8 <_strtod_l+0x580>)
 8004fbc:	a815      	add	r0, sp, #84	; 0x54
 8004fbe:	f001 f8ef 	bl	80061a0 <__match>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	f43f aea8 	beq.w	8004d18 <_strtod_l+0xb0>
 8004fc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fca:	4988      	ldr	r1, [pc, #544]	; (80051ec <_strtod_l+0x584>)
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	a815      	add	r0, sp, #84	; 0x54
 8004fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8004fd2:	f001 f8e5 	bl	80061a0 <__match>
 8004fd6:	b910      	cbnz	r0, 8004fde <_strtod_l+0x376>
 8004fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fda:	3301      	adds	r3, #1
 8004fdc:	9315      	str	r3, [sp, #84]	; 0x54
 8004fde:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80051fc <_strtod_l+0x594>
 8004fe2:	f04f 0800 	mov.w	r8, #0
 8004fe6:	e67a      	b.n	8004cde <_strtod_l+0x76>
 8004fe8:	4881      	ldr	r0, [pc, #516]	; (80051f0 <_strtod_l+0x588>)
 8004fea:	f000 fddd 	bl	8005ba8 <nan>
 8004fee:	ec59 8b10 	vmov	r8, r9, d0
 8004ff2:	e674      	b.n	8004cde <_strtod_l+0x76>
 8004ff4:	9b05      	ldr	r3, [sp, #20]
 8004ff6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ff8:	1afb      	subs	r3, r7, r3
 8004ffa:	f1bb 0f00 	cmp.w	fp, #0
 8004ffe:	bf08      	it	eq
 8005000:	46b3      	moveq	fp, r6
 8005002:	2e10      	cmp	r6, #16
 8005004:	9308      	str	r3, [sp, #32]
 8005006:	4635      	mov	r5, r6
 8005008:	bfa8      	it	ge
 800500a:	2510      	movge	r5, #16
 800500c:	f7fb fa92 	bl	8000534 <__aeabi_ui2d>
 8005010:	2e09      	cmp	r6, #9
 8005012:	4680      	mov	r8, r0
 8005014:	4689      	mov	r9, r1
 8005016:	dd13      	ble.n	8005040 <_strtod_l+0x3d8>
 8005018:	4b76      	ldr	r3, [pc, #472]	; (80051f4 <_strtod_l+0x58c>)
 800501a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800501e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005022:	f7fb fb01 	bl	8000628 <__aeabi_dmul>
 8005026:	4680      	mov	r8, r0
 8005028:	4650      	mov	r0, sl
 800502a:	4689      	mov	r9, r1
 800502c:	f7fb fa82 	bl	8000534 <__aeabi_ui2d>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4640      	mov	r0, r8
 8005036:	4649      	mov	r1, r9
 8005038:	f7fb f940 	bl	80002bc <__adddf3>
 800503c:	4680      	mov	r8, r0
 800503e:	4689      	mov	r9, r1
 8005040:	2e0f      	cmp	r6, #15
 8005042:	dc38      	bgt.n	80050b6 <_strtod_l+0x44e>
 8005044:	9b08      	ldr	r3, [sp, #32]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f43f ae49 	beq.w	8004cde <_strtod_l+0x76>
 800504c:	dd24      	ble.n	8005098 <_strtod_l+0x430>
 800504e:	2b16      	cmp	r3, #22
 8005050:	dc0b      	bgt.n	800506a <_strtod_l+0x402>
 8005052:	4968      	ldr	r1, [pc, #416]	; (80051f4 <_strtod_l+0x58c>)
 8005054:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	f7fb fae2 	bl	8000628 <__aeabi_dmul>
 8005064:	4680      	mov	r8, r0
 8005066:	4689      	mov	r9, r1
 8005068:	e639      	b.n	8004cde <_strtod_l+0x76>
 800506a:	9a08      	ldr	r2, [sp, #32]
 800506c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005070:	4293      	cmp	r3, r2
 8005072:	db20      	blt.n	80050b6 <_strtod_l+0x44e>
 8005074:	4c5f      	ldr	r4, [pc, #380]	; (80051f4 <_strtod_l+0x58c>)
 8005076:	f1c6 060f 	rsb	r6, r6, #15
 800507a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800507e:	4642      	mov	r2, r8
 8005080:	464b      	mov	r3, r9
 8005082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005086:	f7fb facf 	bl	8000628 <__aeabi_dmul>
 800508a:	9b08      	ldr	r3, [sp, #32]
 800508c:	1b9e      	subs	r6, r3, r6
 800508e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005092:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005096:	e7e3      	b.n	8005060 <_strtod_l+0x3f8>
 8005098:	9b08      	ldr	r3, [sp, #32]
 800509a:	3316      	adds	r3, #22
 800509c:	db0b      	blt.n	80050b6 <_strtod_l+0x44e>
 800509e:	9b05      	ldr	r3, [sp, #20]
 80050a0:	1bdf      	subs	r7, r3, r7
 80050a2:	4b54      	ldr	r3, [pc, #336]	; (80051f4 <_strtod_l+0x58c>)
 80050a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80050a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ac:	4640      	mov	r0, r8
 80050ae:	4649      	mov	r1, r9
 80050b0:	f7fb fbe4 	bl	800087c <__aeabi_ddiv>
 80050b4:	e7d6      	b.n	8005064 <_strtod_l+0x3fc>
 80050b6:	9b08      	ldr	r3, [sp, #32]
 80050b8:	1b75      	subs	r5, r6, r5
 80050ba:	441d      	add	r5, r3
 80050bc:	2d00      	cmp	r5, #0
 80050be:	dd70      	ble.n	80051a2 <_strtod_l+0x53a>
 80050c0:	f015 030f 	ands.w	r3, r5, #15
 80050c4:	d00a      	beq.n	80050dc <_strtod_l+0x474>
 80050c6:	494b      	ldr	r1, [pc, #300]	; (80051f4 <_strtod_l+0x58c>)
 80050c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050d4:	f7fb faa8 	bl	8000628 <__aeabi_dmul>
 80050d8:	4680      	mov	r8, r0
 80050da:	4689      	mov	r9, r1
 80050dc:	f035 050f 	bics.w	r5, r5, #15
 80050e0:	d04d      	beq.n	800517e <_strtod_l+0x516>
 80050e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80050e6:	dd22      	ble.n	800512e <_strtod_l+0x4c6>
 80050e8:	2500      	movs	r5, #0
 80050ea:	46ab      	mov	fp, r5
 80050ec:	9509      	str	r5, [sp, #36]	; 0x24
 80050ee:	9505      	str	r5, [sp, #20]
 80050f0:	2322      	movs	r3, #34	; 0x22
 80050f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80051fc <_strtod_l+0x594>
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	f04f 0800 	mov.w	r8, #0
 80050fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f43f aded 	beq.w	8004cde <_strtod_l+0x76>
 8005104:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005106:	4620      	mov	r0, r4
 8005108:	f001 f9f8 	bl	80064fc <_Bfree>
 800510c:	9905      	ldr	r1, [sp, #20]
 800510e:	4620      	mov	r0, r4
 8005110:	f001 f9f4 	bl	80064fc <_Bfree>
 8005114:	4659      	mov	r1, fp
 8005116:	4620      	mov	r0, r4
 8005118:	f001 f9f0 	bl	80064fc <_Bfree>
 800511c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800511e:	4620      	mov	r0, r4
 8005120:	f001 f9ec 	bl	80064fc <_Bfree>
 8005124:	4629      	mov	r1, r5
 8005126:	4620      	mov	r0, r4
 8005128:	f001 f9e8 	bl	80064fc <_Bfree>
 800512c:	e5d7      	b.n	8004cde <_strtod_l+0x76>
 800512e:	4b32      	ldr	r3, [pc, #200]	; (80051f8 <_strtod_l+0x590>)
 8005130:	9304      	str	r3, [sp, #16]
 8005132:	2300      	movs	r3, #0
 8005134:	112d      	asrs	r5, r5, #4
 8005136:	4640      	mov	r0, r8
 8005138:	4649      	mov	r1, r9
 800513a:	469a      	mov	sl, r3
 800513c:	2d01      	cmp	r5, #1
 800513e:	dc21      	bgt.n	8005184 <_strtod_l+0x51c>
 8005140:	b10b      	cbz	r3, 8005146 <_strtod_l+0x4de>
 8005142:	4680      	mov	r8, r0
 8005144:	4689      	mov	r9, r1
 8005146:	492c      	ldr	r1, [pc, #176]	; (80051f8 <_strtod_l+0x590>)
 8005148:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800514c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005158:	f7fb fa66 	bl	8000628 <__aeabi_dmul>
 800515c:	4b27      	ldr	r3, [pc, #156]	; (80051fc <_strtod_l+0x594>)
 800515e:	460a      	mov	r2, r1
 8005160:	400b      	ands	r3, r1
 8005162:	4927      	ldr	r1, [pc, #156]	; (8005200 <_strtod_l+0x598>)
 8005164:	428b      	cmp	r3, r1
 8005166:	4680      	mov	r8, r0
 8005168:	d8be      	bhi.n	80050e8 <_strtod_l+0x480>
 800516a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800516e:	428b      	cmp	r3, r1
 8005170:	bf86      	itte	hi
 8005172:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8005204 <_strtod_l+0x59c>
 8005176:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800517a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800517e:	2300      	movs	r3, #0
 8005180:	9304      	str	r3, [sp, #16]
 8005182:	e07b      	b.n	800527c <_strtod_l+0x614>
 8005184:	07ea      	lsls	r2, r5, #31
 8005186:	d505      	bpl.n	8005194 <_strtod_l+0x52c>
 8005188:	9b04      	ldr	r3, [sp, #16]
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb fa4b 	bl	8000628 <__aeabi_dmul>
 8005192:	2301      	movs	r3, #1
 8005194:	9a04      	ldr	r2, [sp, #16]
 8005196:	3208      	adds	r2, #8
 8005198:	f10a 0a01 	add.w	sl, sl, #1
 800519c:	106d      	asrs	r5, r5, #1
 800519e:	9204      	str	r2, [sp, #16]
 80051a0:	e7cc      	b.n	800513c <_strtod_l+0x4d4>
 80051a2:	d0ec      	beq.n	800517e <_strtod_l+0x516>
 80051a4:	426d      	negs	r5, r5
 80051a6:	f015 020f 	ands.w	r2, r5, #15
 80051aa:	d00a      	beq.n	80051c2 <_strtod_l+0x55a>
 80051ac:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <_strtod_l+0x58c>)
 80051ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f7fb fb5f 	bl	800087c <__aeabi_ddiv>
 80051be:	4680      	mov	r8, r0
 80051c0:	4689      	mov	r9, r1
 80051c2:	112d      	asrs	r5, r5, #4
 80051c4:	d0db      	beq.n	800517e <_strtod_l+0x516>
 80051c6:	2d1f      	cmp	r5, #31
 80051c8:	dd1e      	ble.n	8005208 <_strtod_l+0x5a0>
 80051ca:	2500      	movs	r5, #0
 80051cc:	46ab      	mov	fp, r5
 80051ce:	9509      	str	r5, [sp, #36]	; 0x24
 80051d0:	9505      	str	r5, [sp, #20]
 80051d2:	2322      	movs	r3, #34	; 0x22
 80051d4:	f04f 0800 	mov.w	r8, #0
 80051d8:	f04f 0900 	mov.w	r9, #0
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	e78d      	b.n	80050fc <_strtod_l+0x494>
 80051e0:	080078fb 	.word	0x080078fb
 80051e4:	08007914 	.word	0x08007914
 80051e8:	080078f2 	.word	0x080078f2
 80051ec:	080078f5 	.word	0x080078f5
 80051f0:	08007c78 	.word	0x08007c78
 80051f4:	08007a68 	.word	0x08007a68
 80051f8:	08007a40 	.word	0x08007a40
 80051fc:	7ff00000 	.word	0x7ff00000
 8005200:	7ca00000 	.word	0x7ca00000
 8005204:	7fefffff 	.word	0x7fefffff
 8005208:	f015 0310 	ands.w	r3, r5, #16
 800520c:	bf18      	it	ne
 800520e:	236a      	movne	r3, #106	; 0x6a
 8005210:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80055b4 <_strtod_l+0x94c>
 8005214:	9304      	str	r3, [sp, #16]
 8005216:	4640      	mov	r0, r8
 8005218:	4649      	mov	r1, r9
 800521a:	2300      	movs	r3, #0
 800521c:	07ea      	lsls	r2, r5, #31
 800521e:	d504      	bpl.n	800522a <_strtod_l+0x5c2>
 8005220:	e9da 2300 	ldrd	r2, r3, [sl]
 8005224:	f7fb fa00 	bl	8000628 <__aeabi_dmul>
 8005228:	2301      	movs	r3, #1
 800522a:	106d      	asrs	r5, r5, #1
 800522c:	f10a 0a08 	add.w	sl, sl, #8
 8005230:	d1f4      	bne.n	800521c <_strtod_l+0x5b4>
 8005232:	b10b      	cbz	r3, 8005238 <_strtod_l+0x5d0>
 8005234:	4680      	mov	r8, r0
 8005236:	4689      	mov	r9, r1
 8005238:	9b04      	ldr	r3, [sp, #16]
 800523a:	b1bb      	cbz	r3, 800526c <_strtod_l+0x604>
 800523c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005240:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005244:	2b00      	cmp	r3, #0
 8005246:	4649      	mov	r1, r9
 8005248:	dd10      	ble.n	800526c <_strtod_l+0x604>
 800524a:	2b1f      	cmp	r3, #31
 800524c:	f340 811e 	ble.w	800548c <_strtod_l+0x824>
 8005250:	2b34      	cmp	r3, #52	; 0x34
 8005252:	bfde      	ittt	le
 8005254:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005258:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800525c:	4093      	lslle	r3, r2
 800525e:	f04f 0800 	mov.w	r8, #0
 8005262:	bfcc      	ite	gt
 8005264:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005268:	ea03 0901 	andle.w	r9, r3, r1
 800526c:	2200      	movs	r2, #0
 800526e:	2300      	movs	r3, #0
 8005270:	4640      	mov	r0, r8
 8005272:	4649      	mov	r1, r9
 8005274:	f7fb fc40 	bl	8000af8 <__aeabi_dcmpeq>
 8005278:	2800      	cmp	r0, #0
 800527a:	d1a6      	bne.n	80051ca <_strtod_l+0x562>
 800527c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005282:	4633      	mov	r3, r6
 8005284:	465a      	mov	r2, fp
 8005286:	4620      	mov	r0, r4
 8005288:	f001 f9a0 	bl	80065cc <__s2b>
 800528c:	9009      	str	r0, [sp, #36]	; 0x24
 800528e:	2800      	cmp	r0, #0
 8005290:	f43f af2a 	beq.w	80050e8 <_strtod_l+0x480>
 8005294:	9a08      	ldr	r2, [sp, #32]
 8005296:	9b05      	ldr	r3, [sp, #20]
 8005298:	2a00      	cmp	r2, #0
 800529a:	eba3 0307 	sub.w	r3, r3, r7
 800529e:	bfa8      	it	ge
 80052a0:	2300      	movge	r3, #0
 80052a2:	930c      	str	r3, [sp, #48]	; 0x30
 80052a4:	2500      	movs	r5, #0
 80052a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80052aa:	9312      	str	r3, [sp, #72]	; 0x48
 80052ac:	46ab      	mov	fp, r5
 80052ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b0:	4620      	mov	r0, r4
 80052b2:	6859      	ldr	r1, [r3, #4]
 80052b4:	f001 f8e2 	bl	800647c <_Balloc>
 80052b8:	9005      	str	r0, [sp, #20]
 80052ba:	2800      	cmp	r0, #0
 80052bc:	f43f af18 	beq.w	80050f0 <_strtod_l+0x488>
 80052c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	3202      	adds	r2, #2
 80052c6:	f103 010c 	add.w	r1, r3, #12
 80052ca:	0092      	lsls	r2, r2, #2
 80052cc:	300c      	adds	r0, #12
 80052ce:	f000 fc5a 	bl	8005b86 <memcpy>
 80052d2:	ec49 8b10 	vmov	d0, r8, r9
 80052d6:	aa18      	add	r2, sp, #96	; 0x60
 80052d8:	a917      	add	r1, sp, #92	; 0x5c
 80052da:	4620      	mov	r0, r4
 80052dc:	f001 fcaa 	bl	8006c34 <__d2b>
 80052e0:	ec49 8b18 	vmov	d8, r8, r9
 80052e4:	9016      	str	r0, [sp, #88]	; 0x58
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f43f af02 	beq.w	80050f0 <_strtod_l+0x488>
 80052ec:	2101      	movs	r1, #1
 80052ee:	4620      	mov	r0, r4
 80052f0:	f001 fa04 	bl	80066fc <__i2b>
 80052f4:	4683      	mov	fp, r0
 80052f6:	2800      	cmp	r0, #0
 80052f8:	f43f aefa 	beq.w	80050f0 <_strtod_l+0x488>
 80052fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80052fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005300:	2e00      	cmp	r6, #0
 8005302:	bfab      	itete	ge
 8005304:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8005306:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8005308:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800530a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800530e:	bfac      	ite	ge
 8005310:	eb06 0a03 	addge.w	sl, r6, r3
 8005314:	1b9f      	sublt	r7, r3, r6
 8005316:	9b04      	ldr	r3, [sp, #16]
 8005318:	1af6      	subs	r6, r6, r3
 800531a:	4416      	add	r6, r2
 800531c:	4ba0      	ldr	r3, [pc, #640]	; (80055a0 <_strtod_l+0x938>)
 800531e:	3e01      	subs	r6, #1
 8005320:	429e      	cmp	r6, r3
 8005322:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005326:	f280 80c4 	bge.w	80054b2 <_strtod_l+0x84a>
 800532a:	1b9b      	subs	r3, r3, r6
 800532c:	2b1f      	cmp	r3, #31
 800532e:	eba2 0203 	sub.w	r2, r2, r3
 8005332:	f04f 0101 	mov.w	r1, #1
 8005336:	f300 80b0 	bgt.w	800549a <_strtod_l+0x832>
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	930e      	str	r3, [sp, #56]	; 0x38
 8005340:	2300      	movs	r3, #0
 8005342:	930d      	str	r3, [sp, #52]	; 0x34
 8005344:	eb0a 0602 	add.w	r6, sl, r2
 8005348:	9b04      	ldr	r3, [sp, #16]
 800534a:	45b2      	cmp	sl, r6
 800534c:	4417      	add	r7, r2
 800534e:	441f      	add	r7, r3
 8005350:	4653      	mov	r3, sl
 8005352:	bfa8      	it	ge
 8005354:	4633      	movge	r3, r6
 8005356:	42bb      	cmp	r3, r7
 8005358:	bfa8      	it	ge
 800535a:	463b      	movge	r3, r7
 800535c:	2b00      	cmp	r3, #0
 800535e:	bfc2      	ittt	gt
 8005360:	1af6      	subgt	r6, r6, r3
 8005362:	1aff      	subgt	r7, r7, r3
 8005364:	ebaa 0a03 	subgt.w	sl, sl, r3
 8005368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800536a:	2b00      	cmp	r3, #0
 800536c:	dd17      	ble.n	800539e <_strtod_l+0x736>
 800536e:	4659      	mov	r1, fp
 8005370:	461a      	mov	r2, r3
 8005372:	4620      	mov	r0, r4
 8005374:	f001 fa82 	bl	800687c <__pow5mult>
 8005378:	4683      	mov	fp, r0
 800537a:	2800      	cmp	r0, #0
 800537c:	f43f aeb8 	beq.w	80050f0 <_strtod_l+0x488>
 8005380:	4601      	mov	r1, r0
 8005382:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005384:	4620      	mov	r0, r4
 8005386:	f001 f9cf 	bl	8006728 <__multiply>
 800538a:	900b      	str	r0, [sp, #44]	; 0x2c
 800538c:	2800      	cmp	r0, #0
 800538e:	f43f aeaf 	beq.w	80050f0 <_strtod_l+0x488>
 8005392:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005394:	4620      	mov	r0, r4
 8005396:	f001 f8b1 	bl	80064fc <_Bfree>
 800539a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800539c:	9316      	str	r3, [sp, #88]	; 0x58
 800539e:	2e00      	cmp	r6, #0
 80053a0:	f300 808c 	bgt.w	80054bc <_strtod_l+0x854>
 80053a4:	9b08      	ldr	r3, [sp, #32]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	dd08      	ble.n	80053bc <_strtod_l+0x754>
 80053aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053ac:	9905      	ldr	r1, [sp, #20]
 80053ae:	4620      	mov	r0, r4
 80053b0:	f001 fa64 	bl	800687c <__pow5mult>
 80053b4:	9005      	str	r0, [sp, #20]
 80053b6:	2800      	cmp	r0, #0
 80053b8:	f43f ae9a 	beq.w	80050f0 <_strtod_l+0x488>
 80053bc:	2f00      	cmp	r7, #0
 80053be:	dd08      	ble.n	80053d2 <_strtod_l+0x76a>
 80053c0:	9905      	ldr	r1, [sp, #20]
 80053c2:	463a      	mov	r2, r7
 80053c4:	4620      	mov	r0, r4
 80053c6:	f001 fab3 	bl	8006930 <__lshift>
 80053ca:	9005      	str	r0, [sp, #20]
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f43f ae8f 	beq.w	80050f0 <_strtod_l+0x488>
 80053d2:	f1ba 0f00 	cmp.w	sl, #0
 80053d6:	dd08      	ble.n	80053ea <_strtod_l+0x782>
 80053d8:	4659      	mov	r1, fp
 80053da:	4652      	mov	r2, sl
 80053dc:	4620      	mov	r0, r4
 80053de:	f001 faa7 	bl	8006930 <__lshift>
 80053e2:	4683      	mov	fp, r0
 80053e4:	2800      	cmp	r0, #0
 80053e6:	f43f ae83 	beq.w	80050f0 <_strtod_l+0x488>
 80053ea:	9a05      	ldr	r2, [sp, #20]
 80053ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80053ee:	4620      	mov	r0, r4
 80053f0:	f001 fb26 	bl	8006a40 <__mdiff>
 80053f4:	4605      	mov	r5, r0
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f43f ae7a 	beq.w	80050f0 <_strtod_l+0x488>
 80053fc:	68c3      	ldr	r3, [r0, #12]
 80053fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005400:	2300      	movs	r3, #0
 8005402:	60c3      	str	r3, [r0, #12]
 8005404:	4659      	mov	r1, fp
 8005406:	f001 faff 	bl	8006a08 <__mcmp>
 800540a:	2800      	cmp	r0, #0
 800540c:	da60      	bge.n	80054d0 <_strtod_l+0x868>
 800540e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005410:	ea53 0308 	orrs.w	r3, r3, r8
 8005414:	f040 8084 	bne.w	8005520 <_strtod_l+0x8b8>
 8005418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800541c:	2b00      	cmp	r3, #0
 800541e:	d17f      	bne.n	8005520 <_strtod_l+0x8b8>
 8005420:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005424:	0d1b      	lsrs	r3, r3, #20
 8005426:	051b      	lsls	r3, r3, #20
 8005428:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800542c:	d978      	bls.n	8005520 <_strtod_l+0x8b8>
 800542e:	696b      	ldr	r3, [r5, #20]
 8005430:	b913      	cbnz	r3, 8005438 <_strtod_l+0x7d0>
 8005432:	692b      	ldr	r3, [r5, #16]
 8005434:	2b01      	cmp	r3, #1
 8005436:	dd73      	ble.n	8005520 <_strtod_l+0x8b8>
 8005438:	4629      	mov	r1, r5
 800543a:	2201      	movs	r2, #1
 800543c:	4620      	mov	r0, r4
 800543e:	f001 fa77 	bl	8006930 <__lshift>
 8005442:	4659      	mov	r1, fp
 8005444:	4605      	mov	r5, r0
 8005446:	f001 fadf 	bl	8006a08 <__mcmp>
 800544a:	2800      	cmp	r0, #0
 800544c:	dd68      	ble.n	8005520 <_strtod_l+0x8b8>
 800544e:	9904      	ldr	r1, [sp, #16]
 8005450:	4a54      	ldr	r2, [pc, #336]	; (80055a4 <_strtod_l+0x93c>)
 8005452:	464b      	mov	r3, r9
 8005454:	2900      	cmp	r1, #0
 8005456:	f000 8084 	beq.w	8005562 <_strtod_l+0x8fa>
 800545a:	ea02 0109 	and.w	r1, r2, r9
 800545e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005462:	dc7e      	bgt.n	8005562 <_strtod_l+0x8fa>
 8005464:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005468:	f77f aeb3 	ble.w	80051d2 <_strtod_l+0x56a>
 800546c:	4b4e      	ldr	r3, [pc, #312]	; (80055a8 <_strtod_l+0x940>)
 800546e:	4640      	mov	r0, r8
 8005470:	4649      	mov	r1, r9
 8005472:	2200      	movs	r2, #0
 8005474:	f7fb f8d8 	bl	8000628 <__aeabi_dmul>
 8005478:	4b4a      	ldr	r3, [pc, #296]	; (80055a4 <_strtod_l+0x93c>)
 800547a:	400b      	ands	r3, r1
 800547c:	4680      	mov	r8, r0
 800547e:	4689      	mov	r9, r1
 8005480:	2b00      	cmp	r3, #0
 8005482:	f47f ae3f 	bne.w	8005104 <_strtod_l+0x49c>
 8005486:	2322      	movs	r3, #34	; 0x22
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	e63b      	b.n	8005104 <_strtod_l+0x49c>
 800548c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	ea03 0808 	and.w	r8, r3, r8
 8005498:	e6e8      	b.n	800526c <_strtod_l+0x604>
 800549a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800549e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80054a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80054a6:	36e2      	adds	r6, #226	; 0xe2
 80054a8:	fa01 f306 	lsl.w	r3, r1, r6
 80054ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80054b0:	e748      	b.n	8005344 <_strtod_l+0x6dc>
 80054b2:	2100      	movs	r1, #0
 80054b4:	2301      	movs	r3, #1
 80054b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80054ba:	e743      	b.n	8005344 <_strtod_l+0x6dc>
 80054bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80054be:	4632      	mov	r2, r6
 80054c0:	4620      	mov	r0, r4
 80054c2:	f001 fa35 	bl	8006930 <__lshift>
 80054c6:	9016      	str	r0, [sp, #88]	; 0x58
 80054c8:	2800      	cmp	r0, #0
 80054ca:	f47f af6b 	bne.w	80053a4 <_strtod_l+0x73c>
 80054ce:	e60f      	b.n	80050f0 <_strtod_l+0x488>
 80054d0:	46ca      	mov	sl, r9
 80054d2:	d171      	bne.n	80055b8 <_strtod_l+0x950>
 80054d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054da:	b352      	cbz	r2, 8005532 <_strtod_l+0x8ca>
 80054dc:	4a33      	ldr	r2, [pc, #204]	; (80055ac <_strtod_l+0x944>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d12a      	bne.n	8005538 <_strtod_l+0x8d0>
 80054e2:	9b04      	ldr	r3, [sp, #16]
 80054e4:	4641      	mov	r1, r8
 80054e6:	b1fb      	cbz	r3, 8005528 <_strtod_l+0x8c0>
 80054e8:	4b2e      	ldr	r3, [pc, #184]	; (80055a4 <_strtod_l+0x93c>)
 80054ea:	ea09 0303 	and.w	r3, r9, r3
 80054ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80054f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054f6:	d81a      	bhi.n	800552e <_strtod_l+0x8c6>
 80054f8:	0d1b      	lsrs	r3, r3, #20
 80054fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	4299      	cmp	r1, r3
 8005504:	d118      	bne.n	8005538 <_strtod_l+0x8d0>
 8005506:	4b2a      	ldr	r3, [pc, #168]	; (80055b0 <_strtod_l+0x948>)
 8005508:	459a      	cmp	sl, r3
 800550a:	d102      	bne.n	8005512 <_strtod_l+0x8aa>
 800550c:	3101      	adds	r1, #1
 800550e:	f43f adef 	beq.w	80050f0 <_strtod_l+0x488>
 8005512:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <_strtod_l+0x93c>)
 8005514:	ea0a 0303 	and.w	r3, sl, r3
 8005518:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800551c:	f04f 0800 	mov.w	r8, #0
 8005520:	9b04      	ldr	r3, [sp, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1a2      	bne.n	800546c <_strtod_l+0x804>
 8005526:	e5ed      	b.n	8005104 <_strtod_l+0x49c>
 8005528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800552c:	e7e9      	b.n	8005502 <_strtod_l+0x89a>
 800552e:	4613      	mov	r3, r2
 8005530:	e7e7      	b.n	8005502 <_strtod_l+0x89a>
 8005532:	ea53 0308 	orrs.w	r3, r3, r8
 8005536:	d08a      	beq.n	800544e <_strtod_l+0x7e6>
 8005538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800553a:	b1e3      	cbz	r3, 8005576 <_strtod_l+0x90e>
 800553c:	ea13 0f0a 	tst.w	r3, sl
 8005540:	d0ee      	beq.n	8005520 <_strtod_l+0x8b8>
 8005542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005544:	9a04      	ldr	r2, [sp, #16]
 8005546:	4640      	mov	r0, r8
 8005548:	4649      	mov	r1, r9
 800554a:	b1c3      	cbz	r3, 800557e <_strtod_l+0x916>
 800554c:	f7ff fb6e 	bl	8004c2c <sulp>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	ec51 0b18 	vmov	r0, r1, d8
 8005558:	f7fa feb0 	bl	80002bc <__adddf3>
 800555c:	4680      	mov	r8, r0
 800555e:	4689      	mov	r9, r1
 8005560:	e7de      	b.n	8005520 <_strtod_l+0x8b8>
 8005562:	4013      	ands	r3, r2
 8005564:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005568:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800556c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005570:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005574:	e7d4      	b.n	8005520 <_strtod_l+0x8b8>
 8005576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005578:	ea13 0f08 	tst.w	r3, r8
 800557c:	e7e0      	b.n	8005540 <_strtod_l+0x8d8>
 800557e:	f7ff fb55 	bl	8004c2c <sulp>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	ec51 0b18 	vmov	r0, r1, d8
 800558a:	f7fa fe95 	bl	80002b8 <__aeabi_dsub>
 800558e:	2200      	movs	r2, #0
 8005590:	2300      	movs	r3, #0
 8005592:	4680      	mov	r8, r0
 8005594:	4689      	mov	r9, r1
 8005596:	f7fb faaf 	bl	8000af8 <__aeabi_dcmpeq>
 800559a:	2800      	cmp	r0, #0
 800559c:	d0c0      	beq.n	8005520 <_strtod_l+0x8b8>
 800559e:	e618      	b.n	80051d2 <_strtod_l+0x56a>
 80055a0:	fffffc02 	.word	0xfffffc02
 80055a4:	7ff00000 	.word	0x7ff00000
 80055a8:	39500000 	.word	0x39500000
 80055ac:	000fffff 	.word	0x000fffff
 80055b0:	7fefffff 	.word	0x7fefffff
 80055b4:	08007928 	.word	0x08007928
 80055b8:	4659      	mov	r1, fp
 80055ba:	4628      	mov	r0, r5
 80055bc:	f001 fb94 	bl	8006ce8 <__ratio>
 80055c0:	ec57 6b10 	vmov	r6, r7, d0
 80055c4:	ee10 0a10 	vmov	r0, s0
 80055c8:	2200      	movs	r2, #0
 80055ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055ce:	4639      	mov	r1, r7
 80055d0:	f7fb faa6 	bl	8000b20 <__aeabi_dcmple>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d071      	beq.n	80056bc <_strtod_l+0xa54>
 80055d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d17c      	bne.n	80056d8 <_strtod_l+0xa70>
 80055de:	f1b8 0f00 	cmp.w	r8, #0
 80055e2:	d15a      	bne.n	800569a <_strtod_l+0xa32>
 80055e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d15d      	bne.n	80056a8 <_strtod_l+0xa40>
 80055ec:	4b90      	ldr	r3, [pc, #576]	; (8005830 <_strtod_l+0xbc8>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	4630      	mov	r0, r6
 80055f2:	4639      	mov	r1, r7
 80055f4:	f7fb fa8a 	bl	8000b0c <__aeabi_dcmplt>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d15c      	bne.n	80056b6 <_strtod_l+0xa4e>
 80055fc:	4630      	mov	r0, r6
 80055fe:	4639      	mov	r1, r7
 8005600:	4b8c      	ldr	r3, [pc, #560]	; (8005834 <_strtod_l+0xbcc>)
 8005602:	2200      	movs	r2, #0
 8005604:	f7fb f810 	bl	8000628 <__aeabi_dmul>
 8005608:	4606      	mov	r6, r0
 800560a:	460f      	mov	r7, r1
 800560c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005610:	9606      	str	r6, [sp, #24]
 8005612:	9307      	str	r3, [sp, #28]
 8005614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005618:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800561c:	4b86      	ldr	r3, [pc, #536]	; (8005838 <_strtod_l+0xbd0>)
 800561e:	ea0a 0303 	and.w	r3, sl, r3
 8005622:	930d      	str	r3, [sp, #52]	; 0x34
 8005624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005626:	4b85      	ldr	r3, [pc, #532]	; (800583c <_strtod_l+0xbd4>)
 8005628:	429a      	cmp	r2, r3
 800562a:	f040 8090 	bne.w	800574e <_strtod_l+0xae6>
 800562e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005632:	ec49 8b10 	vmov	d0, r8, r9
 8005636:	f001 fa8d 	bl	8006b54 <__ulp>
 800563a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800563e:	ec51 0b10 	vmov	r0, r1, d0
 8005642:	f7fa fff1 	bl	8000628 <__aeabi_dmul>
 8005646:	4642      	mov	r2, r8
 8005648:	464b      	mov	r3, r9
 800564a:	f7fa fe37 	bl	80002bc <__adddf3>
 800564e:	460b      	mov	r3, r1
 8005650:	4979      	ldr	r1, [pc, #484]	; (8005838 <_strtod_l+0xbd0>)
 8005652:	4a7b      	ldr	r2, [pc, #492]	; (8005840 <_strtod_l+0xbd8>)
 8005654:	4019      	ands	r1, r3
 8005656:	4291      	cmp	r1, r2
 8005658:	4680      	mov	r8, r0
 800565a:	d944      	bls.n	80056e6 <_strtod_l+0xa7e>
 800565c:	ee18 2a90 	vmov	r2, s17
 8005660:	4b78      	ldr	r3, [pc, #480]	; (8005844 <_strtod_l+0xbdc>)
 8005662:	429a      	cmp	r2, r3
 8005664:	d104      	bne.n	8005670 <_strtod_l+0xa08>
 8005666:	ee18 3a10 	vmov	r3, s16
 800566a:	3301      	adds	r3, #1
 800566c:	f43f ad40 	beq.w	80050f0 <_strtod_l+0x488>
 8005670:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8005844 <_strtod_l+0xbdc>
 8005674:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005678:	9916      	ldr	r1, [sp, #88]	; 0x58
 800567a:	4620      	mov	r0, r4
 800567c:	f000 ff3e 	bl	80064fc <_Bfree>
 8005680:	9905      	ldr	r1, [sp, #20]
 8005682:	4620      	mov	r0, r4
 8005684:	f000 ff3a 	bl	80064fc <_Bfree>
 8005688:	4659      	mov	r1, fp
 800568a:	4620      	mov	r0, r4
 800568c:	f000 ff36 	bl	80064fc <_Bfree>
 8005690:	4629      	mov	r1, r5
 8005692:	4620      	mov	r0, r4
 8005694:	f000 ff32 	bl	80064fc <_Bfree>
 8005698:	e609      	b.n	80052ae <_strtod_l+0x646>
 800569a:	f1b8 0f01 	cmp.w	r8, #1
 800569e:	d103      	bne.n	80056a8 <_strtod_l+0xa40>
 80056a0:	f1b9 0f00 	cmp.w	r9, #0
 80056a4:	f43f ad95 	beq.w	80051d2 <_strtod_l+0x56a>
 80056a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8005800 <_strtod_l+0xb98>
 80056ac:	4f60      	ldr	r7, [pc, #384]	; (8005830 <_strtod_l+0xbc8>)
 80056ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80056b2:	2600      	movs	r6, #0
 80056b4:	e7ae      	b.n	8005614 <_strtod_l+0x9ac>
 80056b6:	4f5f      	ldr	r7, [pc, #380]	; (8005834 <_strtod_l+0xbcc>)
 80056b8:	2600      	movs	r6, #0
 80056ba:	e7a7      	b.n	800560c <_strtod_l+0x9a4>
 80056bc:	4b5d      	ldr	r3, [pc, #372]	; (8005834 <_strtod_l+0xbcc>)
 80056be:	4630      	mov	r0, r6
 80056c0:	4639      	mov	r1, r7
 80056c2:	2200      	movs	r2, #0
 80056c4:	f7fa ffb0 	bl	8000628 <__aeabi_dmul>
 80056c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d09c      	beq.n	800560c <_strtod_l+0x9a4>
 80056d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80056d6:	e79d      	b.n	8005614 <_strtod_l+0x9ac>
 80056d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8005808 <_strtod_l+0xba0>
 80056dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80056e0:	ec57 6b17 	vmov	r6, r7, d7
 80056e4:	e796      	b.n	8005614 <_strtod_l+0x9ac>
 80056e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80056ea:	9b04      	ldr	r3, [sp, #16]
 80056ec:	46ca      	mov	sl, r9
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1c2      	bne.n	8005678 <_strtod_l+0xa10>
 80056f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056f8:	0d1b      	lsrs	r3, r3, #20
 80056fa:	051b      	lsls	r3, r3, #20
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1bb      	bne.n	8005678 <_strtod_l+0xa10>
 8005700:	4630      	mov	r0, r6
 8005702:	4639      	mov	r1, r7
 8005704:	f7fb fa8a 	bl	8000c1c <__aeabi_d2lz>
 8005708:	f7fa ff60 	bl	80005cc <__aeabi_l2d>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4630      	mov	r0, r6
 8005712:	4639      	mov	r1, r7
 8005714:	f7fa fdd0 	bl	80002b8 <__aeabi_dsub>
 8005718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800571a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800571e:	ea43 0308 	orr.w	r3, r3, r8
 8005722:	4313      	orrs	r3, r2
 8005724:	4606      	mov	r6, r0
 8005726:	460f      	mov	r7, r1
 8005728:	d054      	beq.n	80057d4 <_strtod_l+0xb6c>
 800572a:	a339      	add	r3, pc, #228	; (adr r3, 8005810 <_strtod_l+0xba8>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f7fb f9ec 	bl	8000b0c <__aeabi_dcmplt>
 8005734:	2800      	cmp	r0, #0
 8005736:	f47f ace5 	bne.w	8005104 <_strtod_l+0x49c>
 800573a:	a337      	add	r3, pc, #220	; (adr r3, 8005818 <_strtod_l+0xbb0>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	f7fb fa00 	bl	8000b48 <__aeabi_dcmpgt>
 8005748:	2800      	cmp	r0, #0
 800574a:	d095      	beq.n	8005678 <_strtod_l+0xa10>
 800574c:	e4da      	b.n	8005104 <_strtod_l+0x49c>
 800574e:	9b04      	ldr	r3, [sp, #16]
 8005750:	b333      	cbz	r3, 80057a0 <_strtod_l+0xb38>
 8005752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005754:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005758:	d822      	bhi.n	80057a0 <_strtod_l+0xb38>
 800575a:	a331      	add	r3, pc, #196	; (adr r3, 8005820 <_strtod_l+0xbb8>)
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	4630      	mov	r0, r6
 8005762:	4639      	mov	r1, r7
 8005764:	f7fb f9dc 	bl	8000b20 <__aeabi_dcmple>
 8005768:	b1a0      	cbz	r0, 8005794 <_strtod_l+0xb2c>
 800576a:	4639      	mov	r1, r7
 800576c:	4630      	mov	r0, r6
 800576e:	f7fb fa1d 	bl	8000bac <__aeabi_d2uiz>
 8005772:	2801      	cmp	r0, #1
 8005774:	bf38      	it	cc
 8005776:	2001      	movcc	r0, #1
 8005778:	f7fa fedc 	bl	8000534 <__aeabi_ui2d>
 800577c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800577e:	4606      	mov	r6, r0
 8005780:	460f      	mov	r7, r1
 8005782:	bb23      	cbnz	r3, 80057ce <_strtod_l+0xb66>
 8005784:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005788:	9010      	str	r0, [sp, #64]	; 0x40
 800578a:	9311      	str	r3, [sp, #68]	; 0x44
 800578c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005790:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005796:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005798:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	930f      	str	r3, [sp, #60]	; 0x3c
 80057a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80057a4:	eeb0 0a48 	vmov.f32	s0, s16
 80057a8:	eef0 0a68 	vmov.f32	s1, s17
 80057ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80057b0:	f001 f9d0 	bl	8006b54 <__ulp>
 80057b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80057b8:	ec53 2b10 	vmov	r2, r3, d0
 80057bc:	f7fa ff34 	bl	8000628 <__aeabi_dmul>
 80057c0:	ec53 2b18 	vmov	r2, r3, d8
 80057c4:	f7fa fd7a 	bl	80002bc <__adddf3>
 80057c8:	4680      	mov	r8, r0
 80057ca:	4689      	mov	r9, r1
 80057cc:	e78d      	b.n	80056ea <_strtod_l+0xa82>
 80057ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80057d2:	e7db      	b.n	800578c <_strtod_l+0xb24>
 80057d4:	a314      	add	r3, pc, #80	; (adr r3, 8005828 <_strtod_l+0xbc0>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f7fb f997 	bl	8000b0c <__aeabi_dcmplt>
 80057de:	e7b3      	b.n	8005748 <_strtod_l+0xae0>
 80057e0:	2300      	movs	r3, #0
 80057e2:	930a      	str	r3, [sp, #40]	; 0x28
 80057e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	f7ff ba7c 	b.w	8004ce6 <_strtod_l+0x7e>
 80057ee:	2a65      	cmp	r2, #101	; 0x65
 80057f0:	f43f ab75 	beq.w	8004ede <_strtod_l+0x276>
 80057f4:	2a45      	cmp	r2, #69	; 0x45
 80057f6:	f43f ab72 	beq.w	8004ede <_strtod_l+0x276>
 80057fa:	2301      	movs	r3, #1
 80057fc:	f7ff bbaa 	b.w	8004f54 <_strtod_l+0x2ec>
 8005800:	00000000 	.word	0x00000000
 8005804:	bff00000 	.word	0xbff00000
 8005808:	00000000 	.word	0x00000000
 800580c:	3ff00000 	.word	0x3ff00000
 8005810:	94a03595 	.word	0x94a03595
 8005814:	3fdfffff 	.word	0x3fdfffff
 8005818:	35afe535 	.word	0x35afe535
 800581c:	3fe00000 	.word	0x3fe00000
 8005820:	ffc00000 	.word	0xffc00000
 8005824:	41dfffff 	.word	0x41dfffff
 8005828:	94a03595 	.word	0x94a03595
 800582c:	3fcfffff 	.word	0x3fcfffff
 8005830:	3ff00000 	.word	0x3ff00000
 8005834:	3fe00000 	.word	0x3fe00000
 8005838:	7ff00000 	.word	0x7ff00000
 800583c:	7fe00000 	.word	0x7fe00000
 8005840:	7c9fffff 	.word	0x7c9fffff
 8005844:	7fefffff 	.word	0x7fefffff

08005848 <strtod>:
 8005848:	460a      	mov	r2, r1
 800584a:	4601      	mov	r1, r0
 800584c:	4802      	ldr	r0, [pc, #8]	; (8005858 <strtod+0x10>)
 800584e:	4b03      	ldr	r3, [pc, #12]	; (800585c <strtod+0x14>)
 8005850:	6800      	ldr	r0, [r0, #0]
 8005852:	f7ff ba09 	b.w	8004c68 <_strtod_l>
 8005856:	bf00      	nop
 8005858:	200001d0 	.word	0x200001d0
 800585c:	20000018 	.word	0x20000018

08005860 <std>:
 8005860:	2300      	movs	r3, #0
 8005862:	b510      	push	{r4, lr}
 8005864:	4604      	mov	r4, r0
 8005866:	e9c0 3300 	strd	r3, r3, [r0]
 800586a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586e:	6083      	str	r3, [r0, #8]
 8005870:	8181      	strh	r1, [r0, #12]
 8005872:	6643      	str	r3, [r0, #100]	; 0x64
 8005874:	81c2      	strh	r2, [r0, #14]
 8005876:	6183      	str	r3, [r0, #24]
 8005878:	4619      	mov	r1, r3
 800587a:	2208      	movs	r2, #8
 800587c:	305c      	adds	r0, #92	; 0x5c
 800587e:	f000 f8f4 	bl	8005a6a <memset>
 8005882:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <std+0x58>)
 8005884:	6263      	str	r3, [r4, #36]	; 0x24
 8005886:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <std+0x5c>)
 8005888:	62a3      	str	r3, [r4, #40]	; 0x28
 800588a:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <std+0x60>)
 800588c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <std+0x64>)
 8005890:	6323      	str	r3, [r4, #48]	; 0x30
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <std+0x68>)
 8005894:	6224      	str	r4, [r4, #32]
 8005896:	429c      	cmp	r4, r3
 8005898:	d006      	beq.n	80058a8 <std+0x48>
 800589a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800589e:	4294      	cmp	r4, r2
 80058a0:	d002      	beq.n	80058a8 <std+0x48>
 80058a2:	33d0      	adds	r3, #208	; 0xd0
 80058a4:	429c      	cmp	r4, r3
 80058a6:	d105      	bne.n	80058b4 <std+0x54>
 80058a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b0:	f000 b966 	b.w	8005b80 <__retarget_lock_init_recursive>
 80058b4:	bd10      	pop	{r4, pc}
 80058b6:	bf00      	nop
 80058b8:	080059e5 	.word	0x080059e5
 80058bc:	08005a07 	.word	0x08005a07
 80058c0:	08005a3f 	.word	0x08005a3f
 80058c4:	08005a63 	.word	0x08005a63
 80058c8:	200003dc 	.word	0x200003dc

080058cc <stdio_exit_handler>:
 80058cc:	4a02      	ldr	r2, [pc, #8]	; (80058d8 <stdio_exit_handler+0xc>)
 80058ce:	4903      	ldr	r1, [pc, #12]	; (80058dc <stdio_exit_handler+0x10>)
 80058d0:	4803      	ldr	r0, [pc, #12]	; (80058e0 <stdio_exit_handler+0x14>)
 80058d2:	f000 b869 	b.w	80059a8 <_fwalk_sglue>
 80058d6:	bf00      	nop
 80058d8:	2000000c 	.word	0x2000000c
 80058dc:	08006efd 	.word	0x08006efd
 80058e0:	20000184 	.word	0x20000184

080058e4 <cleanup_stdio>:
 80058e4:	6841      	ldr	r1, [r0, #4]
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <cleanup_stdio+0x34>)
 80058e8:	4299      	cmp	r1, r3
 80058ea:	b510      	push	{r4, lr}
 80058ec:	4604      	mov	r4, r0
 80058ee:	d001      	beq.n	80058f4 <cleanup_stdio+0x10>
 80058f0:	f001 fb04 	bl	8006efc <_fflush_r>
 80058f4:	68a1      	ldr	r1, [r4, #8]
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <cleanup_stdio+0x38>)
 80058f8:	4299      	cmp	r1, r3
 80058fa:	d002      	beq.n	8005902 <cleanup_stdio+0x1e>
 80058fc:	4620      	mov	r0, r4
 80058fe:	f001 fafd 	bl	8006efc <_fflush_r>
 8005902:	68e1      	ldr	r1, [r4, #12]
 8005904:	4b06      	ldr	r3, [pc, #24]	; (8005920 <cleanup_stdio+0x3c>)
 8005906:	4299      	cmp	r1, r3
 8005908:	d004      	beq.n	8005914 <cleanup_stdio+0x30>
 800590a:	4620      	mov	r0, r4
 800590c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005910:	f001 baf4 	b.w	8006efc <_fflush_r>
 8005914:	bd10      	pop	{r4, pc}
 8005916:	bf00      	nop
 8005918:	200003dc 	.word	0x200003dc
 800591c:	20000444 	.word	0x20000444
 8005920:	200004ac 	.word	0x200004ac

08005924 <global_stdio_init.part.0>:
 8005924:	b510      	push	{r4, lr}
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <global_stdio_init.part.0+0x30>)
 8005928:	4c0b      	ldr	r4, [pc, #44]	; (8005958 <global_stdio_init.part.0+0x34>)
 800592a:	4a0c      	ldr	r2, [pc, #48]	; (800595c <global_stdio_init.part.0+0x38>)
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	4620      	mov	r0, r4
 8005930:	2200      	movs	r2, #0
 8005932:	2104      	movs	r1, #4
 8005934:	f7ff ff94 	bl	8005860 <std>
 8005938:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800593c:	2201      	movs	r2, #1
 800593e:	2109      	movs	r1, #9
 8005940:	f7ff ff8e 	bl	8005860 <std>
 8005944:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005948:	2202      	movs	r2, #2
 800594a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594e:	2112      	movs	r1, #18
 8005950:	f7ff bf86 	b.w	8005860 <std>
 8005954:	20000514 	.word	0x20000514
 8005958:	200003dc 	.word	0x200003dc
 800595c:	080058cd 	.word	0x080058cd

08005960 <__sfp_lock_acquire>:
 8005960:	4801      	ldr	r0, [pc, #4]	; (8005968 <__sfp_lock_acquire+0x8>)
 8005962:	f000 b90e 	b.w	8005b82 <__retarget_lock_acquire_recursive>
 8005966:	bf00      	nop
 8005968:	2000051d 	.word	0x2000051d

0800596c <__sfp_lock_release>:
 800596c:	4801      	ldr	r0, [pc, #4]	; (8005974 <__sfp_lock_release+0x8>)
 800596e:	f000 b909 	b.w	8005b84 <__retarget_lock_release_recursive>
 8005972:	bf00      	nop
 8005974:	2000051d 	.word	0x2000051d

08005978 <__sinit>:
 8005978:	b510      	push	{r4, lr}
 800597a:	4604      	mov	r4, r0
 800597c:	f7ff fff0 	bl	8005960 <__sfp_lock_acquire>
 8005980:	6a23      	ldr	r3, [r4, #32]
 8005982:	b11b      	cbz	r3, 800598c <__sinit+0x14>
 8005984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005988:	f7ff bff0 	b.w	800596c <__sfp_lock_release>
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <__sinit+0x28>)
 800598e:	6223      	str	r3, [r4, #32]
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <__sinit+0x2c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f5      	bne.n	8005984 <__sinit+0xc>
 8005998:	f7ff ffc4 	bl	8005924 <global_stdio_init.part.0>
 800599c:	e7f2      	b.n	8005984 <__sinit+0xc>
 800599e:	bf00      	nop
 80059a0:	080058e5 	.word	0x080058e5
 80059a4:	20000514 	.word	0x20000514

080059a8 <_fwalk_sglue>:
 80059a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ac:	4607      	mov	r7, r0
 80059ae:	4688      	mov	r8, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	2600      	movs	r6, #0
 80059b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059b8:	f1b9 0901 	subs.w	r9, r9, #1
 80059bc:	d505      	bpl.n	80059ca <_fwalk_sglue+0x22>
 80059be:	6824      	ldr	r4, [r4, #0]
 80059c0:	2c00      	cmp	r4, #0
 80059c2:	d1f7      	bne.n	80059b4 <_fwalk_sglue+0xc>
 80059c4:	4630      	mov	r0, r6
 80059c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ca:	89ab      	ldrh	r3, [r5, #12]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d907      	bls.n	80059e0 <_fwalk_sglue+0x38>
 80059d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059d4:	3301      	adds	r3, #1
 80059d6:	d003      	beq.n	80059e0 <_fwalk_sglue+0x38>
 80059d8:	4629      	mov	r1, r5
 80059da:	4638      	mov	r0, r7
 80059dc:	47c0      	blx	r8
 80059de:	4306      	orrs	r6, r0
 80059e0:	3568      	adds	r5, #104	; 0x68
 80059e2:	e7e9      	b.n	80059b8 <_fwalk_sglue+0x10>

080059e4 <__sread>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	460c      	mov	r4, r1
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	f000 f87a 	bl	8005ae4 <_read_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	bfab      	itete	ge
 80059f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059f6:	89a3      	ldrhlt	r3, [r4, #12]
 80059f8:	181b      	addge	r3, r3, r0
 80059fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059fe:	bfac      	ite	ge
 8005a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a02:	81a3      	strhlt	r3, [r4, #12]
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <__swrite>:
 8005a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	461f      	mov	r7, r3
 8005a0c:	898b      	ldrh	r3, [r1, #12]
 8005a0e:	05db      	lsls	r3, r3, #23
 8005a10:	4605      	mov	r5, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	4616      	mov	r6, r2
 8005a16:	d505      	bpl.n	8005a24 <__swrite+0x1e>
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f000 f84e 	bl	8005ac0 <_lseek_r>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	4632      	mov	r2, r6
 8005a32:	463b      	mov	r3, r7
 8005a34:	4628      	mov	r0, r5
 8005a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	f000 b865 	b.w	8005b08 <_write_r>

08005a3e <__sseek>:
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	460c      	mov	r4, r1
 8005a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a46:	f000 f83b 	bl	8005ac0 <_lseek_r>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	bf15      	itete	ne
 8005a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a5a:	81a3      	strheq	r3, [r4, #12]
 8005a5c:	bf18      	it	ne
 8005a5e:	81a3      	strhne	r3, [r4, #12]
 8005a60:	bd10      	pop	{r4, pc}

08005a62 <__sclose>:
 8005a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a66:	f000 b81b 	b.w	8005aa0 <_close_r>

08005a6a <memset>:
 8005a6a:	4402      	add	r2, r0
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d100      	bne.n	8005a74 <memset+0xa>
 8005a72:	4770      	bx	lr
 8005a74:	f803 1b01 	strb.w	r1, [r3], #1
 8005a78:	e7f9      	b.n	8005a6e <memset+0x4>

08005a7a <strncmp>:
 8005a7a:	b510      	push	{r4, lr}
 8005a7c:	b16a      	cbz	r2, 8005a9a <strncmp+0x20>
 8005a7e:	3901      	subs	r1, #1
 8005a80:	1884      	adds	r4, r0, r2
 8005a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a86:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d103      	bne.n	8005a96 <strncmp+0x1c>
 8005a8e:	42a0      	cmp	r0, r4
 8005a90:	d001      	beq.n	8005a96 <strncmp+0x1c>
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	d1f5      	bne.n	8005a82 <strncmp+0x8>
 8005a96:	1ad0      	subs	r0, r2, r3
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	e7fc      	b.n	8005a98 <strncmp+0x1e>
	...

08005aa0 <_close_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d06      	ldr	r5, [pc, #24]	; (8005abc <_close_r+0x1c>)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	f7fc f99b 	bl	8001de6 <_close>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d102      	bne.n	8005aba <_close_r+0x1a>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	b103      	cbz	r3, 8005aba <_close_r+0x1a>
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	20000518 	.word	0x20000518

08005ac0 <_lseek_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4d07      	ldr	r5, [pc, #28]	; (8005ae0 <_lseek_r+0x20>)
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	4608      	mov	r0, r1
 8005ac8:	4611      	mov	r1, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	602a      	str	r2, [r5, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f7fc f9b0 	bl	8001e34 <_lseek>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_lseek_r+0x1e>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_lseek_r+0x1e>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	20000518 	.word	0x20000518

08005ae4 <_read_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d07      	ldr	r5, [pc, #28]	; (8005b04 <_read_r+0x20>)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	602a      	str	r2, [r5, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7fc f93e 	bl	8001d74 <_read>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_read_r+0x1e>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_read_r+0x1e>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	20000518 	.word	0x20000518

08005b08 <_write_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d07      	ldr	r5, [pc, #28]	; (8005b28 <_write_r+0x20>)
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	4608      	mov	r0, r1
 8005b10:	4611      	mov	r1, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fc f949 	bl	8001dae <_write>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_write_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_write_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	20000518 	.word	0x20000518

08005b2c <__errno>:
 8005b2c:	4b01      	ldr	r3, [pc, #4]	; (8005b34 <__errno+0x8>)
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	200001d0 	.word	0x200001d0

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4d0d      	ldr	r5, [pc, #52]	; (8005b70 <__libc_init_array+0x38>)
 8005b3c:	4c0d      	ldr	r4, [pc, #52]	; (8005b74 <__libc_init_array+0x3c>)
 8005b3e:	1b64      	subs	r4, r4, r5
 8005b40:	10a4      	asrs	r4, r4, #2
 8005b42:	2600      	movs	r6, #0
 8005b44:	42a6      	cmp	r6, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	4d0b      	ldr	r5, [pc, #44]	; (8005b78 <__libc_init_array+0x40>)
 8005b4a:	4c0c      	ldr	r4, [pc, #48]	; (8005b7c <__libc_init_array+0x44>)
 8005b4c:	f001 fe94 	bl	8007878 <_init>
 8005b50:	1b64      	subs	r4, r4, r5
 8005b52:	10a4      	asrs	r4, r4, #2
 8005b54:	2600      	movs	r6, #0
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b60:	4798      	blx	r3
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6a:	4798      	blx	r3
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	08007cb4 	.word	0x08007cb4
 8005b74:	08007cb4 	.word	0x08007cb4
 8005b78:	08007cb4 	.word	0x08007cb4
 8005b7c:	08007cb8 	.word	0x08007cb8

08005b80 <__retarget_lock_init_recursive>:
 8005b80:	4770      	bx	lr

08005b82 <__retarget_lock_acquire_recursive>:
 8005b82:	4770      	bx	lr

08005b84 <__retarget_lock_release_recursive>:
 8005b84:	4770      	bx	lr

08005b86 <memcpy>:
 8005b86:	440a      	add	r2, r1
 8005b88:	4291      	cmp	r1, r2
 8005b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005b8e:	d100      	bne.n	8005b92 <memcpy+0xc>
 8005b90:	4770      	bx	lr
 8005b92:	b510      	push	{r4, lr}
 8005b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b9c:	4291      	cmp	r1, r2
 8005b9e:	d1f9      	bne.n	8005b94 <memcpy+0xe>
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	0000      	movs	r0, r0
 8005ba4:	0000      	movs	r0, r0
	...

08005ba8 <nan>:
 8005ba8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005bb0 <nan+0x8>
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	00000000 	.word	0x00000000
 8005bb4:	7ff80000 	.word	0x7ff80000

08005bb8 <_free_r>:
 8005bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bba:	2900      	cmp	r1, #0
 8005bbc:	d044      	beq.n	8005c48 <_free_r+0x90>
 8005bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc2:	9001      	str	r0, [sp, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f1a1 0404 	sub.w	r4, r1, #4
 8005bca:	bfb8      	it	lt
 8005bcc:	18e4      	addlt	r4, r4, r3
 8005bce:	f000 fc49 	bl	8006464 <__malloc_lock>
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <_free_r+0x94>)
 8005bd4:	9801      	ldr	r0, [sp, #4]
 8005bd6:	6813      	ldr	r3, [r2, #0]
 8005bd8:	b933      	cbnz	r3, 8005be8 <_free_r+0x30>
 8005bda:	6063      	str	r3, [r4, #4]
 8005bdc:	6014      	str	r4, [r2, #0]
 8005bde:	b003      	add	sp, #12
 8005be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005be4:	f000 bc44 	b.w	8006470 <__malloc_unlock>
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	d908      	bls.n	8005bfe <_free_r+0x46>
 8005bec:	6825      	ldr	r5, [r4, #0]
 8005bee:	1961      	adds	r1, r4, r5
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	bf01      	itttt	eq
 8005bf4:	6819      	ldreq	r1, [r3, #0]
 8005bf6:	685b      	ldreq	r3, [r3, #4]
 8005bf8:	1949      	addeq	r1, r1, r5
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	e7ed      	b.n	8005bda <_free_r+0x22>
 8005bfe:	461a      	mov	r2, r3
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	b10b      	cbz	r3, 8005c08 <_free_r+0x50>
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d9fa      	bls.n	8005bfe <_free_r+0x46>
 8005c08:	6811      	ldr	r1, [r2, #0]
 8005c0a:	1855      	adds	r5, r2, r1
 8005c0c:	42a5      	cmp	r5, r4
 8005c0e:	d10b      	bne.n	8005c28 <_free_r+0x70>
 8005c10:	6824      	ldr	r4, [r4, #0]
 8005c12:	4421      	add	r1, r4
 8005c14:	1854      	adds	r4, r2, r1
 8005c16:	42a3      	cmp	r3, r4
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	d1e0      	bne.n	8005bde <_free_r+0x26>
 8005c1c:	681c      	ldr	r4, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	6053      	str	r3, [r2, #4]
 8005c22:	440c      	add	r4, r1
 8005c24:	6014      	str	r4, [r2, #0]
 8005c26:	e7da      	b.n	8005bde <_free_r+0x26>
 8005c28:	d902      	bls.n	8005c30 <_free_r+0x78>
 8005c2a:	230c      	movs	r3, #12
 8005c2c:	6003      	str	r3, [r0, #0]
 8005c2e:	e7d6      	b.n	8005bde <_free_r+0x26>
 8005c30:	6825      	ldr	r5, [r4, #0]
 8005c32:	1961      	adds	r1, r4, r5
 8005c34:	428b      	cmp	r3, r1
 8005c36:	bf04      	itt	eq
 8005c38:	6819      	ldreq	r1, [r3, #0]
 8005c3a:	685b      	ldreq	r3, [r3, #4]
 8005c3c:	6063      	str	r3, [r4, #4]
 8005c3e:	bf04      	itt	eq
 8005c40:	1949      	addeq	r1, r1, r5
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	6054      	str	r4, [r2, #4]
 8005c46:	e7ca      	b.n	8005bde <_free_r+0x26>
 8005c48:	b003      	add	sp, #12
 8005c4a:	bd30      	pop	{r4, r5, pc}
 8005c4c:	20000520 	.word	0x20000520

08005c50 <rshift>:
 8005c50:	6903      	ldr	r3, [r0, #16]
 8005c52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005c56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005c5e:	f100 0414 	add.w	r4, r0, #20
 8005c62:	dd45      	ble.n	8005cf0 <rshift+0xa0>
 8005c64:	f011 011f 	ands.w	r1, r1, #31
 8005c68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005c6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005c70:	d10c      	bne.n	8005c8c <rshift+0x3c>
 8005c72:	f100 0710 	add.w	r7, r0, #16
 8005c76:	4629      	mov	r1, r5
 8005c78:	42b1      	cmp	r1, r6
 8005c7a:	d334      	bcc.n	8005ce6 <rshift+0x96>
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	1eea      	subs	r2, r5, #3
 8005c82:	4296      	cmp	r6, r2
 8005c84:	bf38      	it	cc
 8005c86:	2300      	movcc	r3, #0
 8005c88:	4423      	add	r3, r4
 8005c8a:	e015      	b.n	8005cb8 <rshift+0x68>
 8005c8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005c90:	f1c1 0820 	rsb	r8, r1, #32
 8005c94:	40cf      	lsrs	r7, r1
 8005c96:	f105 0e04 	add.w	lr, r5, #4
 8005c9a:	46a1      	mov	r9, r4
 8005c9c:	4576      	cmp	r6, lr
 8005c9e:	46f4      	mov	ip, lr
 8005ca0:	d815      	bhi.n	8005cce <rshift+0x7e>
 8005ca2:	1a9a      	subs	r2, r3, r2
 8005ca4:	0092      	lsls	r2, r2, #2
 8005ca6:	3a04      	subs	r2, #4
 8005ca8:	3501      	adds	r5, #1
 8005caa:	42ae      	cmp	r6, r5
 8005cac:	bf38      	it	cc
 8005cae:	2200      	movcc	r2, #0
 8005cb0:	18a3      	adds	r3, r4, r2
 8005cb2:	50a7      	str	r7, [r4, r2]
 8005cb4:	b107      	cbz	r7, 8005cb8 <rshift+0x68>
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	1b1a      	subs	r2, r3, r4
 8005cba:	42a3      	cmp	r3, r4
 8005cbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005cc0:	bf08      	it	eq
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	6102      	str	r2, [r0, #16]
 8005cc6:	bf08      	it	eq
 8005cc8:	6143      	streq	r3, [r0, #20]
 8005cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cce:	f8dc c000 	ldr.w	ip, [ip]
 8005cd2:	fa0c fc08 	lsl.w	ip, ip, r8
 8005cd6:	ea4c 0707 	orr.w	r7, ip, r7
 8005cda:	f849 7b04 	str.w	r7, [r9], #4
 8005cde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ce2:	40cf      	lsrs	r7, r1
 8005ce4:	e7da      	b.n	8005c9c <rshift+0x4c>
 8005ce6:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cea:	f847 cf04 	str.w	ip, [r7, #4]!
 8005cee:	e7c3      	b.n	8005c78 <rshift+0x28>
 8005cf0:	4623      	mov	r3, r4
 8005cf2:	e7e1      	b.n	8005cb8 <rshift+0x68>

08005cf4 <__hexdig_fun>:
 8005cf4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005cf8:	2b09      	cmp	r3, #9
 8005cfa:	d802      	bhi.n	8005d02 <__hexdig_fun+0xe>
 8005cfc:	3820      	subs	r0, #32
 8005cfe:	b2c0      	uxtb	r0, r0
 8005d00:	4770      	bx	lr
 8005d02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d801      	bhi.n	8005d0e <__hexdig_fun+0x1a>
 8005d0a:	3847      	subs	r0, #71	; 0x47
 8005d0c:	e7f7      	b.n	8005cfe <__hexdig_fun+0xa>
 8005d0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005d12:	2b05      	cmp	r3, #5
 8005d14:	d801      	bhi.n	8005d1a <__hexdig_fun+0x26>
 8005d16:	3827      	subs	r0, #39	; 0x27
 8005d18:	e7f1      	b.n	8005cfe <__hexdig_fun+0xa>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	4770      	bx	lr
	...

08005d20 <__gethex>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	4617      	mov	r7, r2
 8005d26:	680a      	ldr	r2, [r1, #0]
 8005d28:	b085      	sub	sp, #20
 8005d2a:	f102 0b02 	add.w	fp, r2, #2
 8005d2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005d32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005d36:	4681      	mov	r9, r0
 8005d38:	468a      	mov	sl, r1
 8005d3a:	9302      	str	r3, [sp, #8]
 8005d3c:	32fe      	adds	r2, #254	; 0xfe
 8005d3e:	eb02 030b 	add.w	r3, r2, fp
 8005d42:	46d8      	mov	r8, fp
 8005d44:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	2830      	cmp	r0, #48	; 0x30
 8005d4c:	d0f7      	beq.n	8005d3e <__gethex+0x1e>
 8005d4e:	f7ff ffd1 	bl	8005cf4 <__hexdig_fun>
 8005d52:	4604      	mov	r4, r0
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d138      	bne.n	8005dca <__gethex+0xaa>
 8005d58:	49a7      	ldr	r1, [pc, #668]	; (8005ff8 <__gethex+0x2d8>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	f7ff fe8c 	bl	8005a7a <strncmp>
 8005d62:	4606      	mov	r6, r0
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d169      	bne.n	8005e3c <__gethex+0x11c>
 8005d68:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005d6c:	465d      	mov	r5, fp
 8005d6e:	f7ff ffc1 	bl	8005cf4 <__hexdig_fun>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d064      	beq.n	8005e40 <__gethex+0x120>
 8005d76:	465a      	mov	r2, fp
 8005d78:	7810      	ldrb	r0, [r2, #0]
 8005d7a:	2830      	cmp	r0, #48	; 0x30
 8005d7c:	4690      	mov	r8, r2
 8005d7e:	f102 0201 	add.w	r2, r2, #1
 8005d82:	d0f9      	beq.n	8005d78 <__gethex+0x58>
 8005d84:	f7ff ffb6 	bl	8005cf4 <__hexdig_fun>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	fab0 f480 	clz	r4, r0
 8005d8e:	0964      	lsrs	r4, r4, #5
 8005d90:	465e      	mov	r6, fp
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	4642      	mov	r2, r8
 8005d96:	4615      	mov	r5, r2
 8005d98:	3201      	adds	r2, #1
 8005d9a:	7828      	ldrb	r0, [r5, #0]
 8005d9c:	f7ff ffaa 	bl	8005cf4 <__hexdig_fun>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d1f8      	bne.n	8005d96 <__gethex+0x76>
 8005da4:	4994      	ldr	r1, [pc, #592]	; (8005ff8 <__gethex+0x2d8>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	4628      	mov	r0, r5
 8005daa:	f7ff fe66 	bl	8005a7a <strncmp>
 8005dae:	b978      	cbnz	r0, 8005dd0 <__gethex+0xb0>
 8005db0:	b946      	cbnz	r6, 8005dc4 <__gethex+0xa4>
 8005db2:	1c6e      	adds	r6, r5, #1
 8005db4:	4632      	mov	r2, r6
 8005db6:	4615      	mov	r5, r2
 8005db8:	3201      	adds	r2, #1
 8005dba:	7828      	ldrb	r0, [r5, #0]
 8005dbc:	f7ff ff9a 	bl	8005cf4 <__hexdig_fun>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d1f8      	bne.n	8005db6 <__gethex+0x96>
 8005dc4:	1b73      	subs	r3, r6, r5
 8005dc6:	009e      	lsls	r6, r3, #2
 8005dc8:	e004      	b.n	8005dd4 <__gethex+0xb4>
 8005dca:	2400      	movs	r4, #0
 8005dcc:	4626      	mov	r6, r4
 8005dce:	e7e1      	b.n	8005d94 <__gethex+0x74>
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	d1f7      	bne.n	8005dc4 <__gethex+0xa4>
 8005dd4:	782b      	ldrb	r3, [r5, #0]
 8005dd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005dda:	2b50      	cmp	r3, #80	; 0x50
 8005ddc:	d13d      	bne.n	8005e5a <__gethex+0x13a>
 8005dde:	786b      	ldrb	r3, [r5, #1]
 8005de0:	2b2b      	cmp	r3, #43	; 0x2b
 8005de2:	d02f      	beq.n	8005e44 <__gethex+0x124>
 8005de4:	2b2d      	cmp	r3, #45	; 0x2d
 8005de6:	d031      	beq.n	8005e4c <__gethex+0x12c>
 8005de8:	1c69      	adds	r1, r5, #1
 8005dea:	f04f 0b00 	mov.w	fp, #0
 8005dee:	7808      	ldrb	r0, [r1, #0]
 8005df0:	f7ff ff80 	bl	8005cf4 <__hexdig_fun>
 8005df4:	1e42      	subs	r2, r0, #1
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	2a18      	cmp	r2, #24
 8005dfa:	d82e      	bhi.n	8005e5a <__gethex+0x13a>
 8005dfc:	f1a0 0210 	sub.w	r2, r0, #16
 8005e00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005e04:	f7ff ff76 	bl	8005cf4 <__hexdig_fun>
 8005e08:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8005e0c:	fa5f fc8c 	uxtb.w	ip, ip
 8005e10:	f1bc 0f18 	cmp.w	ip, #24
 8005e14:	d91d      	bls.n	8005e52 <__gethex+0x132>
 8005e16:	f1bb 0f00 	cmp.w	fp, #0
 8005e1a:	d000      	beq.n	8005e1e <__gethex+0xfe>
 8005e1c:	4252      	negs	r2, r2
 8005e1e:	4416      	add	r6, r2
 8005e20:	f8ca 1000 	str.w	r1, [sl]
 8005e24:	b1dc      	cbz	r4, 8005e5e <__gethex+0x13e>
 8005e26:	9b01      	ldr	r3, [sp, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	bf14      	ite	ne
 8005e2c:	f04f 0800 	movne.w	r8, #0
 8005e30:	f04f 0806 	moveq.w	r8, #6
 8005e34:	4640      	mov	r0, r8
 8005e36:	b005      	add	sp, #20
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3c:	4645      	mov	r5, r8
 8005e3e:	4626      	mov	r6, r4
 8005e40:	2401      	movs	r4, #1
 8005e42:	e7c7      	b.n	8005dd4 <__gethex+0xb4>
 8005e44:	f04f 0b00 	mov.w	fp, #0
 8005e48:	1ca9      	adds	r1, r5, #2
 8005e4a:	e7d0      	b.n	8005dee <__gethex+0xce>
 8005e4c:	f04f 0b01 	mov.w	fp, #1
 8005e50:	e7fa      	b.n	8005e48 <__gethex+0x128>
 8005e52:	230a      	movs	r3, #10
 8005e54:	fb03 0002 	mla	r0, r3, r2, r0
 8005e58:	e7d0      	b.n	8005dfc <__gethex+0xdc>
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	e7e0      	b.n	8005e20 <__gethex+0x100>
 8005e5e:	eba5 0308 	sub.w	r3, r5, r8
 8005e62:	3b01      	subs	r3, #1
 8005e64:	4621      	mov	r1, r4
 8005e66:	2b07      	cmp	r3, #7
 8005e68:	dc0a      	bgt.n	8005e80 <__gethex+0x160>
 8005e6a:	4648      	mov	r0, r9
 8005e6c:	f000 fb06 	bl	800647c <_Balloc>
 8005e70:	4604      	mov	r4, r0
 8005e72:	b940      	cbnz	r0, 8005e86 <__gethex+0x166>
 8005e74:	4b61      	ldr	r3, [pc, #388]	; (8005ffc <__gethex+0x2dc>)
 8005e76:	4602      	mov	r2, r0
 8005e78:	21e4      	movs	r1, #228	; 0xe4
 8005e7a:	4861      	ldr	r0, [pc, #388]	; (8006000 <__gethex+0x2e0>)
 8005e7c:	f001 f876 	bl	8006f6c <__assert_func>
 8005e80:	3101      	adds	r1, #1
 8005e82:	105b      	asrs	r3, r3, #1
 8005e84:	e7ef      	b.n	8005e66 <__gethex+0x146>
 8005e86:	f100 0a14 	add.w	sl, r0, #20
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	495a      	ldr	r1, [pc, #360]	; (8005ff8 <__gethex+0x2d8>)
 8005e8e:	f8cd a004 	str.w	sl, [sp, #4]
 8005e92:	469b      	mov	fp, r3
 8005e94:	45a8      	cmp	r8, r5
 8005e96:	d342      	bcc.n	8005f1e <__gethex+0x1fe>
 8005e98:	9801      	ldr	r0, [sp, #4]
 8005e9a:	f840 bb04 	str.w	fp, [r0], #4
 8005e9e:	eba0 000a 	sub.w	r0, r0, sl
 8005ea2:	1080      	asrs	r0, r0, #2
 8005ea4:	6120      	str	r0, [r4, #16]
 8005ea6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8005eaa:	4658      	mov	r0, fp
 8005eac:	f000 fbd8 	bl	8006660 <__hi0bits>
 8005eb0:	683d      	ldr	r5, [r7, #0]
 8005eb2:	eba8 0000 	sub.w	r0, r8, r0
 8005eb6:	42a8      	cmp	r0, r5
 8005eb8:	dd59      	ble.n	8005f6e <__gethex+0x24e>
 8005eba:	eba0 0805 	sub.w	r8, r0, r5
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 ff67 	bl	8006d94 <__any_on>
 8005ec6:	4683      	mov	fp, r0
 8005ec8:	b1b8      	cbz	r0, 8005efa <__gethex+0x1da>
 8005eca:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005ece:	1159      	asrs	r1, r3, #5
 8005ed0:	f003 021f 	and.w	r2, r3, #31
 8005ed4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005ed8:	f04f 0b01 	mov.w	fp, #1
 8005edc:	fa0b f202 	lsl.w	r2, fp, r2
 8005ee0:	420a      	tst	r2, r1
 8005ee2:	d00a      	beq.n	8005efa <__gethex+0x1da>
 8005ee4:	455b      	cmp	r3, fp
 8005ee6:	dd06      	ble.n	8005ef6 <__gethex+0x1d6>
 8005ee8:	f1a8 0102 	sub.w	r1, r8, #2
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 ff51 	bl	8006d94 <__any_on>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d138      	bne.n	8005f68 <__gethex+0x248>
 8005ef6:	f04f 0b02 	mov.w	fp, #2
 8005efa:	4641      	mov	r1, r8
 8005efc:	4620      	mov	r0, r4
 8005efe:	f7ff fea7 	bl	8005c50 <rshift>
 8005f02:	4446      	add	r6, r8
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	42b3      	cmp	r3, r6
 8005f08:	da41      	bge.n	8005f8e <__gethex+0x26e>
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4648      	mov	r0, r9
 8005f0e:	f000 faf5 	bl	80064fc <_Bfree>
 8005f12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f14:	2300      	movs	r3, #0
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8005f1c:	e78a      	b.n	8005e34 <__gethex+0x114>
 8005f1e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8005f22:	2a2e      	cmp	r2, #46	; 0x2e
 8005f24:	d014      	beq.n	8005f50 <__gethex+0x230>
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d106      	bne.n	8005f38 <__gethex+0x218>
 8005f2a:	9b01      	ldr	r3, [sp, #4]
 8005f2c:	f843 bb04 	str.w	fp, [r3], #4
 8005f30:	f04f 0b00 	mov.w	fp, #0
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	465b      	mov	r3, fp
 8005f38:	7828      	ldrb	r0, [r5, #0]
 8005f3a:	9303      	str	r3, [sp, #12]
 8005f3c:	f7ff feda 	bl	8005cf4 <__hexdig_fun>
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	f000 000f 	and.w	r0, r0, #15
 8005f46:	4098      	lsls	r0, r3
 8005f48:	ea4b 0b00 	orr.w	fp, fp, r0
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	e7a1      	b.n	8005e94 <__gethex+0x174>
 8005f50:	45a8      	cmp	r8, r5
 8005f52:	d8e8      	bhi.n	8005f26 <__gethex+0x206>
 8005f54:	2201      	movs	r2, #1
 8005f56:	4628      	mov	r0, r5
 8005f58:	9303      	str	r3, [sp, #12]
 8005f5a:	f7ff fd8e 	bl	8005a7a <strncmp>
 8005f5e:	4926      	ldr	r1, [pc, #152]	; (8005ff8 <__gethex+0x2d8>)
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d1df      	bne.n	8005f26 <__gethex+0x206>
 8005f66:	e795      	b.n	8005e94 <__gethex+0x174>
 8005f68:	f04f 0b03 	mov.w	fp, #3
 8005f6c:	e7c5      	b.n	8005efa <__gethex+0x1da>
 8005f6e:	da0b      	bge.n	8005f88 <__gethex+0x268>
 8005f70:	eba5 0800 	sub.w	r8, r5, r0
 8005f74:	4621      	mov	r1, r4
 8005f76:	4642      	mov	r2, r8
 8005f78:	4648      	mov	r0, r9
 8005f7a:	f000 fcd9 	bl	8006930 <__lshift>
 8005f7e:	eba6 0608 	sub.w	r6, r6, r8
 8005f82:	4604      	mov	r4, r0
 8005f84:	f100 0a14 	add.w	sl, r0, #20
 8005f88:	f04f 0b00 	mov.w	fp, #0
 8005f8c:	e7ba      	b.n	8005f04 <__gethex+0x1e4>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	42b3      	cmp	r3, r6
 8005f92:	dd73      	ble.n	800607c <__gethex+0x35c>
 8005f94:	1b9e      	subs	r6, r3, r6
 8005f96:	42b5      	cmp	r5, r6
 8005f98:	dc34      	bgt.n	8006004 <__gethex+0x2e4>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d023      	beq.n	8005fe8 <__gethex+0x2c8>
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d025      	beq.n	8005ff0 <__gethex+0x2d0>
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d115      	bne.n	8005fd4 <__gethex+0x2b4>
 8005fa8:	42b5      	cmp	r5, r6
 8005faa:	d113      	bne.n	8005fd4 <__gethex+0x2b4>
 8005fac:	2d01      	cmp	r5, #1
 8005fae:	d10b      	bne.n	8005fc8 <__gethex+0x2a8>
 8005fb0:	9a02      	ldr	r2, [sp, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	f8ca 3000 	str.w	r3, [sl]
 8005fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8005fc4:	601c      	str	r4, [r3, #0]
 8005fc6:	e735      	b.n	8005e34 <__gethex+0x114>
 8005fc8:	1e69      	subs	r1, r5, #1
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 fee2 	bl	8006d94 <__any_on>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d1ed      	bne.n	8005fb0 <__gethex+0x290>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4648      	mov	r0, r9
 8005fd8:	f000 fa90 	bl	80064fc <_Bfree>
 8005fdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8005fe6:	e725      	b.n	8005e34 <__gethex+0x114>
 8005fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f2      	bne.n	8005fd4 <__gethex+0x2b4>
 8005fee:	e7df      	b.n	8005fb0 <__gethex+0x290>
 8005ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1dc      	bne.n	8005fb0 <__gethex+0x290>
 8005ff6:	e7ed      	b.n	8005fd4 <__gethex+0x2b4>
 8005ff8:	080078f0 	.word	0x080078f0
 8005ffc:	08007958 	.word	0x08007958
 8006000:	08007969 	.word	0x08007969
 8006004:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8006008:	f1bb 0f00 	cmp.w	fp, #0
 800600c:	d133      	bne.n	8006076 <__gethex+0x356>
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	d004      	beq.n	800601e <__gethex+0x2fe>
 8006014:	4641      	mov	r1, r8
 8006016:	4620      	mov	r0, r4
 8006018:	f000 febc 	bl	8006d94 <__any_on>
 800601c:	4683      	mov	fp, r0
 800601e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8006022:	2301      	movs	r3, #1
 8006024:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006028:	f008 081f 	and.w	r8, r8, #31
 800602c:	fa03 f308 	lsl.w	r3, r3, r8
 8006030:	4213      	tst	r3, r2
 8006032:	4631      	mov	r1, r6
 8006034:	4620      	mov	r0, r4
 8006036:	bf18      	it	ne
 8006038:	f04b 0b02 	orrne.w	fp, fp, #2
 800603c:	1bad      	subs	r5, r5, r6
 800603e:	f7ff fe07 	bl	8005c50 <rshift>
 8006042:	687e      	ldr	r6, [r7, #4]
 8006044:	f04f 0802 	mov.w	r8, #2
 8006048:	f1bb 0f00 	cmp.w	fp, #0
 800604c:	d04a      	beq.n	80060e4 <__gethex+0x3c4>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d016      	beq.n	8006082 <__gethex+0x362>
 8006054:	2b03      	cmp	r3, #3
 8006056:	d018      	beq.n	800608a <__gethex+0x36a>
 8006058:	2b01      	cmp	r3, #1
 800605a:	d109      	bne.n	8006070 <__gethex+0x350>
 800605c:	f01b 0f02 	tst.w	fp, #2
 8006060:	d006      	beq.n	8006070 <__gethex+0x350>
 8006062:	f8da 3000 	ldr.w	r3, [sl]
 8006066:	ea4b 0b03 	orr.w	fp, fp, r3
 800606a:	f01b 0f01 	tst.w	fp, #1
 800606e:	d10f      	bne.n	8006090 <__gethex+0x370>
 8006070:	f048 0810 	orr.w	r8, r8, #16
 8006074:	e036      	b.n	80060e4 <__gethex+0x3c4>
 8006076:	f04f 0b01 	mov.w	fp, #1
 800607a:	e7d0      	b.n	800601e <__gethex+0x2fe>
 800607c:	f04f 0801 	mov.w	r8, #1
 8006080:	e7e2      	b.n	8006048 <__gethex+0x328>
 8006082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006084:	f1c3 0301 	rsb	r3, r3, #1
 8006088:	930f      	str	r3, [sp, #60]	; 0x3c
 800608a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0ef      	beq.n	8006070 <__gethex+0x350>
 8006090:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006094:	f104 0214 	add.w	r2, r4, #20
 8006098:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80060a2:	2300      	movs	r3, #0
 80060a4:	4694      	mov	ip, r2
 80060a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80060aa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80060ae:	d01e      	beq.n	80060ee <__gethex+0x3ce>
 80060b0:	3101      	adds	r1, #1
 80060b2:	f8cc 1000 	str.w	r1, [ip]
 80060b6:	f1b8 0f02 	cmp.w	r8, #2
 80060ba:	f104 0214 	add.w	r2, r4, #20
 80060be:	d13d      	bne.n	800613c <__gethex+0x41c>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	42ab      	cmp	r3, r5
 80060c6:	d10b      	bne.n	80060e0 <__gethex+0x3c0>
 80060c8:	1169      	asrs	r1, r5, #5
 80060ca:	2301      	movs	r3, #1
 80060cc:	f005 051f 	and.w	r5, r5, #31
 80060d0:	fa03 f505 	lsl.w	r5, r3, r5
 80060d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060d8:	421d      	tst	r5, r3
 80060da:	bf18      	it	ne
 80060dc:	f04f 0801 	movne.w	r8, #1
 80060e0:	f048 0820 	orr.w	r8, r8, #32
 80060e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060e6:	601c      	str	r4, [r3, #0]
 80060e8:	9b02      	ldr	r3, [sp, #8]
 80060ea:	601e      	str	r6, [r3, #0]
 80060ec:	e6a2      	b.n	8005e34 <__gethex+0x114>
 80060ee:	4290      	cmp	r0, r2
 80060f0:	f842 3c04 	str.w	r3, [r2, #-4]
 80060f4:	d8d6      	bhi.n	80060a4 <__gethex+0x384>
 80060f6:	68a2      	ldr	r2, [r4, #8]
 80060f8:	4593      	cmp	fp, r2
 80060fa:	db17      	blt.n	800612c <__gethex+0x40c>
 80060fc:	6861      	ldr	r1, [r4, #4]
 80060fe:	4648      	mov	r0, r9
 8006100:	3101      	adds	r1, #1
 8006102:	f000 f9bb 	bl	800647c <_Balloc>
 8006106:	4682      	mov	sl, r0
 8006108:	b918      	cbnz	r0, 8006112 <__gethex+0x3f2>
 800610a:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <__gethex+0x458>)
 800610c:	4602      	mov	r2, r0
 800610e:	2184      	movs	r1, #132	; 0x84
 8006110:	e6b3      	b.n	8005e7a <__gethex+0x15a>
 8006112:	6922      	ldr	r2, [r4, #16]
 8006114:	3202      	adds	r2, #2
 8006116:	f104 010c 	add.w	r1, r4, #12
 800611a:	0092      	lsls	r2, r2, #2
 800611c:	300c      	adds	r0, #12
 800611e:	f7ff fd32 	bl	8005b86 <memcpy>
 8006122:	4621      	mov	r1, r4
 8006124:	4648      	mov	r0, r9
 8006126:	f000 f9e9 	bl	80064fc <_Bfree>
 800612a:	4654      	mov	r4, sl
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	1c51      	adds	r1, r2, #1
 8006130:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006134:	6121      	str	r1, [r4, #16]
 8006136:	2101      	movs	r1, #1
 8006138:	6151      	str	r1, [r2, #20]
 800613a:	e7bc      	b.n	80060b6 <__gethex+0x396>
 800613c:	6921      	ldr	r1, [r4, #16]
 800613e:	4559      	cmp	r1, fp
 8006140:	dd0b      	ble.n	800615a <__gethex+0x43a>
 8006142:	2101      	movs	r1, #1
 8006144:	4620      	mov	r0, r4
 8006146:	f7ff fd83 	bl	8005c50 <rshift>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	3601      	adds	r6, #1
 800614e:	42b3      	cmp	r3, r6
 8006150:	f6ff aedb 	blt.w	8005f0a <__gethex+0x1ea>
 8006154:	f04f 0801 	mov.w	r8, #1
 8006158:	e7c2      	b.n	80060e0 <__gethex+0x3c0>
 800615a:	f015 051f 	ands.w	r5, r5, #31
 800615e:	d0f9      	beq.n	8006154 <__gethex+0x434>
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	441a      	add	r2, r3
 8006164:	f1c5 0520 	rsb	r5, r5, #32
 8006168:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800616c:	f000 fa78 	bl	8006660 <__hi0bits>
 8006170:	42a8      	cmp	r0, r5
 8006172:	dbe6      	blt.n	8006142 <__gethex+0x422>
 8006174:	e7ee      	b.n	8006154 <__gethex+0x434>
 8006176:	bf00      	nop
 8006178:	08007958 	.word	0x08007958

0800617c <L_shift>:
 800617c:	f1c2 0208 	rsb	r2, r2, #8
 8006180:	0092      	lsls	r2, r2, #2
 8006182:	b570      	push	{r4, r5, r6, lr}
 8006184:	f1c2 0620 	rsb	r6, r2, #32
 8006188:	6843      	ldr	r3, [r0, #4]
 800618a:	6804      	ldr	r4, [r0, #0]
 800618c:	fa03 f506 	lsl.w	r5, r3, r6
 8006190:	432c      	orrs	r4, r5
 8006192:	40d3      	lsrs	r3, r2
 8006194:	6004      	str	r4, [r0, #0]
 8006196:	f840 3f04 	str.w	r3, [r0, #4]!
 800619a:	4288      	cmp	r0, r1
 800619c:	d3f4      	bcc.n	8006188 <L_shift+0xc>
 800619e:	bd70      	pop	{r4, r5, r6, pc}

080061a0 <__match>:
 80061a0:	b530      	push	{r4, r5, lr}
 80061a2:	6803      	ldr	r3, [r0, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061aa:	b914      	cbnz	r4, 80061b2 <__match+0x12>
 80061ac:	6003      	str	r3, [r0, #0]
 80061ae:	2001      	movs	r0, #1
 80061b0:	bd30      	pop	{r4, r5, pc}
 80061b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80061ba:	2d19      	cmp	r5, #25
 80061bc:	bf98      	it	ls
 80061be:	3220      	addls	r2, #32
 80061c0:	42a2      	cmp	r2, r4
 80061c2:	d0f0      	beq.n	80061a6 <__match+0x6>
 80061c4:	2000      	movs	r0, #0
 80061c6:	e7f3      	b.n	80061b0 <__match+0x10>

080061c8 <__hexnan>:
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	680b      	ldr	r3, [r1, #0]
 80061ce:	6801      	ldr	r1, [r0, #0]
 80061d0:	115e      	asrs	r6, r3, #5
 80061d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80061d6:	f013 031f 	ands.w	r3, r3, #31
 80061da:	b087      	sub	sp, #28
 80061dc:	bf18      	it	ne
 80061de:	3604      	addne	r6, #4
 80061e0:	2500      	movs	r5, #0
 80061e2:	1f37      	subs	r7, r6, #4
 80061e4:	4682      	mov	sl, r0
 80061e6:	4690      	mov	r8, r2
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80061ee:	46b9      	mov	r9, r7
 80061f0:	463c      	mov	r4, r7
 80061f2:	9502      	str	r5, [sp, #8]
 80061f4:	46ab      	mov	fp, r5
 80061f6:	784a      	ldrb	r2, [r1, #1]
 80061f8:	1c4b      	adds	r3, r1, #1
 80061fa:	9303      	str	r3, [sp, #12]
 80061fc:	b342      	cbz	r2, 8006250 <__hexnan+0x88>
 80061fe:	4610      	mov	r0, r2
 8006200:	9105      	str	r1, [sp, #20]
 8006202:	9204      	str	r2, [sp, #16]
 8006204:	f7ff fd76 	bl	8005cf4 <__hexdig_fun>
 8006208:	2800      	cmp	r0, #0
 800620a:	d14f      	bne.n	80062ac <__hexnan+0xe4>
 800620c:	9a04      	ldr	r2, [sp, #16]
 800620e:	9905      	ldr	r1, [sp, #20]
 8006210:	2a20      	cmp	r2, #32
 8006212:	d818      	bhi.n	8006246 <__hexnan+0x7e>
 8006214:	9b02      	ldr	r3, [sp, #8]
 8006216:	459b      	cmp	fp, r3
 8006218:	dd13      	ble.n	8006242 <__hexnan+0x7a>
 800621a:	454c      	cmp	r4, r9
 800621c:	d206      	bcs.n	800622c <__hexnan+0x64>
 800621e:	2d07      	cmp	r5, #7
 8006220:	dc04      	bgt.n	800622c <__hexnan+0x64>
 8006222:	462a      	mov	r2, r5
 8006224:	4649      	mov	r1, r9
 8006226:	4620      	mov	r0, r4
 8006228:	f7ff ffa8 	bl	800617c <L_shift>
 800622c:	4544      	cmp	r4, r8
 800622e:	d950      	bls.n	80062d2 <__hexnan+0x10a>
 8006230:	2300      	movs	r3, #0
 8006232:	f1a4 0904 	sub.w	r9, r4, #4
 8006236:	f844 3c04 	str.w	r3, [r4, #-4]
 800623a:	f8cd b008 	str.w	fp, [sp, #8]
 800623e:	464c      	mov	r4, r9
 8006240:	461d      	mov	r5, r3
 8006242:	9903      	ldr	r1, [sp, #12]
 8006244:	e7d7      	b.n	80061f6 <__hexnan+0x2e>
 8006246:	2a29      	cmp	r2, #41	; 0x29
 8006248:	d155      	bne.n	80062f6 <__hexnan+0x12e>
 800624a:	3102      	adds	r1, #2
 800624c:	f8ca 1000 	str.w	r1, [sl]
 8006250:	f1bb 0f00 	cmp.w	fp, #0
 8006254:	d04f      	beq.n	80062f6 <__hexnan+0x12e>
 8006256:	454c      	cmp	r4, r9
 8006258:	d206      	bcs.n	8006268 <__hexnan+0xa0>
 800625a:	2d07      	cmp	r5, #7
 800625c:	dc04      	bgt.n	8006268 <__hexnan+0xa0>
 800625e:	462a      	mov	r2, r5
 8006260:	4649      	mov	r1, r9
 8006262:	4620      	mov	r0, r4
 8006264:	f7ff ff8a 	bl	800617c <L_shift>
 8006268:	4544      	cmp	r4, r8
 800626a:	d934      	bls.n	80062d6 <__hexnan+0x10e>
 800626c:	f1a8 0204 	sub.w	r2, r8, #4
 8006270:	4623      	mov	r3, r4
 8006272:	f853 1b04 	ldr.w	r1, [r3], #4
 8006276:	f842 1f04 	str.w	r1, [r2, #4]!
 800627a:	429f      	cmp	r7, r3
 800627c:	d2f9      	bcs.n	8006272 <__hexnan+0xaa>
 800627e:	1b3b      	subs	r3, r7, r4
 8006280:	f023 0303 	bic.w	r3, r3, #3
 8006284:	3304      	adds	r3, #4
 8006286:	3e03      	subs	r6, #3
 8006288:	3401      	adds	r4, #1
 800628a:	42a6      	cmp	r6, r4
 800628c:	bf38      	it	cc
 800628e:	2304      	movcc	r3, #4
 8006290:	4443      	add	r3, r8
 8006292:	2200      	movs	r2, #0
 8006294:	f843 2b04 	str.w	r2, [r3], #4
 8006298:	429f      	cmp	r7, r3
 800629a:	d2fb      	bcs.n	8006294 <__hexnan+0xcc>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	b91b      	cbnz	r3, 80062a8 <__hexnan+0xe0>
 80062a0:	4547      	cmp	r7, r8
 80062a2:	d126      	bne.n	80062f2 <__hexnan+0x12a>
 80062a4:	2301      	movs	r3, #1
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	2005      	movs	r0, #5
 80062aa:	e025      	b.n	80062f8 <__hexnan+0x130>
 80062ac:	3501      	adds	r5, #1
 80062ae:	2d08      	cmp	r5, #8
 80062b0:	f10b 0b01 	add.w	fp, fp, #1
 80062b4:	dd06      	ble.n	80062c4 <__hexnan+0xfc>
 80062b6:	4544      	cmp	r4, r8
 80062b8:	d9c3      	bls.n	8006242 <__hexnan+0x7a>
 80062ba:	2300      	movs	r3, #0
 80062bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80062c0:	2501      	movs	r5, #1
 80062c2:	3c04      	subs	r4, #4
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	f000 000f 	and.w	r0, r0, #15
 80062ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80062ce:	6020      	str	r0, [r4, #0]
 80062d0:	e7b7      	b.n	8006242 <__hexnan+0x7a>
 80062d2:	2508      	movs	r5, #8
 80062d4:	e7b5      	b.n	8006242 <__hexnan+0x7a>
 80062d6:	9b01      	ldr	r3, [sp, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0df      	beq.n	800629c <__hexnan+0xd4>
 80062dc:	f1c3 0320 	rsb	r3, r3, #32
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062e4:	40da      	lsrs	r2, r3
 80062e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80062ea:	4013      	ands	r3, r2
 80062ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80062f0:	e7d4      	b.n	800629c <__hexnan+0xd4>
 80062f2:	3f04      	subs	r7, #4
 80062f4:	e7d2      	b.n	800629c <__hexnan+0xd4>
 80062f6:	2004      	movs	r0, #4
 80062f8:	b007      	add	sp, #28
 80062fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006300 <sbrk_aligned>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4e0e      	ldr	r6, [pc, #56]	; (800633c <sbrk_aligned+0x3c>)
 8006304:	460c      	mov	r4, r1
 8006306:	6831      	ldr	r1, [r6, #0]
 8006308:	4605      	mov	r5, r0
 800630a:	b911      	cbnz	r1, 8006312 <sbrk_aligned+0x12>
 800630c:	f000 fe1e 	bl	8006f4c <_sbrk_r>
 8006310:	6030      	str	r0, [r6, #0]
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f000 fe19 	bl	8006f4c <_sbrk_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d00a      	beq.n	8006334 <sbrk_aligned+0x34>
 800631e:	1cc4      	adds	r4, r0, #3
 8006320:	f024 0403 	bic.w	r4, r4, #3
 8006324:	42a0      	cmp	r0, r4
 8006326:	d007      	beq.n	8006338 <sbrk_aligned+0x38>
 8006328:	1a21      	subs	r1, r4, r0
 800632a:	4628      	mov	r0, r5
 800632c:	f000 fe0e 	bl	8006f4c <_sbrk_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d101      	bne.n	8006338 <sbrk_aligned+0x38>
 8006334:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006338:	4620      	mov	r0, r4
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	20000524 	.word	0x20000524

08006340 <_malloc_r>:
 8006340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006344:	1ccd      	adds	r5, r1, #3
 8006346:	f025 0503 	bic.w	r5, r5, #3
 800634a:	3508      	adds	r5, #8
 800634c:	2d0c      	cmp	r5, #12
 800634e:	bf38      	it	cc
 8006350:	250c      	movcc	r5, #12
 8006352:	2d00      	cmp	r5, #0
 8006354:	4607      	mov	r7, r0
 8006356:	db01      	blt.n	800635c <_malloc_r+0x1c>
 8006358:	42a9      	cmp	r1, r5
 800635a:	d905      	bls.n	8006368 <_malloc_r+0x28>
 800635c:	230c      	movs	r3, #12
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	2600      	movs	r6, #0
 8006362:	4630      	mov	r0, r6
 8006364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006368:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800643c <_malloc_r+0xfc>
 800636c:	f000 f87a 	bl	8006464 <__malloc_lock>
 8006370:	f8d8 3000 	ldr.w	r3, [r8]
 8006374:	461c      	mov	r4, r3
 8006376:	bb5c      	cbnz	r4, 80063d0 <_malloc_r+0x90>
 8006378:	4629      	mov	r1, r5
 800637a:	4638      	mov	r0, r7
 800637c:	f7ff ffc0 	bl	8006300 <sbrk_aligned>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	4604      	mov	r4, r0
 8006384:	d155      	bne.n	8006432 <_malloc_r+0xf2>
 8006386:	f8d8 4000 	ldr.w	r4, [r8]
 800638a:	4626      	mov	r6, r4
 800638c:	2e00      	cmp	r6, #0
 800638e:	d145      	bne.n	800641c <_malloc_r+0xdc>
 8006390:	2c00      	cmp	r4, #0
 8006392:	d048      	beq.n	8006426 <_malloc_r+0xe6>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	4631      	mov	r1, r6
 8006398:	4638      	mov	r0, r7
 800639a:	eb04 0903 	add.w	r9, r4, r3
 800639e:	f000 fdd5 	bl	8006f4c <_sbrk_r>
 80063a2:	4581      	cmp	r9, r0
 80063a4:	d13f      	bne.n	8006426 <_malloc_r+0xe6>
 80063a6:	6821      	ldr	r1, [r4, #0]
 80063a8:	1a6d      	subs	r5, r5, r1
 80063aa:	4629      	mov	r1, r5
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff ffa7 	bl	8006300 <sbrk_aligned>
 80063b2:	3001      	adds	r0, #1
 80063b4:	d037      	beq.n	8006426 <_malloc_r+0xe6>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	442b      	add	r3, r5
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	f8d8 3000 	ldr.w	r3, [r8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d038      	beq.n	8006436 <_malloc_r+0xf6>
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	42a2      	cmp	r2, r4
 80063c8:	d12b      	bne.n	8006422 <_malloc_r+0xe2>
 80063ca:	2200      	movs	r2, #0
 80063cc:	605a      	str	r2, [r3, #4]
 80063ce:	e00f      	b.n	80063f0 <_malloc_r+0xb0>
 80063d0:	6822      	ldr	r2, [r4, #0]
 80063d2:	1b52      	subs	r2, r2, r5
 80063d4:	d41f      	bmi.n	8006416 <_malloc_r+0xd6>
 80063d6:	2a0b      	cmp	r2, #11
 80063d8:	d917      	bls.n	800640a <_malloc_r+0xca>
 80063da:	1961      	adds	r1, r4, r5
 80063dc:	42a3      	cmp	r3, r4
 80063de:	6025      	str	r5, [r4, #0]
 80063e0:	bf18      	it	ne
 80063e2:	6059      	strne	r1, [r3, #4]
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	bf08      	it	eq
 80063e8:	f8c8 1000 	streq.w	r1, [r8]
 80063ec:	5162      	str	r2, [r4, r5]
 80063ee:	604b      	str	r3, [r1, #4]
 80063f0:	4638      	mov	r0, r7
 80063f2:	f104 060b 	add.w	r6, r4, #11
 80063f6:	f000 f83b 	bl	8006470 <__malloc_unlock>
 80063fa:	f026 0607 	bic.w	r6, r6, #7
 80063fe:	1d23      	adds	r3, r4, #4
 8006400:	1af2      	subs	r2, r6, r3
 8006402:	d0ae      	beq.n	8006362 <_malloc_r+0x22>
 8006404:	1b9b      	subs	r3, r3, r6
 8006406:	50a3      	str	r3, [r4, r2]
 8006408:	e7ab      	b.n	8006362 <_malloc_r+0x22>
 800640a:	42a3      	cmp	r3, r4
 800640c:	6862      	ldr	r2, [r4, #4]
 800640e:	d1dd      	bne.n	80063cc <_malloc_r+0x8c>
 8006410:	f8c8 2000 	str.w	r2, [r8]
 8006414:	e7ec      	b.n	80063f0 <_malloc_r+0xb0>
 8006416:	4623      	mov	r3, r4
 8006418:	6864      	ldr	r4, [r4, #4]
 800641a:	e7ac      	b.n	8006376 <_malloc_r+0x36>
 800641c:	4634      	mov	r4, r6
 800641e:	6876      	ldr	r6, [r6, #4]
 8006420:	e7b4      	b.n	800638c <_malloc_r+0x4c>
 8006422:	4613      	mov	r3, r2
 8006424:	e7cc      	b.n	80063c0 <_malloc_r+0x80>
 8006426:	230c      	movs	r3, #12
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	4638      	mov	r0, r7
 800642c:	f000 f820 	bl	8006470 <__malloc_unlock>
 8006430:	e797      	b.n	8006362 <_malloc_r+0x22>
 8006432:	6025      	str	r5, [r4, #0]
 8006434:	e7dc      	b.n	80063f0 <_malloc_r+0xb0>
 8006436:	605b      	str	r3, [r3, #4]
 8006438:	deff      	udf	#255	; 0xff
 800643a:	bf00      	nop
 800643c:	20000520 	.word	0x20000520

08006440 <__ascii_mbtowc>:
 8006440:	b082      	sub	sp, #8
 8006442:	b901      	cbnz	r1, 8006446 <__ascii_mbtowc+0x6>
 8006444:	a901      	add	r1, sp, #4
 8006446:	b142      	cbz	r2, 800645a <__ascii_mbtowc+0x1a>
 8006448:	b14b      	cbz	r3, 800645e <__ascii_mbtowc+0x1e>
 800644a:	7813      	ldrb	r3, [r2, #0]
 800644c:	600b      	str	r3, [r1, #0]
 800644e:	7812      	ldrb	r2, [r2, #0]
 8006450:	1e10      	subs	r0, r2, #0
 8006452:	bf18      	it	ne
 8006454:	2001      	movne	r0, #1
 8006456:	b002      	add	sp, #8
 8006458:	4770      	bx	lr
 800645a:	4610      	mov	r0, r2
 800645c:	e7fb      	b.n	8006456 <__ascii_mbtowc+0x16>
 800645e:	f06f 0001 	mvn.w	r0, #1
 8006462:	e7f8      	b.n	8006456 <__ascii_mbtowc+0x16>

08006464 <__malloc_lock>:
 8006464:	4801      	ldr	r0, [pc, #4]	; (800646c <__malloc_lock+0x8>)
 8006466:	f7ff bb8c 	b.w	8005b82 <__retarget_lock_acquire_recursive>
 800646a:	bf00      	nop
 800646c:	2000051c 	.word	0x2000051c

08006470 <__malloc_unlock>:
 8006470:	4801      	ldr	r0, [pc, #4]	; (8006478 <__malloc_unlock+0x8>)
 8006472:	f7ff bb87 	b.w	8005b84 <__retarget_lock_release_recursive>
 8006476:	bf00      	nop
 8006478:	2000051c 	.word	0x2000051c

0800647c <_Balloc>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	69c6      	ldr	r6, [r0, #28]
 8006480:	4604      	mov	r4, r0
 8006482:	460d      	mov	r5, r1
 8006484:	b976      	cbnz	r6, 80064a4 <_Balloc+0x28>
 8006486:	2010      	movs	r0, #16
 8006488:	f000 fda4 	bl	8006fd4 <malloc>
 800648c:	4602      	mov	r2, r0
 800648e:	61e0      	str	r0, [r4, #28]
 8006490:	b920      	cbnz	r0, 800649c <_Balloc+0x20>
 8006492:	4b18      	ldr	r3, [pc, #96]	; (80064f4 <_Balloc+0x78>)
 8006494:	4818      	ldr	r0, [pc, #96]	; (80064f8 <_Balloc+0x7c>)
 8006496:	216b      	movs	r1, #107	; 0x6b
 8006498:	f000 fd68 	bl	8006f6c <__assert_func>
 800649c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064a0:	6006      	str	r6, [r0, #0]
 80064a2:	60c6      	str	r6, [r0, #12]
 80064a4:	69e6      	ldr	r6, [r4, #28]
 80064a6:	68f3      	ldr	r3, [r6, #12]
 80064a8:	b183      	cbz	r3, 80064cc <_Balloc+0x50>
 80064aa:	69e3      	ldr	r3, [r4, #28]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064b2:	b9b8      	cbnz	r0, 80064e4 <_Balloc+0x68>
 80064b4:	2101      	movs	r1, #1
 80064b6:	fa01 f605 	lsl.w	r6, r1, r5
 80064ba:	1d72      	adds	r2, r6, #5
 80064bc:	0092      	lsls	r2, r2, #2
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 fd72 	bl	8006fa8 <_calloc_r>
 80064c4:	b160      	cbz	r0, 80064e0 <_Balloc+0x64>
 80064c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064ca:	e00e      	b.n	80064ea <_Balloc+0x6e>
 80064cc:	2221      	movs	r2, #33	; 0x21
 80064ce:	2104      	movs	r1, #4
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 fd69 	bl	8006fa8 <_calloc_r>
 80064d6:	69e3      	ldr	r3, [r4, #28]
 80064d8:	60f0      	str	r0, [r6, #12]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e4      	bne.n	80064aa <_Balloc+0x2e>
 80064e0:	2000      	movs	r0, #0
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	6802      	ldr	r2, [r0, #0]
 80064e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064ea:	2300      	movs	r3, #0
 80064ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064f0:	e7f7      	b.n	80064e2 <_Balloc+0x66>
 80064f2:	bf00      	nop
 80064f4:	080079c9 	.word	0x080079c9
 80064f8:	080079e0 	.word	0x080079e0

080064fc <_Bfree>:
 80064fc:	b570      	push	{r4, r5, r6, lr}
 80064fe:	69c6      	ldr	r6, [r0, #28]
 8006500:	4605      	mov	r5, r0
 8006502:	460c      	mov	r4, r1
 8006504:	b976      	cbnz	r6, 8006524 <_Bfree+0x28>
 8006506:	2010      	movs	r0, #16
 8006508:	f000 fd64 	bl	8006fd4 <malloc>
 800650c:	4602      	mov	r2, r0
 800650e:	61e8      	str	r0, [r5, #28]
 8006510:	b920      	cbnz	r0, 800651c <_Bfree+0x20>
 8006512:	4b09      	ldr	r3, [pc, #36]	; (8006538 <_Bfree+0x3c>)
 8006514:	4809      	ldr	r0, [pc, #36]	; (800653c <_Bfree+0x40>)
 8006516:	218f      	movs	r1, #143	; 0x8f
 8006518:	f000 fd28 	bl	8006f6c <__assert_func>
 800651c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006520:	6006      	str	r6, [r0, #0]
 8006522:	60c6      	str	r6, [r0, #12]
 8006524:	b13c      	cbz	r4, 8006536 <_Bfree+0x3a>
 8006526:	69eb      	ldr	r3, [r5, #28]
 8006528:	6862      	ldr	r2, [r4, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006530:	6021      	str	r1, [r4, #0]
 8006532:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	080079c9 	.word	0x080079c9
 800653c:	080079e0 	.word	0x080079e0

08006540 <__multadd>:
 8006540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	690d      	ldr	r5, [r1, #16]
 8006546:	4607      	mov	r7, r0
 8006548:	460c      	mov	r4, r1
 800654a:	461e      	mov	r6, r3
 800654c:	f101 0c14 	add.w	ip, r1, #20
 8006550:	2000      	movs	r0, #0
 8006552:	f8dc 3000 	ldr.w	r3, [ip]
 8006556:	b299      	uxth	r1, r3
 8006558:	fb02 6101 	mla	r1, r2, r1, r6
 800655c:	0c1e      	lsrs	r6, r3, #16
 800655e:	0c0b      	lsrs	r3, r1, #16
 8006560:	fb02 3306 	mla	r3, r2, r6, r3
 8006564:	b289      	uxth	r1, r1
 8006566:	3001      	adds	r0, #1
 8006568:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800656c:	4285      	cmp	r5, r0
 800656e:	f84c 1b04 	str.w	r1, [ip], #4
 8006572:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006576:	dcec      	bgt.n	8006552 <__multadd+0x12>
 8006578:	b30e      	cbz	r6, 80065be <__multadd+0x7e>
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	42ab      	cmp	r3, r5
 800657e:	dc19      	bgt.n	80065b4 <__multadd+0x74>
 8006580:	6861      	ldr	r1, [r4, #4]
 8006582:	4638      	mov	r0, r7
 8006584:	3101      	adds	r1, #1
 8006586:	f7ff ff79 	bl	800647c <_Balloc>
 800658a:	4680      	mov	r8, r0
 800658c:	b928      	cbnz	r0, 800659a <__multadd+0x5a>
 800658e:	4602      	mov	r2, r0
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <__multadd+0x84>)
 8006592:	480d      	ldr	r0, [pc, #52]	; (80065c8 <__multadd+0x88>)
 8006594:	21ba      	movs	r1, #186	; 0xba
 8006596:	f000 fce9 	bl	8006f6c <__assert_func>
 800659a:	6922      	ldr	r2, [r4, #16]
 800659c:	3202      	adds	r2, #2
 800659e:	f104 010c 	add.w	r1, r4, #12
 80065a2:	0092      	lsls	r2, r2, #2
 80065a4:	300c      	adds	r0, #12
 80065a6:	f7ff faee 	bl	8005b86 <memcpy>
 80065aa:	4621      	mov	r1, r4
 80065ac:	4638      	mov	r0, r7
 80065ae:	f7ff ffa5 	bl	80064fc <_Bfree>
 80065b2:	4644      	mov	r4, r8
 80065b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065b8:	3501      	adds	r5, #1
 80065ba:	615e      	str	r6, [r3, #20]
 80065bc:	6125      	str	r5, [r4, #16]
 80065be:	4620      	mov	r0, r4
 80065c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c4:	08007958 	.word	0x08007958
 80065c8:	080079e0 	.word	0x080079e0

080065cc <__s2b>:
 80065cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d0:	460c      	mov	r4, r1
 80065d2:	4615      	mov	r5, r2
 80065d4:	461f      	mov	r7, r3
 80065d6:	2209      	movs	r2, #9
 80065d8:	3308      	adds	r3, #8
 80065da:	4606      	mov	r6, r0
 80065dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80065e0:	2100      	movs	r1, #0
 80065e2:	2201      	movs	r2, #1
 80065e4:	429a      	cmp	r2, r3
 80065e6:	db09      	blt.n	80065fc <__s2b+0x30>
 80065e8:	4630      	mov	r0, r6
 80065ea:	f7ff ff47 	bl	800647c <_Balloc>
 80065ee:	b940      	cbnz	r0, 8006602 <__s2b+0x36>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b19      	ldr	r3, [pc, #100]	; (8006658 <__s2b+0x8c>)
 80065f4:	4819      	ldr	r0, [pc, #100]	; (800665c <__s2b+0x90>)
 80065f6:	21d3      	movs	r1, #211	; 0xd3
 80065f8:	f000 fcb8 	bl	8006f6c <__assert_func>
 80065fc:	0052      	lsls	r2, r2, #1
 80065fe:	3101      	adds	r1, #1
 8006600:	e7f0      	b.n	80065e4 <__s2b+0x18>
 8006602:	9b08      	ldr	r3, [sp, #32]
 8006604:	6143      	str	r3, [r0, #20]
 8006606:	2d09      	cmp	r5, #9
 8006608:	f04f 0301 	mov.w	r3, #1
 800660c:	6103      	str	r3, [r0, #16]
 800660e:	dd16      	ble.n	800663e <__s2b+0x72>
 8006610:	f104 0909 	add.w	r9, r4, #9
 8006614:	46c8      	mov	r8, r9
 8006616:	442c      	add	r4, r5
 8006618:	f818 3b01 	ldrb.w	r3, [r8], #1
 800661c:	4601      	mov	r1, r0
 800661e:	3b30      	subs	r3, #48	; 0x30
 8006620:	220a      	movs	r2, #10
 8006622:	4630      	mov	r0, r6
 8006624:	f7ff ff8c 	bl	8006540 <__multadd>
 8006628:	45a0      	cmp	r8, r4
 800662a:	d1f5      	bne.n	8006618 <__s2b+0x4c>
 800662c:	f1a5 0408 	sub.w	r4, r5, #8
 8006630:	444c      	add	r4, r9
 8006632:	1b2d      	subs	r5, r5, r4
 8006634:	1963      	adds	r3, r4, r5
 8006636:	42bb      	cmp	r3, r7
 8006638:	db04      	blt.n	8006644 <__s2b+0x78>
 800663a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800663e:	340a      	adds	r4, #10
 8006640:	2509      	movs	r5, #9
 8006642:	e7f6      	b.n	8006632 <__s2b+0x66>
 8006644:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006648:	4601      	mov	r1, r0
 800664a:	3b30      	subs	r3, #48	; 0x30
 800664c:	220a      	movs	r2, #10
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ff76 	bl	8006540 <__multadd>
 8006654:	e7ee      	b.n	8006634 <__s2b+0x68>
 8006656:	bf00      	nop
 8006658:	08007958 	.word	0x08007958
 800665c:	080079e0 	.word	0x080079e0

08006660 <__hi0bits>:
 8006660:	0c03      	lsrs	r3, r0, #16
 8006662:	041b      	lsls	r3, r3, #16
 8006664:	b9d3      	cbnz	r3, 800669c <__hi0bits+0x3c>
 8006666:	0400      	lsls	r0, r0, #16
 8006668:	2310      	movs	r3, #16
 800666a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800666e:	bf04      	itt	eq
 8006670:	0200      	lsleq	r0, r0, #8
 8006672:	3308      	addeq	r3, #8
 8006674:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006678:	bf04      	itt	eq
 800667a:	0100      	lsleq	r0, r0, #4
 800667c:	3304      	addeq	r3, #4
 800667e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006682:	bf04      	itt	eq
 8006684:	0080      	lsleq	r0, r0, #2
 8006686:	3302      	addeq	r3, #2
 8006688:	2800      	cmp	r0, #0
 800668a:	db05      	blt.n	8006698 <__hi0bits+0x38>
 800668c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006690:	f103 0301 	add.w	r3, r3, #1
 8006694:	bf08      	it	eq
 8006696:	2320      	moveq	r3, #32
 8006698:	4618      	mov	r0, r3
 800669a:	4770      	bx	lr
 800669c:	2300      	movs	r3, #0
 800669e:	e7e4      	b.n	800666a <__hi0bits+0xa>

080066a0 <__lo0bits>:
 80066a0:	6803      	ldr	r3, [r0, #0]
 80066a2:	f013 0207 	ands.w	r2, r3, #7
 80066a6:	d00c      	beq.n	80066c2 <__lo0bits+0x22>
 80066a8:	07d9      	lsls	r1, r3, #31
 80066aa:	d422      	bmi.n	80066f2 <__lo0bits+0x52>
 80066ac:	079a      	lsls	r2, r3, #30
 80066ae:	bf49      	itett	mi
 80066b0:	085b      	lsrmi	r3, r3, #1
 80066b2:	089b      	lsrpl	r3, r3, #2
 80066b4:	6003      	strmi	r3, [r0, #0]
 80066b6:	2201      	movmi	r2, #1
 80066b8:	bf5c      	itt	pl
 80066ba:	6003      	strpl	r3, [r0, #0]
 80066bc:	2202      	movpl	r2, #2
 80066be:	4610      	mov	r0, r2
 80066c0:	4770      	bx	lr
 80066c2:	b299      	uxth	r1, r3
 80066c4:	b909      	cbnz	r1, 80066ca <__lo0bits+0x2a>
 80066c6:	0c1b      	lsrs	r3, r3, #16
 80066c8:	2210      	movs	r2, #16
 80066ca:	b2d9      	uxtb	r1, r3
 80066cc:	b909      	cbnz	r1, 80066d2 <__lo0bits+0x32>
 80066ce:	3208      	adds	r2, #8
 80066d0:	0a1b      	lsrs	r3, r3, #8
 80066d2:	0719      	lsls	r1, r3, #28
 80066d4:	bf04      	itt	eq
 80066d6:	091b      	lsreq	r3, r3, #4
 80066d8:	3204      	addeq	r2, #4
 80066da:	0799      	lsls	r1, r3, #30
 80066dc:	bf04      	itt	eq
 80066de:	089b      	lsreq	r3, r3, #2
 80066e0:	3202      	addeq	r2, #2
 80066e2:	07d9      	lsls	r1, r3, #31
 80066e4:	d403      	bmi.n	80066ee <__lo0bits+0x4e>
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	f102 0201 	add.w	r2, r2, #1
 80066ec:	d003      	beq.n	80066f6 <__lo0bits+0x56>
 80066ee:	6003      	str	r3, [r0, #0]
 80066f0:	e7e5      	b.n	80066be <__lo0bits+0x1e>
 80066f2:	2200      	movs	r2, #0
 80066f4:	e7e3      	b.n	80066be <__lo0bits+0x1e>
 80066f6:	2220      	movs	r2, #32
 80066f8:	e7e1      	b.n	80066be <__lo0bits+0x1e>
	...

080066fc <__i2b>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	460c      	mov	r4, r1
 8006700:	2101      	movs	r1, #1
 8006702:	f7ff febb 	bl	800647c <_Balloc>
 8006706:	4602      	mov	r2, r0
 8006708:	b928      	cbnz	r0, 8006716 <__i2b+0x1a>
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <__i2b+0x24>)
 800670c:	4805      	ldr	r0, [pc, #20]	; (8006724 <__i2b+0x28>)
 800670e:	f240 1145 	movw	r1, #325	; 0x145
 8006712:	f000 fc2b 	bl	8006f6c <__assert_func>
 8006716:	2301      	movs	r3, #1
 8006718:	6144      	str	r4, [r0, #20]
 800671a:	6103      	str	r3, [r0, #16]
 800671c:	bd10      	pop	{r4, pc}
 800671e:	bf00      	nop
 8006720:	08007958 	.word	0x08007958
 8006724:	080079e0 	.word	0x080079e0

08006728 <__multiply>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	4691      	mov	r9, r2
 800672e:	690a      	ldr	r2, [r1, #16]
 8006730:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006734:	429a      	cmp	r2, r3
 8006736:	bfb8      	it	lt
 8006738:	460b      	movlt	r3, r1
 800673a:	460c      	mov	r4, r1
 800673c:	bfbc      	itt	lt
 800673e:	464c      	movlt	r4, r9
 8006740:	4699      	movlt	r9, r3
 8006742:	6927      	ldr	r7, [r4, #16]
 8006744:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006748:	68a3      	ldr	r3, [r4, #8]
 800674a:	6861      	ldr	r1, [r4, #4]
 800674c:	eb07 060a 	add.w	r6, r7, sl
 8006750:	42b3      	cmp	r3, r6
 8006752:	b085      	sub	sp, #20
 8006754:	bfb8      	it	lt
 8006756:	3101      	addlt	r1, #1
 8006758:	f7ff fe90 	bl	800647c <_Balloc>
 800675c:	b930      	cbnz	r0, 800676c <__multiply+0x44>
 800675e:	4602      	mov	r2, r0
 8006760:	4b44      	ldr	r3, [pc, #272]	; (8006874 <__multiply+0x14c>)
 8006762:	4845      	ldr	r0, [pc, #276]	; (8006878 <__multiply+0x150>)
 8006764:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006768:	f000 fc00 	bl	8006f6c <__assert_func>
 800676c:	f100 0514 	add.w	r5, r0, #20
 8006770:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006774:	462b      	mov	r3, r5
 8006776:	2200      	movs	r2, #0
 8006778:	4543      	cmp	r3, r8
 800677a:	d321      	bcc.n	80067c0 <__multiply+0x98>
 800677c:	f104 0314 	add.w	r3, r4, #20
 8006780:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006784:	f109 0314 	add.w	r3, r9, #20
 8006788:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800678c:	9202      	str	r2, [sp, #8]
 800678e:	1b3a      	subs	r2, r7, r4
 8006790:	3a15      	subs	r2, #21
 8006792:	f022 0203 	bic.w	r2, r2, #3
 8006796:	3204      	adds	r2, #4
 8006798:	f104 0115 	add.w	r1, r4, #21
 800679c:	428f      	cmp	r7, r1
 800679e:	bf38      	it	cc
 80067a0:	2204      	movcc	r2, #4
 80067a2:	9201      	str	r2, [sp, #4]
 80067a4:	9a02      	ldr	r2, [sp, #8]
 80067a6:	9303      	str	r3, [sp, #12]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d80c      	bhi.n	80067c6 <__multiply+0x9e>
 80067ac:	2e00      	cmp	r6, #0
 80067ae:	dd03      	ble.n	80067b8 <__multiply+0x90>
 80067b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d05b      	beq.n	8006870 <__multiply+0x148>
 80067b8:	6106      	str	r6, [r0, #16]
 80067ba:	b005      	add	sp, #20
 80067bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c0:	f843 2b04 	str.w	r2, [r3], #4
 80067c4:	e7d8      	b.n	8006778 <__multiply+0x50>
 80067c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80067ca:	f1ba 0f00 	cmp.w	sl, #0
 80067ce:	d024      	beq.n	800681a <__multiply+0xf2>
 80067d0:	f104 0e14 	add.w	lr, r4, #20
 80067d4:	46a9      	mov	r9, r5
 80067d6:	f04f 0c00 	mov.w	ip, #0
 80067da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80067de:	f8d9 1000 	ldr.w	r1, [r9]
 80067e2:	fa1f fb82 	uxth.w	fp, r2
 80067e6:	b289      	uxth	r1, r1
 80067e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80067ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80067f0:	f8d9 2000 	ldr.w	r2, [r9]
 80067f4:	4461      	add	r1, ip
 80067f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80067fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006802:	b289      	uxth	r1, r1
 8006804:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006808:	4577      	cmp	r7, lr
 800680a:	f849 1b04 	str.w	r1, [r9], #4
 800680e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006812:	d8e2      	bhi.n	80067da <__multiply+0xb2>
 8006814:	9a01      	ldr	r2, [sp, #4]
 8006816:	f845 c002 	str.w	ip, [r5, r2]
 800681a:	9a03      	ldr	r2, [sp, #12]
 800681c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006820:	3304      	adds	r3, #4
 8006822:	f1b9 0f00 	cmp.w	r9, #0
 8006826:	d021      	beq.n	800686c <__multiply+0x144>
 8006828:	6829      	ldr	r1, [r5, #0]
 800682a:	f104 0c14 	add.w	ip, r4, #20
 800682e:	46ae      	mov	lr, r5
 8006830:	f04f 0a00 	mov.w	sl, #0
 8006834:	f8bc b000 	ldrh.w	fp, [ip]
 8006838:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800683c:	fb09 220b 	mla	r2, r9, fp, r2
 8006840:	4452      	add	r2, sl
 8006842:	b289      	uxth	r1, r1
 8006844:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006848:	f84e 1b04 	str.w	r1, [lr], #4
 800684c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006850:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006854:	f8be 1000 	ldrh.w	r1, [lr]
 8006858:	fb09 110a 	mla	r1, r9, sl, r1
 800685c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006860:	4567      	cmp	r7, ip
 8006862:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006866:	d8e5      	bhi.n	8006834 <__multiply+0x10c>
 8006868:	9a01      	ldr	r2, [sp, #4]
 800686a:	50a9      	str	r1, [r5, r2]
 800686c:	3504      	adds	r5, #4
 800686e:	e799      	b.n	80067a4 <__multiply+0x7c>
 8006870:	3e01      	subs	r6, #1
 8006872:	e79b      	b.n	80067ac <__multiply+0x84>
 8006874:	08007958 	.word	0x08007958
 8006878:	080079e0 	.word	0x080079e0

0800687c <__pow5mult>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	4615      	mov	r5, r2
 8006882:	f012 0203 	ands.w	r2, r2, #3
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	d007      	beq.n	800689c <__pow5mult+0x20>
 800688c:	4c25      	ldr	r4, [pc, #148]	; (8006924 <__pow5mult+0xa8>)
 800688e:	3a01      	subs	r2, #1
 8006890:	2300      	movs	r3, #0
 8006892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006896:	f7ff fe53 	bl	8006540 <__multadd>
 800689a:	4607      	mov	r7, r0
 800689c:	10ad      	asrs	r5, r5, #2
 800689e:	d03d      	beq.n	800691c <__pow5mult+0xa0>
 80068a0:	69f4      	ldr	r4, [r6, #28]
 80068a2:	b97c      	cbnz	r4, 80068c4 <__pow5mult+0x48>
 80068a4:	2010      	movs	r0, #16
 80068a6:	f000 fb95 	bl	8006fd4 <malloc>
 80068aa:	4602      	mov	r2, r0
 80068ac:	61f0      	str	r0, [r6, #28]
 80068ae:	b928      	cbnz	r0, 80068bc <__pow5mult+0x40>
 80068b0:	4b1d      	ldr	r3, [pc, #116]	; (8006928 <__pow5mult+0xac>)
 80068b2:	481e      	ldr	r0, [pc, #120]	; (800692c <__pow5mult+0xb0>)
 80068b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80068b8:	f000 fb58 	bl	8006f6c <__assert_func>
 80068bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068c0:	6004      	str	r4, [r0, #0]
 80068c2:	60c4      	str	r4, [r0, #12]
 80068c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80068c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068cc:	b94c      	cbnz	r4, 80068e2 <__pow5mult+0x66>
 80068ce:	f240 2171 	movw	r1, #625	; 0x271
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7ff ff12 	bl	80066fc <__i2b>
 80068d8:	2300      	movs	r3, #0
 80068da:	f8c8 0008 	str.w	r0, [r8, #8]
 80068de:	4604      	mov	r4, r0
 80068e0:	6003      	str	r3, [r0, #0]
 80068e2:	f04f 0900 	mov.w	r9, #0
 80068e6:	07eb      	lsls	r3, r5, #31
 80068e8:	d50a      	bpl.n	8006900 <__pow5mult+0x84>
 80068ea:	4639      	mov	r1, r7
 80068ec:	4622      	mov	r2, r4
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7ff ff1a 	bl	8006728 <__multiply>
 80068f4:	4639      	mov	r1, r7
 80068f6:	4680      	mov	r8, r0
 80068f8:	4630      	mov	r0, r6
 80068fa:	f7ff fdff 	bl	80064fc <_Bfree>
 80068fe:	4647      	mov	r7, r8
 8006900:	106d      	asrs	r5, r5, #1
 8006902:	d00b      	beq.n	800691c <__pow5mult+0xa0>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	b938      	cbnz	r0, 8006918 <__pow5mult+0x9c>
 8006908:	4622      	mov	r2, r4
 800690a:	4621      	mov	r1, r4
 800690c:	4630      	mov	r0, r6
 800690e:	f7ff ff0b 	bl	8006728 <__multiply>
 8006912:	6020      	str	r0, [r4, #0]
 8006914:	f8c0 9000 	str.w	r9, [r0]
 8006918:	4604      	mov	r4, r0
 800691a:	e7e4      	b.n	80068e6 <__pow5mult+0x6a>
 800691c:	4638      	mov	r0, r7
 800691e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006922:	bf00      	nop
 8006924:	08007b30 	.word	0x08007b30
 8006928:	080079c9 	.word	0x080079c9
 800692c:	080079e0 	.word	0x080079e0

08006930 <__lshift>:
 8006930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	460c      	mov	r4, r1
 8006936:	6849      	ldr	r1, [r1, #4]
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800693e:	68a3      	ldr	r3, [r4, #8]
 8006940:	4607      	mov	r7, r0
 8006942:	4691      	mov	r9, r2
 8006944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006948:	f108 0601 	add.w	r6, r8, #1
 800694c:	42b3      	cmp	r3, r6
 800694e:	db0b      	blt.n	8006968 <__lshift+0x38>
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff fd93 	bl	800647c <_Balloc>
 8006956:	4605      	mov	r5, r0
 8006958:	b948      	cbnz	r0, 800696e <__lshift+0x3e>
 800695a:	4602      	mov	r2, r0
 800695c:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <__lshift+0xd0>)
 800695e:	4829      	ldr	r0, [pc, #164]	; (8006a04 <__lshift+0xd4>)
 8006960:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006964:	f000 fb02 	bl	8006f6c <__assert_func>
 8006968:	3101      	adds	r1, #1
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	e7ee      	b.n	800694c <__lshift+0x1c>
 800696e:	2300      	movs	r3, #0
 8006970:	f100 0114 	add.w	r1, r0, #20
 8006974:	f100 0210 	add.w	r2, r0, #16
 8006978:	4618      	mov	r0, r3
 800697a:	4553      	cmp	r3, sl
 800697c:	db33      	blt.n	80069e6 <__lshift+0xb6>
 800697e:	6920      	ldr	r0, [r4, #16]
 8006980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006984:	f104 0314 	add.w	r3, r4, #20
 8006988:	f019 091f 	ands.w	r9, r9, #31
 800698c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006990:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006994:	d02b      	beq.n	80069ee <__lshift+0xbe>
 8006996:	f1c9 0e20 	rsb	lr, r9, #32
 800699a:	468a      	mov	sl, r1
 800699c:	2200      	movs	r2, #0
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	fa00 f009 	lsl.w	r0, r0, r9
 80069a4:	4310      	orrs	r0, r2
 80069a6:	f84a 0b04 	str.w	r0, [sl], #4
 80069aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ae:	459c      	cmp	ip, r3
 80069b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80069b4:	d8f3      	bhi.n	800699e <__lshift+0x6e>
 80069b6:	ebac 0304 	sub.w	r3, ip, r4
 80069ba:	3b15      	subs	r3, #21
 80069bc:	f023 0303 	bic.w	r3, r3, #3
 80069c0:	3304      	adds	r3, #4
 80069c2:	f104 0015 	add.w	r0, r4, #21
 80069c6:	4584      	cmp	ip, r0
 80069c8:	bf38      	it	cc
 80069ca:	2304      	movcc	r3, #4
 80069cc:	50ca      	str	r2, [r1, r3]
 80069ce:	b10a      	cbz	r2, 80069d4 <__lshift+0xa4>
 80069d0:	f108 0602 	add.w	r6, r8, #2
 80069d4:	3e01      	subs	r6, #1
 80069d6:	4638      	mov	r0, r7
 80069d8:	612e      	str	r6, [r5, #16]
 80069da:	4621      	mov	r1, r4
 80069dc:	f7ff fd8e 	bl	80064fc <_Bfree>
 80069e0:	4628      	mov	r0, r5
 80069e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80069ea:	3301      	adds	r3, #1
 80069ec:	e7c5      	b.n	800697a <__lshift+0x4a>
 80069ee:	3904      	subs	r1, #4
 80069f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80069f8:	459c      	cmp	ip, r3
 80069fa:	d8f9      	bhi.n	80069f0 <__lshift+0xc0>
 80069fc:	e7ea      	b.n	80069d4 <__lshift+0xa4>
 80069fe:	bf00      	nop
 8006a00:	08007958 	.word	0x08007958
 8006a04:	080079e0 	.word	0x080079e0

08006a08 <__mcmp>:
 8006a08:	b530      	push	{r4, r5, lr}
 8006a0a:	6902      	ldr	r2, [r0, #16]
 8006a0c:	690c      	ldr	r4, [r1, #16]
 8006a0e:	1b12      	subs	r2, r2, r4
 8006a10:	d10e      	bne.n	8006a30 <__mcmp+0x28>
 8006a12:	f100 0314 	add.w	r3, r0, #20
 8006a16:	3114      	adds	r1, #20
 8006a18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a28:	42a5      	cmp	r5, r4
 8006a2a:	d003      	beq.n	8006a34 <__mcmp+0x2c>
 8006a2c:	d305      	bcc.n	8006a3a <__mcmp+0x32>
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4610      	mov	r0, r2
 8006a32:	bd30      	pop	{r4, r5, pc}
 8006a34:	4283      	cmp	r3, r0
 8006a36:	d3f3      	bcc.n	8006a20 <__mcmp+0x18>
 8006a38:	e7fa      	b.n	8006a30 <__mcmp+0x28>
 8006a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a3e:	e7f7      	b.n	8006a30 <__mcmp+0x28>

08006a40 <__mdiff>:
 8006a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	460c      	mov	r4, r1
 8006a46:	4606      	mov	r6, r0
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4690      	mov	r8, r2
 8006a4e:	f7ff ffdb 	bl	8006a08 <__mcmp>
 8006a52:	1e05      	subs	r5, r0, #0
 8006a54:	d110      	bne.n	8006a78 <__mdiff+0x38>
 8006a56:	4629      	mov	r1, r5
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff fd0f 	bl	800647c <_Balloc>
 8006a5e:	b930      	cbnz	r0, 8006a6e <__mdiff+0x2e>
 8006a60:	4b3a      	ldr	r3, [pc, #232]	; (8006b4c <__mdiff+0x10c>)
 8006a62:	4602      	mov	r2, r0
 8006a64:	f240 2137 	movw	r1, #567	; 0x237
 8006a68:	4839      	ldr	r0, [pc, #228]	; (8006b50 <__mdiff+0x110>)
 8006a6a:	f000 fa7f 	bl	8006f6c <__assert_func>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	bfa4      	itt	ge
 8006a7a:	4643      	movge	r3, r8
 8006a7c:	46a0      	movge	r8, r4
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a84:	bfa6      	itte	ge
 8006a86:	461c      	movge	r4, r3
 8006a88:	2500      	movge	r5, #0
 8006a8a:	2501      	movlt	r5, #1
 8006a8c:	f7ff fcf6 	bl	800647c <_Balloc>
 8006a90:	b920      	cbnz	r0, 8006a9c <__mdiff+0x5c>
 8006a92:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <__mdiff+0x10c>)
 8006a94:	4602      	mov	r2, r0
 8006a96:	f240 2145 	movw	r1, #581	; 0x245
 8006a9a:	e7e5      	b.n	8006a68 <__mdiff+0x28>
 8006a9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006aa0:	6926      	ldr	r6, [r4, #16]
 8006aa2:	60c5      	str	r5, [r0, #12]
 8006aa4:	f104 0914 	add.w	r9, r4, #20
 8006aa8:	f108 0514 	add.w	r5, r8, #20
 8006aac:	f100 0e14 	add.w	lr, r0, #20
 8006ab0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ab4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ab8:	f108 0210 	add.w	r2, r8, #16
 8006abc:	46f2      	mov	sl, lr
 8006abe:	2100      	movs	r1, #0
 8006ac0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ac4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ac8:	fa11 f88b 	uxtah	r8, r1, fp
 8006acc:	b299      	uxth	r1, r3
 8006ace:	0c1b      	lsrs	r3, r3, #16
 8006ad0:	eba8 0801 	sub.w	r8, r8, r1
 8006ad4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ad8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006adc:	fa1f f888 	uxth.w	r8, r8
 8006ae0:	1419      	asrs	r1, r3, #16
 8006ae2:	454e      	cmp	r6, r9
 8006ae4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ae8:	f84a 3b04 	str.w	r3, [sl], #4
 8006aec:	d8e8      	bhi.n	8006ac0 <__mdiff+0x80>
 8006aee:	1b33      	subs	r3, r6, r4
 8006af0:	3b15      	subs	r3, #21
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	3304      	adds	r3, #4
 8006af8:	3415      	adds	r4, #21
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	bf38      	it	cc
 8006afe:	2304      	movcc	r3, #4
 8006b00:	441d      	add	r5, r3
 8006b02:	4473      	add	r3, lr
 8006b04:	469e      	mov	lr, r3
 8006b06:	462e      	mov	r6, r5
 8006b08:	4566      	cmp	r6, ip
 8006b0a:	d30e      	bcc.n	8006b2a <__mdiff+0xea>
 8006b0c:	f10c 0203 	add.w	r2, ip, #3
 8006b10:	1b52      	subs	r2, r2, r5
 8006b12:	f022 0203 	bic.w	r2, r2, #3
 8006b16:	3d03      	subs	r5, #3
 8006b18:	45ac      	cmp	ip, r5
 8006b1a:	bf38      	it	cc
 8006b1c:	2200      	movcc	r2, #0
 8006b1e:	4413      	add	r3, r2
 8006b20:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006b24:	b17a      	cbz	r2, 8006b46 <__mdiff+0x106>
 8006b26:	6107      	str	r7, [r0, #16]
 8006b28:	e7a4      	b.n	8006a74 <__mdiff+0x34>
 8006b2a:	f856 8b04 	ldr.w	r8, [r6], #4
 8006b2e:	fa11 f288 	uxtah	r2, r1, r8
 8006b32:	1414      	asrs	r4, r2, #16
 8006b34:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b38:	b292      	uxth	r2, r2
 8006b3a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b3e:	f84e 2b04 	str.w	r2, [lr], #4
 8006b42:	1421      	asrs	r1, r4, #16
 8006b44:	e7e0      	b.n	8006b08 <__mdiff+0xc8>
 8006b46:	3f01      	subs	r7, #1
 8006b48:	e7ea      	b.n	8006b20 <__mdiff+0xe0>
 8006b4a:	bf00      	nop
 8006b4c:	08007958 	.word	0x08007958
 8006b50:	080079e0 	.word	0x080079e0

08006b54 <__ulp>:
 8006b54:	b082      	sub	sp, #8
 8006b56:	ed8d 0b00 	vstr	d0, [sp]
 8006b5a:	9a01      	ldr	r2, [sp, #4]
 8006b5c:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <__ulp+0x48>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dc08      	bgt.n	8006b7a <__ulp+0x26>
 8006b68:	425b      	negs	r3, r3
 8006b6a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006b6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b72:	da04      	bge.n	8006b7e <__ulp+0x2a>
 8006b74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b78:	4113      	asrs	r3, r2
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	e008      	b.n	8006b90 <__ulp+0x3c>
 8006b7e:	f1a2 0314 	sub.w	r3, r2, #20
 8006b82:	2b1e      	cmp	r3, #30
 8006b84:	bfda      	itte	le
 8006b86:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006b8a:	40da      	lsrle	r2, r3
 8006b8c:	2201      	movgt	r2, #1
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	ec41 0b10 	vmov	d0, r0, r1
 8006b98:	b002      	add	sp, #8
 8006b9a:	4770      	bx	lr
 8006b9c:	7ff00000 	.word	0x7ff00000

08006ba0 <__b2d>:
 8006ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba4:	6906      	ldr	r6, [r0, #16]
 8006ba6:	f100 0814 	add.w	r8, r0, #20
 8006baa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006bae:	1f37      	subs	r7, r6, #4
 8006bb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f7ff fd53 	bl	8006660 <__hi0bits>
 8006bba:	f1c0 0320 	rsb	r3, r0, #32
 8006bbe:	280a      	cmp	r0, #10
 8006bc0:	600b      	str	r3, [r1, #0]
 8006bc2:	491b      	ldr	r1, [pc, #108]	; (8006c30 <__b2d+0x90>)
 8006bc4:	dc15      	bgt.n	8006bf2 <__b2d+0x52>
 8006bc6:	f1c0 0c0b 	rsb	ip, r0, #11
 8006bca:	fa22 f30c 	lsr.w	r3, r2, ip
 8006bce:	45b8      	cmp	r8, r7
 8006bd0:	ea43 0501 	orr.w	r5, r3, r1
 8006bd4:	bf34      	ite	cc
 8006bd6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006bda:	2300      	movcs	r3, #0
 8006bdc:	3015      	adds	r0, #21
 8006bde:	fa02 f000 	lsl.w	r0, r2, r0
 8006be2:	fa23 f30c 	lsr.w	r3, r3, ip
 8006be6:	4303      	orrs	r3, r0
 8006be8:	461c      	mov	r4, r3
 8006bea:	ec45 4b10 	vmov	d0, r4, r5
 8006bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf2:	45b8      	cmp	r8, r7
 8006bf4:	bf3a      	itte	cc
 8006bf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006bfa:	f1a6 0708 	subcc.w	r7, r6, #8
 8006bfe:	2300      	movcs	r3, #0
 8006c00:	380b      	subs	r0, #11
 8006c02:	d012      	beq.n	8006c2a <__b2d+0x8a>
 8006c04:	f1c0 0120 	rsb	r1, r0, #32
 8006c08:	fa23 f401 	lsr.w	r4, r3, r1
 8006c0c:	4082      	lsls	r2, r0
 8006c0e:	4322      	orrs	r2, r4
 8006c10:	4547      	cmp	r7, r8
 8006c12:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006c16:	bf8c      	ite	hi
 8006c18:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006c1c:	2200      	movls	r2, #0
 8006c1e:	4083      	lsls	r3, r0
 8006c20:	40ca      	lsrs	r2, r1
 8006c22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006c26:	4313      	orrs	r3, r2
 8006c28:	e7de      	b.n	8006be8 <__b2d+0x48>
 8006c2a:	ea42 0501 	orr.w	r5, r2, r1
 8006c2e:	e7db      	b.n	8006be8 <__b2d+0x48>
 8006c30:	3ff00000 	.word	0x3ff00000

08006c34 <__d2b>:
 8006c34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	460f      	mov	r7, r1
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	ec59 8b10 	vmov	r8, r9, d0
 8006c40:	4616      	mov	r6, r2
 8006c42:	f7ff fc1b 	bl	800647c <_Balloc>
 8006c46:	4604      	mov	r4, r0
 8006c48:	b930      	cbnz	r0, 8006c58 <__d2b+0x24>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <__d2b+0xac>)
 8006c4e:	4825      	ldr	r0, [pc, #148]	; (8006ce4 <__d2b+0xb0>)
 8006c50:	f240 310f 	movw	r1, #783	; 0x30f
 8006c54:	f000 f98a 	bl	8006f6c <__assert_func>
 8006c58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c60:	bb2d      	cbnz	r5, 8006cae <__d2b+0x7a>
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	f1b8 0300 	subs.w	r3, r8, #0
 8006c68:	d026      	beq.n	8006cb8 <__d2b+0x84>
 8006c6a:	4668      	mov	r0, sp
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	f7ff fd17 	bl	80066a0 <__lo0bits>
 8006c72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c76:	b1e8      	cbz	r0, 8006cb4 <__d2b+0x80>
 8006c78:	f1c0 0320 	rsb	r3, r0, #32
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	430b      	orrs	r3, r1
 8006c82:	40c2      	lsrs	r2, r0
 8006c84:	6163      	str	r3, [r4, #20]
 8006c86:	9201      	str	r2, [sp, #4]
 8006c88:	9b01      	ldr	r3, [sp, #4]
 8006c8a:	61a3      	str	r3, [r4, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	bf14      	ite	ne
 8006c90:	2202      	movne	r2, #2
 8006c92:	2201      	moveq	r2, #1
 8006c94:	6122      	str	r2, [r4, #16]
 8006c96:	b1bd      	cbz	r5, 8006cc8 <__d2b+0x94>
 8006c98:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c9c:	4405      	add	r5, r0
 8006c9e:	603d      	str	r5, [r7, #0]
 8006ca0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ca4:	6030      	str	r0, [r6, #0]
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	b003      	add	sp, #12
 8006caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cb2:	e7d6      	b.n	8006c62 <__d2b+0x2e>
 8006cb4:	6161      	str	r1, [r4, #20]
 8006cb6:	e7e7      	b.n	8006c88 <__d2b+0x54>
 8006cb8:	a801      	add	r0, sp, #4
 8006cba:	f7ff fcf1 	bl	80066a0 <__lo0bits>
 8006cbe:	9b01      	ldr	r3, [sp, #4]
 8006cc0:	6163      	str	r3, [r4, #20]
 8006cc2:	3020      	adds	r0, #32
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	e7e5      	b.n	8006c94 <__d2b+0x60>
 8006cc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ccc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cd0:	6038      	str	r0, [r7, #0]
 8006cd2:	6918      	ldr	r0, [r3, #16]
 8006cd4:	f7ff fcc4 	bl	8006660 <__hi0bits>
 8006cd8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006cdc:	e7e2      	b.n	8006ca4 <__d2b+0x70>
 8006cde:	bf00      	nop
 8006ce0:	08007958 	.word	0x08007958
 8006ce4:	080079e0 	.word	0x080079e0

08006ce8 <__ratio>:
 8006ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	4688      	mov	r8, r1
 8006cee:	4669      	mov	r1, sp
 8006cf0:	4681      	mov	r9, r0
 8006cf2:	f7ff ff55 	bl	8006ba0 <__b2d>
 8006cf6:	a901      	add	r1, sp, #4
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	ec55 4b10 	vmov	r4, r5, d0
 8006cfe:	f7ff ff4f 	bl	8006ba0 <__b2d>
 8006d02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d06:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006d0a:	eba3 0c02 	sub.w	ip, r3, r2
 8006d0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006d18:	ec51 0b10 	vmov	r0, r1, d0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bfd6      	itet	le
 8006d20:	460a      	movle	r2, r1
 8006d22:	462a      	movgt	r2, r5
 8006d24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d28:	468b      	mov	fp, r1
 8006d2a:	462f      	mov	r7, r5
 8006d2c:	bfd4      	ite	le
 8006d2e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006d32:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006d36:	4620      	mov	r0, r4
 8006d38:	ee10 2a10 	vmov	r2, s0
 8006d3c:	465b      	mov	r3, fp
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 fd9c 	bl	800087c <__aeabi_ddiv>
 8006d44:	ec41 0b10 	vmov	d0, r0, r1
 8006d48:	b003      	add	sp, #12
 8006d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d4e <__copybits>:
 8006d4e:	3901      	subs	r1, #1
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	1149      	asrs	r1, r1, #5
 8006d54:	6914      	ldr	r4, [r2, #16]
 8006d56:	3101      	adds	r1, #1
 8006d58:	f102 0314 	add.w	r3, r2, #20
 8006d5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d64:	1f05      	subs	r5, r0, #4
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	d30c      	bcc.n	8006d84 <__copybits+0x36>
 8006d6a:	1aa3      	subs	r3, r4, r2
 8006d6c:	3b11      	subs	r3, #17
 8006d6e:	f023 0303 	bic.w	r3, r3, #3
 8006d72:	3211      	adds	r2, #17
 8006d74:	42a2      	cmp	r2, r4
 8006d76:	bf88      	it	hi
 8006d78:	2300      	movhi	r3, #0
 8006d7a:	4418      	add	r0, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4288      	cmp	r0, r1
 8006d80:	d305      	bcc.n	8006d8e <__copybits+0x40>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d88:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d8c:	e7eb      	b.n	8006d66 <__copybits+0x18>
 8006d8e:	f840 3b04 	str.w	r3, [r0], #4
 8006d92:	e7f4      	b.n	8006d7e <__copybits+0x30>

08006d94 <__any_on>:
 8006d94:	f100 0214 	add.w	r2, r0, #20
 8006d98:	6900      	ldr	r0, [r0, #16]
 8006d9a:	114b      	asrs	r3, r1, #5
 8006d9c:	4298      	cmp	r0, r3
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	db11      	blt.n	8006dc6 <__any_on+0x32>
 8006da2:	dd0a      	ble.n	8006dba <__any_on+0x26>
 8006da4:	f011 011f 	ands.w	r1, r1, #31
 8006da8:	d007      	beq.n	8006dba <__any_on+0x26>
 8006daa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006dae:	fa24 f001 	lsr.w	r0, r4, r1
 8006db2:	fa00 f101 	lsl.w	r1, r0, r1
 8006db6:	428c      	cmp	r4, r1
 8006db8:	d10b      	bne.n	8006dd2 <__any_on+0x3e>
 8006dba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d803      	bhi.n	8006dca <__any_on+0x36>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	bd10      	pop	{r4, pc}
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	e7f7      	b.n	8006dba <__any_on+0x26>
 8006dca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006dce:	2900      	cmp	r1, #0
 8006dd0:	d0f5      	beq.n	8006dbe <__any_on+0x2a>
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	e7f6      	b.n	8006dc4 <__any_on+0x30>

08006dd6 <__ascii_wctomb>:
 8006dd6:	b149      	cbz	r1, 8006dec <__ascii_wctomb+0x16>
 8006dd8:	2aff      	cmp	r2, #255	; 0xff
 8006dda:	bf85      	ittet	hi
 8006ddc:	238a      	movhi	r3, #138	; 0x8a
 8006dde:	6003      	strhi	r3, [r0, #0]
 8006de0:	700a      	strbls	r2, [r1, #0]
 8006de2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006de6:	bf98      	it	ls
 8006de8:	2001      	movls	r0, #1
 8006dea:	4770      	bx	lr
 8006dec:	4608      	mov	r0, r1
 8006dee:	4770      	bx	lr

08006df0 <__sflush_r>:
 8006df0:	898a      	ldrh	r2, [r1, #12]
 8006df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df6:	4605      	mov	r5, r0
 8006df8:	0710      	lsls	r0, r2, #28
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	d458      	bmi.n	8006eb0 <__sflush_r+0xc0>
 8006dfe:	684b      	ldr	r3, [r1, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	dc05      	bgt.n	8006e10 <__sflush_r+0x20>
 8006e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dc02      	bgt.n	8006e10 <__sflush_r+0x20>
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	d0f9      	beq.n	8006e0a <__sflush_r+0x1a>
 8006e16:	2300      	movs	r3, #0
 8006e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e1c:	682f      	ldr	r7, [r5, #0]
 8006e1e:	6a21      	ldr	r1, [r4, #32]
 8006e20:	602b      	str	r3, [r5, #0]
 8006e22:	d032      	beq.n	8006e8a <__sflush_r+0x9a>
 8006e24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	075a      	lsls	r2, r3, #29
 8006e2a:	d505      	bpl.n	8006e38 <__sflush_r+0x48>
 8006e2c:	6863      	ldr	r3, [r4, #4]
 8006e2e:	1ac0      	subs	r0, r0, r3
 8006e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e32:	b10b      	cbz	r3, 8006e38 <__sflush_r+0x48>
 8006e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e36:	1ac0      	subs	r0, r0, r3
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e3e:	6a21      	ldr	r1, [r4, #32]
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b0      	blx	r6
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	d106      	bne.n	8006e58 <__sflush_r+0x68>
 8006e4a:	6829      	ldr	r1, [r5, #0]
 8006e4c:	291d      	cmp	r1, #29
 8006e4e:	d82b      	bhi.n	8006ea8 <__sflush_r+0xb8>
 8006e50:	4a29      	ldr	r2, [pc, #164]	; (8006ef8 <__sflush_r+0x108>)
 8006e52:	410a      	asrs	r2, r1
 8006e54:	07d6      	lsls	r6, r2, #31
 8006e56:	d427      	bmi.n	8006ea8 <__sflush_r+0xb8>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	6062      	str	r2, [r4, #4]
 8006e5c:	04d9      	lsls	r1, r3, #19
 8006e5e:	6922      	ldr	r2, [r4, #16]
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	d504      	bpl.n	8006e6e <__sflush_r+0x7e>
 8006e64:	1c42      	adds	r2, r0, #1
 8006e66:	d101      	bne.n	8006e6c <__sflush_r+0x7c>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b903      	cbnz	r3, 8006e6e <__sflush_r+0x7e>
 8006e6c:	6560      	str	r0, [r4, #84]	; 0x54
 8006e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e70:	602f      	str	r7, [r5, #0]
 8006e72:	2900      	cmp	r1, #0
 8006e74:	d0c9      	beq.n	8006e0a <__sflush_r+0x1a>
 8006e76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	d002      	beq.n	8006e84 <__sflush_r+0x94>
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f7fe fe9a 	bl	8005bb8 <_free_r>
 8006e84:	2000      	movs	r0, #0
 8006e86:	6360      	str	r0, [r4, #52]	; 0x34
 8006e88:	e7c0      	b.n	8006e0c <__sflush_r+0x1c>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b0      	blx	r6
 8006e90:	1c41      	adds	r1, r0, #1
 8006e92:	d1c8      	bne.n	8006e26 <__sflush_r+0x36>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0c5      	beq.n	8006e26 <__sflush_r+0x36>
 8006e9a:	2b1d      	cmp	r3, #29
 8006e9c:	d001      	beq.n	8006ea2 <__sflush_r+0xb2>
 8006e9e:	2b16      	cmp	r3, #22
 8006ea0:	d101      	bne.n	8006ea6 <__sflush_r+0xb6>
 8006ea2:	602f      	str	r7, [r5, #0]
 8006ea4:	e7b1      	b.n	8006e0a <__sflush_r+0x1a>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	e7ad      	b.n	8006e0c <__sflush_r+0x1c>
 8006eb0:	690f      	ldr	r7, [r1, #16]
 8006eb2:	2f00      	cmp	r7, #0
 8006eb4:	d0a9      	beq.n	8006e0a <__sflush_r+0x1a>
 8006eb6:	0793      	lsls	r3, r2, #30
 8006eb8:	680e      	ldr	r6, [r1, #0]
 8006eba:	bf08      	it	eq
 8006ebc:	694b      	ldreq	r3, [r1, #20]
 8006ebe:	600f      	str	r7, [r1, #0]
 8006ec0:	bf18      	it	ne
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	eba6 0807 	sub.w	r8, r6, r7
 8006ec8:	608b      	str	r3, [r1, #8]
 8006eca:	f1b8 0f00 	cmp.w	r8, #0
 8006ece:	dd9c      	ble.n	8006e0a <__sflush_r+0x1a>
 8006ed0:	6a21      	ldr	r1, [r4, #32]
 8006ed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ed4:	4643      	mov	r3, r8
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b0      	blx	r6
 8006edc:	2800      	cmp	r0, #0
 8006ede:	dc06      	bgt.n	8006eee <__sflush_r+0xfe>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eec:	e78e      	b.n	8006e0c <__sflush_r+0x1c>
 8006eee:	4407      	add	r7, r0
 8006ef0:	eba8 0800 	sub.w	r8, r8, r0
 8006ef4:	e7e9      	b.n	8006eca <__sflush_r+0xda>
 8006ef6:	bf00      	nop
 8006ef8:	dfbffffe 	.word	0xdfbffffe

08006efc <_fflush_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	690b      	ldr	r3, [r1, #16]
 8006f00:	4605      	mov	r5, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	b913      	cbnz	r3, 8006f0c <_fflush_r+0x10>
 8006f06:	2500      	movs	r5, #0
 8006f08:	4628      	mov	r0, r5
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	b118      	cbz	r0, 8006f16 <_fflush_r+0x1a>
 8006f0e:	6a03      	ldr	r3, [r0, #32]
 8006f10:	b90b      	cbnz	r3, 8006f16 <_fflush_r+0x1a>
 8006f12:	f7fe fd31 	bl	8005978 <__sinit>
 8006f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f3      	beq.n	8006f06 <_fflush_r+0xa>
 8006f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f20:	07d0      	lsls	r0, r2, #31
 8006f22:	d404      	bmi.n	8006f2e <_fflush_r+0x32>
 8006f24:	0599      	lsls	r1, r3, #22
 8006f26:	d402      	bmi.n	8006f2e <_fflush_r+0x32>
 8006f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f2a:	f7fe fe2a 	bl	8005b82 <__retarget_lock_acquire_recursive>
 8006f2e:	4628      	mov	r0, r5
 8006f30:	4621      	mov	r1, r4
 8006f32:	f7ff ff5d 	bl	8006df0 <__sflush_r>
 8006f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f38:	07da      	lsls	r2, r3, #31
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	d4e4      	bmi.n	8006f08 <_fflush_r+0xc>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	059b      	lsls	r3, r3, #22
 8006f42:	d4e1      	bmi.n	8006f08 <_fflush_r+0xc>
 8006f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f46:	f7fe fe1d 	bl	8005b84 <__retarget_lock_release_recursive>
 8006f4a:	e7dd      	b.n	8006f08 <_fflush_r+0xc>

08006f4c <_sbrk_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d06      	ldr	r5, [pc, #24]	; (8006f68 <_sbrk_r+0x1c>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	602b      	str	r3, [r5, #0]
 8006f58:	f7fa ff7a 	bl	8001e50 <_sbrk>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_sbrk_r+0x1a>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_sbrk_r+0x1a>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	20000518 	.word	0x20000518

08006f6c <__assert_func>:
 8006f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f6e:	4614      	mov	r4, r2
 8006f70:	461a      	mov	r2, r3
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <__assert_func+0x2c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4605      	mov	r5, r0
 8006f78:	68d8      	ldr	r0, [r3, #12]
 8006f7a:	b14c      	cbz	r4, 8006f90 <__assert_func+0x24>
 8006f7c:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <__assert_func+0x30>)
 8006f7e:	9100      	str	r1, [sp, #0]
 8006f80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f84:	4906      	ldr	r1, [pc, #24]	; (8006fa0 <__assert_func+0x34>)
 8006f86:	462b      	mov	r3, r5
 8006f88:	f000 f82c 	bl	8006fe4 <fiprintf>
 8006f8c:	f000 f83c 	bl	8007008 <abort>
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <__assert_func+0x38>)
 8006f92:	461c      	mov	r4, r3
 8006f94:	e7f3      	b.n	8006f7e <__assert_func+0x12>
 8006f96:	bf00      	nop
 8006f98:	200001d0 	.word	0x200001d0
 8006f9c:	08007c3d 	.word	0x08007c3d
 8006fa0:	08007c4a 	.word	0x08007c4a
 8006fa4:	08007c78 	.word	0x08007c78

08006fa8 <_calloc_r>:
 8006fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006faa:	fba1 2402 	umull	r2, r4, r1, r2
 8006fae:	b94c      	cbnz	r4, 8006fc4 <_calloc_r+0x1c>
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	9201      	str	r2, [sp, #4]
 8006fb4:	f7ff f9c4 	bl	8006340 <_malloc_r>
 8006fb8:	9a01      	ldr	r2, [sp, #4]
 8006fba:	4605      	mov	r5, r0
 8006fbc:	b930      	cbnz	r0, 8006fcc <_calloc_r+0x24>
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	b003      	add	sp, #12
 8006fc2:	bd30      	pop	{r4, r5, pc}
 8006fc4:	220c      	movs	r2, #12
 8006fc6:	6002      	str	r2, [r0, #0]
 8006fc8:	2500      	movs	r5, #0
 8006fca:	e7f8      	b.n	8006fbe <_calloc_r+0x16>
 8006fcc:	4621      	mov	r1, r4
 8006fce:	f7fe fd4c 	bl	8005a6a <memset>
 8006fd2:	e7f4      	b.n	8006fbe <_calloc_r+0x16>

08006fd4 <malloc>:
 8006fd4:	4b02      	ldr	r3, [pc, #8]	; (8006fe0 <malloc+0xc>)
 8006fd6:	4601      	mov	r1, r0
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	f7ff b9b1 	b.w	8006340 <_malloc_r>
 8006fde:	bf00      	nop
 8006fe0:	200001d0 	.word	0x200001d0

08006fe4 <fiprintf>:
 8006fe4:	b40e      	push	{r1, r2, r3}
 8006fe6:	b503      	push	{r0, r1, lr}
 8006fe8:	4601      	mov	r1, r0
 8006fea:	ab03      	add	r3, sp, #12
 8006fec:	4805      	ldr	r0, [pc, #20]	; (8007004 <fiprintf+0x20>)
 8006fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff2:	6800      	ldr	r0, [r0, #0]
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	f000 f837 	bl	8007068 <_vfiprintf_r>
 8006ffa:	b002      	add	sp, #8
 8006ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007000:	b003      	add	sp, #12
 8007002:	4770      	bx	lr
 8007004:	200001d0 	.word	0x200001d0

08007008 <abort>:
 8007008:	b508      	push	{r3, lr}
 800700a:	2006      	movs	r0, #6
 800700c:	f000 fb94 	bl	8007738 <raise>
 8007010:	2001      	movs	r0, #1
 8007012:	f7fa fea5 	bl	8001d60 <_exit>

08007016 <__sfputc_r>:
 8007016:	6893      	ldr	r3, [r2, #8]
 8007018:	3b01      	subs	r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	b410      	push	{r4}
 800701e:	6093      	str	r3, [r2, #8]
 8007020:	da08      	bge.n	8007034 <__sfputc_r+0x1e>
 8007022:	6994      	ldr	r4, [r2, #24]
 8007024:	42a3      	cmp	r3, r4
 8007026:	db01      	blt.n	800702c <__sfputc_r+0x16>
 8007028:	290a      	cmp	r1, #10
 800702a:	d103      	bne.n	8007034 <__sfputc_r+0x1e>
 800702c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007030:	f000 bac4 	b.w	80075bc <__swbuf_r>
 8007034:	6813      	ldr	r3, [r2, #0]
 8007036:	1c58      	adds	r0, r3, #1
 8007038:	6010      	str	r0, [r2, #0]
 800703a:	7019      	strb	r1, [r3, #0]
 800703c:	4608      	mov	r0, r1
 800703e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007042:	4770      	bx	lr

08007044 <__sfputs_r>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	4606      	mov	r6, r0
 8007048:	460f      	mov	r7, r1
 800704a:	4614      	mov	r4, r2
 800704c:	18d5      	adds	r5, r2, r3
 800704e:	42ac      	cmp	r4, r5
 8007050:	d101      	bne.n	8007056 <__sfputs_r+0x12>
 8007052:	2000      	movs	r0, #0
 8007054:	e007      	b.n	8007066 <__sfputs_r+0x22>
 8007056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705a:	463a      	mov	r2, r7
 800705c:	4630      	mov	r0, r6
 800705e:	f7ff ffda 	bl	8007016 <__sfputc_r>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d1f3      	bne.n	800704e <__sfputs_r+0xa>
 8007066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007068 <_vfiprintf_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	460d      	mov	r5, r1
 800706e:	b09d      	sub	sp, #116	; 0x74
 8007070:	4614      	mov	r4, r2
 8007072:	4698      	mov	r8, r3
 8007074:	4606      	mov	r6, r0
 8007076:	b118      	cbz	r0, 8007080 <_vfiprintf_r+0x18>
 8007078:	6a03      	ldr	r3, [r0, #32]
 800707a:	b90b      	cbnz	r3, 8007080 <_vfiprintf_r+0x18>
 800707c:	f7fe fc7c 	bl	8005978 <__sinit>
 8007080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007082:	07d9      	lsls	r1, r3, #31
 8007084:	d405      	bmi.n	8007092 <_vfiprintf_r+0x2a>
 8007086:	89ab      	ldrh	r3, [r5, #12]
 8007088:	059a      	lsls	r2, r3, #22
 800708a:	d402      	bmi.n	8007092 <_vfiprintf_r+0x2a>
 800708c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800708e:	f7fe fd78 	bl	8005b82 <__retarget_lock_acquire_recursive>
 8007092:	89ab      	ldrh	r3, [r5, #12]
 8007094:	071b      	lsls	r3, r3, #28
 8007096:	d501      	bpl.n	800709c <_vfiprintf_r+0x34>
 8007098:	692b      	ldr	r3, [r5, #16]
 800709a:	b99b      	cbnz	r3, 80070c4 <_vfiprintf_r+0x5c>
 800709c:	4629      	mov	r1, r5
 800709e:	4630      	mov	r0, r6
 80070a0:	f000 faca 	bl	8007638 <__swsetup_r>
 80070a4:	b170      	cbz	r0, 80070c4 <_vfiprintf_r+0x5c>
 80070a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070a8:	07dc      	lsls	r4, r3, #31
 80070aa:	d504      	bpl.n	80070b6 <_vfiprintf_r+0x4e>
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b0:	b01d      	add	sp, #116	; 0x74
 80070b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	0598      	lsls	r0, r3, #22
 80070ba:	d4f7      	bmi.n	80070ac <_vfiprintf_r+0x44>
 80070bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070be:	f7fe fd61 	bl	8005b84 <__retarget_lock_release_recursive>
 80070c2:	e7f3      	b.n	80070ac <_vfiprintf_r+0x44>
 80070c4:	2300      	movs	r3, #0
 80070c6:	9309      	str	r3, [sp, #36]	; 0x24
 80070c8:	2320      	movs	r3, #32
 80070ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80070d2:	2330      	movs	r3, #48	; 0x30
 80070d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007288 <_vfiprintf_r+0x220>
 80070d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070dc:	f04f 0901 	mov.w	r9, #1
 80070e0:	4623      	mov	r3, r4
 80070e2:	469a      	mov	sl, r3
 80070e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070e8:	b10a      	cbz	r2, 80070ee <_vfiprintf_r+0x86>
 80070ea:	2a25      	cmp	r2, #37	; 0x25
 80070ec:	d1f9      	bne.n	80070e2 <_vfiprintf_r+0x7a>
 80070ee:	ebba 0b04 	subs.w	fp, sl, r4
 80070f2:	d00b      	beq.n	800710c <_vfiprintf_r+0xa4>
 80070f4:	465b      	mov	r3, fp
 80070f6:	4622      	mov	r2, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff ffa2 	bl	8007044 <__sfputs_r>
 8007100:	3001      	adds	r0, #1
 8007102:	f000 80a9 	beq.w	8007258 <_vfiprintf_r+0x1f0>
 8007106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007108:	445a      	add	r2, fp
 800710a:	9209      	str	r2, [sp, #36]	; 0x24
 800710c:	f89a 3000 	ldrb.w	r3, [sl]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80a1 	beq.w	8007258 <_vfiprintf_r+0x1f0>
 8007116:	2300      	movs	r3, #0
 8007118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800711c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007120:	f10a 0a01 	add.w	sl, sl, #1
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	9307      	str	r3, [sp, #28]
 8007128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800712c:	931a      	str	r3, [sp, #104]	; 0x68
 800712e:	4654      	mov	r4, sl
 8007130:	2205      	movs	r2, #5
 8007132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007136:	4854      	ldr	r0, [pc, #336]	; (8007288 <_vfiprintf_r+0x220>)
 8007138:	f7f9 f86a 	bl	8000210 <memchr>
 800713c:	9a04      	ldr	r2, [sp, #16]
 800713e:	b9d8      	cbnz	r0, 8007178 <_vfiprintf_r+0x110>
 8007140:	06d1      	lsls	r1, r2, #27
 8007142:	bf44      	itt	mi
 8007144:	2320      	movmi	r3, #32
 8007146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800714a:	0713      	lsls	r3, r2, #28
 800714c:	bf44      	itt	mi
 800714e:	232b      	movmi	r3, #43	; 0x2b
 8007150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007154:	f89a 3000 	ldrb.w	r3, [sl]
 8007158:	2b2a      	cmp	r3, #42	; 0x2a
 800715a:	d015      	beq.n	8007188 <_vfiprintf_r+0x120>
 800715c:	9a07      	ldr	r2, [sp, #28]
 800715e:	4654      	mov	r4, sl
 8007160:	2000      	movs	r0, #0
 8007162:	f04f 0c0a 	mov.w	ip, #10
 8007166:	4621      	mov	r1, r4
 8007168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800716c:	3b30      	subs	r3, #48	; 0x30
 800716e:	2b09      	cmp	r3, #9
 8007170:	d94d      	bls.n	800720e <_vfiprintf_r+0x1a6>
 8007172:	b1b0      	cbz	r0, 80071a2 <_vfiprintf_r+0x13a>
 8007174:	9207      	str	r2, [sp, #28]
 8007176:	e014      	b.n	80071a2 <_vfiprintf_r+0x13a>
 8007178:	eba0 0308 	sub.w	r3, r0, r8
 800717c:	fa09 f303 	lsl.w	r3, r9, r3
 8007180:	4313      	orrs	r3, r2
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	46a2      	mov	sl, r4
 8007186:	e7d2      	b.n	800712e <_vfiprintf_r+0xc6>
 8007188:	9b03      	ldr	r3, [sp, #12]
 800718a:	1d19      	adds	r1, r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	9103      	str	r1, [sp, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfbb      	ittet	lt
 8007194:	425b      	neglt	r3, r3
 8007196:	f042 0202 	orrlt.w	r2, r2, #2
 800719a:	9307      	strge	r3, [sp, #28]
 800719c:	9307      	strlt	r3, [sp, #28]
 800719e:	bfb8      	it	lt
 80071a0:	9204      	strlt	r2, [sp, #16]
 80071a2:	7823      	ldrb	r3, [r4, #0]
 80071a4:	2b2e      	cmp	r3, #46	; 0x2e
 80071a6:	d10c      	bne.n	80071c2 <_vfiprintf_r+0x15a>
 80071a8:	7863      	ldrb	r3, [r4, #1]
 80071aa:	2b2a      	cmp	r3, #42	; 0x2a
 80071ac:	d134      	bne.n	8007218 <_vfiprintf_r+0x1b0>
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	1d1a      	adds	r2, r3, #4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	9203      	str	r2, [sp, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfb8      	it	lt
 80071ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071be:	3402      	adds	r4, #2
 80071c0:	9305      	str	r3, [sp, #20]
 80071c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007298 <_vfiprintf_r+0x230>
 80071c6:	7821      	ldrb	r1, [r4, #0]
 80071c8:	2203      	movs	r2, #3
 80071ca:	4650      	mov	r0, sl
 80071cc:	f7f9 f820 	bl	8000210 <memchr>
 80071d0:	b138      	cbz	r0, 80071e2 <_vfiprintf_r+0x17a>
 80071d2:	9b04      	ldr	r3, [sp, #16]
 80071d4:	eba0 000a 	sub.w	r0, r0, sl
 80071d8:	2240      	movs	r2, #64	; 0x40
 80071da:	4082      	lsls	r2, r0
 80071dc:	4313      	orrs	r3, r2
 80071de:	3401      	adds	r4, #1
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e6:	4829      	ldr	r0, [pc, #164]	; (800728c <_vfiprintf_r+0x224>)
 80071e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ec:	2206      	movs	r2, #6
 80071ee:	f7f9 f80f 	bl	8000210 <memchr>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d03f      	beq.n	8007276 <_vfiprintf_r+0x20e>
 80071f6:	4b26      	ldr	r3, [pc, #152]	; (8007290 <_vfiprintf_r+0x228>)
 80071f8:	bb1b      	cbnz	r3, 8007242 <_vfiprintf_r+0x1da>
 80071fa:	9b03      	ldr	r3, [sp, #12]
 80071fc:	3307      	adds	r3, #7
 80071fe:	f023 0307 	bic.w	r3, r3, #7
 8007202:	3308      	adds	r3, #8
 8007204:	9303      	str	r3, [sp, #12]
 8007206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007208:	443b      	add	r3, r7
 800720a:	9309      	str	r3, [sp, #36]	; 0x24
 800720c:	e768      	b.n	80070e0 <_vfiprintf_r+0x78>
 800720e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007212:	460c      	mov	r4, r1
 8007214:	2001      	movs	r0, #1
 8007216:	e7a6      	b.n	8007166 <_vfiprintf_r+0xfe>
 8007218:	2300      	movs	r3, #0
 800721a:	3401      	adds	r4, #1
 800721c:	9305      	str	r3, [sp, #20]
 800721e:	4619      	mov	r1, r3
 8007220:	f04f 0c0a 	mov.w	ip, #10
 8007224:	4620      	mov	r0, r4
 8007226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800722a:	3a30      	subs	r2, #48	; 0x30
 800722c:	2a09      	cmp	r2, #9
 800722e:	d903      	bls.n	8007238 <_vfiprintf_r+0x1d0>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0c6      	beq.n	80071c2 <_vfiprintf_r+0x15a>
 8007234:	9105      	str	r1, [sp, #20]
 8007236:	e7c4      	b.n	80071c2 <_vfiprintf_r+0x15a>
 8007238:	fb0c 2101 	mla	r1, ip, r1, r2
 800723c:	4604      	mov	r4, r0
 800723e:	2301      	movs	r3, #1
 8007240:	e7f0      	b.n	8007224 <_vfiprintf_r+0x1bc>
 8007242:	ab03      	add	r3, sp, #12
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	462a      	mov	r2, r5
 8007248:	4b12      	ldr	r3, [pc, #72]	; (8007294 <_vfiprintf_r+0x22c>)
 800724a:	a904      	add	r1, sp, #16
 800724c:	4630      	mov	r0, r6
 800724e:	f3af 8000 	nop.w
 8007252:	4607      	mov	r7, r0
 8007254:	1c78      	adds	r0, r7, #1
 8007256:	d1d6      	bne.n	8007206 <_vfiprintf_r+0x19e>
 8007258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800725a:	07d9      	lsls	r1, r3, #31
 800725c:	d405      	bmi.n	800726a <_vfiprintf_r+0x202>
 800725e:	89ab      	ldrh	r3, [r5, #12]
 8007260:	059a      	lsls	r2, r3, #22
 8007262:	d402      	bmi.n	800726a <_vfiprintf_r+0x202>
 8007264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007266:	f7fe fc8d 	bl	8005b84 <__retarget_lock_release_recursive>
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	065b      	lsls	r3, r3, #25
 800726e:	f53f af1d 	bmi.w	80070ac <_vfiprintf_r+0x44>
 8007272:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007274:	e71c      	b.n	80070b0 <_vfiprintf_r+0x48>
 8007276:	ab03      	add	r3, sp, #12
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	462a      	mov	r2, r5
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <_vfiprintf_r+0x22c>)
 800727e:	a904      	add	r1, sp, #16
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f879 	bl	8007378 <_printf_i>
 8007286:	e7e4      	b.n	8007252 <_vfiprintf_r+0x1ea>
 8007288:	08007c79 	.word	0x08007c79
 800728c:	08007c83 	.word	0x08007c83
 8007290:	00000000 	.word	0x00000000
 8007294:	08007045 	.word	0x08007045
 8007298:	08007c7f 	.word	0x08007c7f

0800729c <_printf_common>:
 800729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	4616      	mov	r6, r2
 80072a2:	4699      	mov	r9, r3
 80072a4:	688a      	ldr	r2, [r1, #8]
 80072a6:	690b      	ldr	r3, [r1, #16]
 80072a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072ac:	4293      	cmp	r3, r2
 80072ae:	bfb8      	it	lt
 80072b0:	4613      	movlt	r3, r2
 80072b2:	6033      	str	r3, [r6, #0]
 80072b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072b8:	4607      	mov	r7, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b10a      	cbz	r2, 80072c2 <_printf_common+0x26>
 80072be:	3301      	adds	r3, #1
 80072c0:	6033      	str	r3, [r6, #0]
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	0699      	lsls	r1, r3, #26
 80072c6:	bf42      	ittt	mi
 80072c8:	6833      	ldrmi	r3, [r6, #0]
 80072ca:	3302      	addmi	r3, #2
 80072cc:	6033      	strmi	r3, [r6, #0]
 80072ce:	6825      	ldr	r5, [r4, #0]
 80072d0:	f015 0506 	ands.w	r5, r5, #6
 80072d4:	d106      	bne.n	80072e4 <_printf_common+0x48>
 80072d6:	f104 0a19 	add.w	sl, r4, #25
 80072da:	68e3      	ldr	r3, [r4, #12]
 80072dc:	6832      	ldr	r2, [r6, #0]
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	dc26      	bgt.n	8007332 <_printf_common+0x96>
 80072e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072e8:	1e13      	subs	r3, r2, #0
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	bf18      	it	ne
 80072ee:	2301      	movne	r3, #1
 80072f0:	0692      	lsls	r2, r2, #26
 80072f2:	d42b      	bmi.n	800734c <_printf_common+0xb0>
 80072f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f8:	4649      	mov	r1, r9
 80072fa:	4638      	mov	r0, r7
 80072fc:	47c0      	blx	r8
 80072fe:	3001      	adds	r0, #1
 8007300:	d01e      	beq.n	8007340 <_printf_common+0xa4>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	6922      	ldr	r2, [r4, #16]
 8007306:	f003 0306 	and.w	r3, r3, #6
 800730a:	2b04      	cmp	r3, #4
 800730c:	bf02      	ittt	eq
 800730e:	68e5      	ldreq	r5, [r4, #12]
 8007310:	6833      	ldreq	r3, [r6, #0]
 8007312:	1aed      	subeq	r5, r5, r3
 8007314:	68a3      	ldr	r3, [r4, #8]
 8007316:	bf0c      	ite	eq
 8007318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800731c:	2500      	movne	r5, #0
 800731e:	4293      	cmp	r3, r2
 8007320:	bfc4      	itt	gt
 8007322:	1a9b      	subgt	r3, r3, r2
 8007324:	18ed      	addgt	r5, r5, r3
 8007326:	2600      	movs	r6, #0
 8007328:	341a      	adds	r4, #26
 800732a:	42b5      	cmp	r5, r6
 800732c:	d11a      	bne.n	8007364 <_printf_common+0xc8>
 800732e:	2000      	movs	r0, #0
 8007330:	e008      	b.n	8007344 <_printf_common+0xa8>
 8007332:	2301      	movs	r3, #1
 8007334:	4652      	mov	r2, sl
 8007336:	4649      	mov	r1, r9
 8007338:	4638      	mov	r0, r7
 800733a:	47c0      	blx	r8
 800733c:	3001      	adds	r0, #1
 800733e:	d103      	bne.n	8007348 <_printf_common+0xac>
 8007340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007348:	3501      	adds	r5, #1
 800734a:	e7c6      	b.n	80072da <_printf_common+0x3e>
 800734c:	18e1      	adds	r1, r4, r3
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	2030      	movs	r0, #48	; 0x30
 8007352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007356:	4422      	add	r2, r4
 8007358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800735c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007360:	3302      	adds	r3, #2
 8007362:	e7c7      	b.n	80072f4 <_printf_common+0x58>
 8007364:	2301      	movs	r3, #1
 8007366:	4622      	mov	r2, r4
 8007368:	4649      	mov	r1, r9
 800736a:	4638      	mov	r0, r7
 800736c:	47c0      	blx	r8
 800736e:	3001      	adds	r0, #1
 8007370:	d0e6      	beq.n	8007340 <_printf_common+0xa4>
 8007372:	3601      	adds	r6, #1
 8007374:	e7d9      	b.n	800732a <_printf_common+0x8e>
	...

08007378 <_printf_i>:
 8007378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	7e0f      	ldrb	r7, [r1, #24]
 800737e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007380:	2f78      	cmp	r7, #120	; 0x78
 8007382:	4691      	mov	r9, r2
 8007384:	4680      	mov	r8, r0
 8007386:	460c      	mov	r4, r1
 8007388:	469a      	mov	sl, r3
 800738a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800738e:	d807      	bhi.n	80073a0 <_printf_i+0x28>
 8007390:	2f62      	cmp	r7, #98	; 0x62
 8007392:	d80a      	bhi.n	80073aa <_printf_i+0x32>
 8007394:	2f00      	cmp	r7, #0
 8007396:	f000 80d4 	beq.w	8007542 <_printf_i+0x1ca>
 800739a:	2f58      	cmp	r7, #88	; 0x58
 800739c:	f000 80c0 	beq.w	8007520 <_printf_i+0x1a8>
 80073a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073a8:	e03a      	b.n	8007420 <_printf_i+0xa8>
 80073aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ae:	2b15      	cmp	r3, #21
 80073b0:	d8f6      	bhi.n	80073a0 <_printf_i+0x28>
 80073b2:	a101      	add	r1, pc, #4	; (adr r1, 80073b8 <_printf_i+0x40>)
 80073b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073b8:	08007411 	.word	0x08007411
 80073bc:	08007425 	.word	0x08007425
 80073c0:	080073a1 	.word	0x080073a1
 80073c4:	080073a1 	.word	0x080073a1
 80073c8:	080073a1 	.word	0x080073a1
 80073cc:	080073a1 	.word	0x080073a1
 80073d0:	08007425 	.word	0x08007425
 80073d4:	080073a1 	.word	0x080073a1
 80073d8:	080073a1 	.word	0x080073a1
 80073dc:	080073a1 	.word	0x080073a1
 80073e0:	080073a1 	.word	0x080073a1
 80073e4:	08007529 	.word	0x08007529
 80073e8:	08007451 	.word	0x08007451
 80073ec:	080074e3 	.word	0x080074e3
 80073f0:	080073a1 	.word	0x080073a1
 80073f4:	080073a1 	.word	0x080073a1
 80073f8:	0800754b 	.word	0x0800754b
 80073fc:	080073a1 	.word	0x080073a1
 8007400:	08007451 	.word	0x08007451
 8007404:	080073a1 	.word	0x080073a1
 8007408:	080073a1 	.word	0x080073a1
 800740c:	080074eb 	.word	0x080074eb
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	1d1a      	adds	r2, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	602a      	str	r2, [r5, #0]
 8007418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800741c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007420:	2301      	movs	r3, #1
 8007422:	e09f      	b.n	8007564 <_printf_i+0x1ec>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	0607      	lsls	r7, r0, #24
 800742a:	f103 0104 	add.w	r1, r3, #4
 800742e:	6029      	str	r1, [r5, #0]
 8007430:	d501      	bpl.n	8007436 <_printf_i+0xbe>
 8007432:	681e      	ldr	r6, [r3, #0]
 8007434:	e003      	b.n	800743e <_printf_i+0xc6>
 8007436:	0646      	lsls	r6, r0, #25
 8007438:	d5fb      	bpl.n	8007432 <_printf_i+0xba>
 800743a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800743e:	2e00      	cmp	r6, #0
 8007440:	da03      	bge.n	800744a <_printf_i+0xd2>
 8007442:	232d      	movs	r3, #45	; 0x2d
 8007444:	4276      	negs	r6, r6
 8007446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800744a:	485a      	ldr	r0, [pc, #360]	; (80075b4 <_printf_i+0x23c>)
 800744c:	230a      	movs	r3, #10
 800744e:	e012      	b.n	8007476 <_printf_i+0xfe>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	6820      	ldr	r0, [r4, #0]
 8007454:	1d19      	adds	r1, r3, #4
 8007456:	6029      	str	r1, [r5, #0]
 8007458:	0605      	lsls	r5, r0, #24
 800745a:	d501      	bpl.n	8007460 <_printf_i+0xe8>
 800745c:	681e      	ldr	r6, [r3, #0]
 800745e:	e002      	b.n	8007466 <_printf_i+0xee>
 8007460:	0641      	lsls	r1, r0, #25
 8007462:	d5fb      	bpl.n	800745c <_printf_i+0xe4>
 8007464:	881e      	ldrh	r6, [r3, #0]
 8007466:	4853      	ldr	r0, [pc, #332]	; (80075b4 <_printf_i+0x23c>)
 8007468:	2f6f      	cmp	r7, #111	; 0x6f
 800746a:	bf0c      	ite	eq
 800746c:	2308      	moveq	r3, #8
 800746e:	230a      	movne	r3, #10
 8007470:	2100      	movs	r1, #0
 8007472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007476:	6865      	ldr	r5, [r4, #4]
 8007478:	60a5      	str	r5, [r4, #8]
 800747a:	2d00      	cmp	r5, #0
 800747c:	bfa2      	ittt	ge
 800747e:	6821      	ldrge	r1, [r4, #0]
 8007480:	f021 0104 	bicge.w	r1, r1, #4
 8007484:	6021      	strge	r1, [r4, #0]
 8007486:	b90e      	cbnz	r6, 800748c <_printf_i+0x114>
 8007488:	2d00      	cmp	r5, #0
 800748a:	d04b      	beq.n	8007524 <_printf_i+0x1ac>
 800748c:	4615      	mov	r5, r2
 800748e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007492:	fb03 6711 	mls	r7, r3, r1, r6
 8007496:	5dc7      	ldrb	r7, [r0, r7]
 8007498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800749c:	4637      	mov	r7, r6
 800749e:	42bb      	cmp	r3, r7
 80074a0:	460e      	mov	r6, r1
 80074a2:	d9f4      	bls.n	800748e <_printf_i+0x116>
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d10b      	bne.n	80074c0 <_printf_i+0x148>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	07de      	lsls	r6, r3, #31
 80074ac:	d508      	bpl.n	80074c0 <_printf_i+0x148>
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	6861      	ldr	r1, [r4, #4]
 80074b2:	4299      	cmp	r1, r3
 80074b4:	bfde      	ittt	le
 80074b6:	2330      	movle	r3, #48	; 0x30
 80074b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80074c0:	1b52      	subs	r2, r2, r5
 80074c2:	6122      	str	r2, [r4, #16]
 80074c4:	f8cd a000 	str.w	sl, [sp]
 80074c8:	464b      	mov	r3, r9
 80074ca:	aa03      	add	r2, sp, #12
 80074cc:	4621      	mov	r1, r4
 80074ce:	4640      	mov	r0, r8
 80074d0:	f7ff fee4 	bl	800729c <_printf_common>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d14a      	bne.n	800756e <_printf_i+0x1f6>
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074dc:	b004      	add	sp, #16
 80074de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	f043 0320 	orr.w	r3, r3, #32
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	4833      	ldr	r0, [pc, #204]	; (80075b8 <_printf_i+0x240>)
 80074ec:	2778      	movs	r7, #120	; 0x78
 80074ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	6829      	ldr	r1, [r5, #0]
 80074f6:	061f      	lsls	r7, r3, #24
 80074f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80074fc:	d402      	bmi.n	8007504 <_printf_i+0x18c>
 80074fe:	065f      	lsls	r7, r3, #25
 8007500:	bf48      	it	mi
 8007502:	b2b6      	uxthmi	r6, r6
 8007504:	07df      	lsls	r7, r3, #31
 8007506:	bf48      	it	mi
 8007508:	f043 0320 	orrmi.w	r3, r3, #32
 800750c:	6029      	str	r1, [r5, #0]
 800750e:	bf48      	it	mi
 8007510:	6023      	strmi	r3, [r4, #0]
 8007512:	b91e      	cbnz	r6, 800751c <_printf_i+0x1a4>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	f023 0320 	bic.w	r3, r3, #32
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	2310      	movs	r3, #16
 800751e:	e7a7      	b.n	8007470 <_printf_i+0xf8>
 8007520:	4824      	ldr	r0, [pc, #144]	; (80075b4 <_printf_i+0x23c>)
 8007522:	e7e4      	b.n	80074ee <_printf_i+0x176>
 8007524:	4615      	mov	r5, r2
 8007526:	e7bd      	b.n	80074a4 <_printf_i+0x12c>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	6826      	ldr	r6, [r4, #0]
 800752c:	6961      	ldr	r1, [r4, #20]
 800752e:	1d18      	adds	r0, r3, #4
 8007530:	6028      	str	r0, [r5, #0]
 8007532:	0635      	lsls	r5, r6, #24
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	d501      	bpl.n	800753c <_printf_i+0x1c4>
 8007538:	6019      	str	r1, [r3, #0]
 800753a:	e002      	b.n	8007542 <_printf_i+0x1ca>
 800753c:	0670      	lsls	r0, r6, #25
 800753e:	d5fb      	bpl.n	8007538 <_printf_i+0x1c0>
 8007540:	8019      	strh	r1, [r3, #0]
 8007542:	2300      	movs	r3, #0
 8007544:	6123      	str	r3, [r4, #16]
 8007546:	4615      	mov	r5, r2
 8007548:	e7bc      	b.n	80074c4 <_printf_i+0x14c>
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	1d1a      	adds	r2, r3, #4
 800754e:	602a      	str	r2, [r5, #0]
 8007550:	681d      	ldr	r5, [r3, #0]
 8007552:	6862      	ldr	r2, [r4, #4]
 8007554:	2100      	movs	r1, #0
 8007556:	4628      	mov	r0, r5
 8007558:	f7f8 fe5a 	bl	8000210 <memchr>
 800755c:	b108      	cbz	r0, 8007562 <_printf_i+0x1ea>
 800755e:	1b40      	subs	r0, r0, r5
 8007560:	6060      	str	r0, [r4, #4]
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	2300      	movs	r3, #0
 8007568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800756c:	e7aa      	b.n	80074c4 <_printf_i+0x14c>
 800756e:	6923      	ldr	r3, [r4, #16]
 8007570:	462a      	mov	r2, r5
 8007572:	4649      	mov	r1, r9
 8007574:	4640      	mov	r0, r8
 8007576:	47d0      	blx	sl
 8007578:	3001      	adds	r0, #1
 800757a:	d0ad      	beq.n	80074d8 <_printf_i+0x160>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	079b      	lsls	r3, r3, #30
 8007580:	d413      	bmi.n	80075aa <_printf_i+0x232>
 8007582:	68e0      	ldr	r0, [r4, #12]
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	4298      	cmp	r0, r3
 8007588:	bfb8      	it	lt
 800758a:	4618      	movlt	r0, r3
 800758c:	e7a6      	b.n	80074dc <_printf_i+0x164>
 800758e:	2301      	movs	r3, #1
 8007590:	4632      	mov	r2, r6
 8007592:	4649      	mov	r1, r9
 8007594:	4640      	mov	r0, r8
 8007596:	47d0      	blx	sl
 8007598:	3001      	adds	r0, #1
 800759a:	d09d      	beq.n	80074d8 <_printf_i+0x160>
 800759c:	3501      	adds	r5, #1
 800759e:	68e3      	ldr	r3, [r4, #12]
 80075a0:	9903      	ldr	r1, [sp, #12]
 80075a2:	1a5b      	subs	r3, r3, r1
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	dcf2      	bgt.n	800758e <_printf_i+0x216>
 80075a8:	e7eb      	b.n	8007582 <_printf_i+0x20a>
 80075aa:	2500      	movs	r5, #0
 80075ac:	f104 0619 	add.w	r6, r4, #25
 80075b0:	e7f5      	b.n	800759e <_printf_i+0x226>
 80075b2:	bf00      	nop
 80075b4:	08007c8a 	.word	0x08007c8a
 80075b8:	08007c9b 	.word	0x08007c9b

080075bc <__swbuf_r>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	460e      	mov	r6, r1
 80075c0:	4614      	mov	r4, r2
 80075c2:	4605      	mov	r5, r0
 80075c4:	b118      	cbz	r0, 80075ce <__swbuf_r+0x12>
 80075c6:	6a03      	ldr	r3, [r0, #32]
 80075c8:	b90b      	cbnz	r3, 80075ce <__swbuf_r+0x12>
 80075ca:	f7fe f9d5 	bl	8005978 <__sinit>
 80075ce:	69a3      	ldr	r3, [r4, #24]
 80075d0:	60a3      	str	r3, [r4, #8]
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	071a      	lsls	r2, r3, #28
 80075d6:	d525      	bpl.n	8007624 <__swbuf_r+0x68>
 80075d8:	6923      	ldr	r3, [r4, #16]
 80075da:	b31b      	cbz	r3, 8007624 <__swbuf_r+0x68>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	6922      	ldr	r2, [r4, #16]
 80075e0:	1a98      	subs	r0, r3, r2
 80075e2:	6963      	ldr	r3, [r4, #20]
 80075e4:	b2f6      	uxtb	r6, r6
 80075e6:	4283      	cmp	r3, r0
 80075e8:	4637      	mov	r7, r6
 80075ea:	dc04      	bgt.n	80075f6 <__swbuf_r+0x3a>
 80075ec:	4621      	mov	r1, r4
 80075ee:	4628      	mov	r0, r5
 80075f0:	f7ff fc84 	bl	8006efc <_fflush_r>
 80075f4:	b9e0      	cbnz	r0, 8007630 <__swbuf_r+0x74>
 80075f6:	68a3      	ldr	r3, [r4, #8]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	60a3      	str	r3, [r4, #8]
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	6022      	str	r2, [r4, #0]
 8007602:	701e      	strb	r6, [r3, #0]
 8007604:	6962      	ldr	r2, [r4, #20]
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	429a      	cmp	r2, r3
 800760a:	d004      	beq.n	8007616 <__swbuf_r+0x5a>
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	07db      	lsls	r3, r3, #31
 8007610:	d506      	bpl.n	8007620 <__swbuf_r+0x64>
 8007612:	2e0a      	cmp	r6, #10
 8007614:	d104      	bne.n	8007620 <__swbuf_r+0x64>
 8007616:	4621      	mov	r1, r4
 8007618:	4628      	mov	r0, r5
 800761a:	f7ff fc6f 	bl	8006efc <_fflush_r>
 800761e:	b938      	cbnz	r0, 8007630 <__swbuf_r+0x74>
 8007620:	4638      	mov	r0, r7
 8007622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007624:	4621      	mov	r1, r4
 8007626:	4628      	mov	r0, r5
 8007628:	f000 f806 	bl	8007638 <__swsetup_r>
 800762c:	2800      	cmp	r0, #0
 800762e:	d0d5      	beq.n	80075dc <__swbuf_r+0x20>
 8007630:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007634:	e7f4      	b.n	8007620 <__swbuf_r+0x64>
	...

08007638 <__swsetup_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <__swsetup_r+0xac>)
 800763c:	4605      	mov	r5, r0
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	460c      	mov	r4, r1
 8007642:	b118      	cbz	r0, 800764c <__swsetup_r+0x14>
 8007644:	6a03      	ldr	r3, [r0, #32]
 8007646:	b90b      	cbnz	r3, 800764c <__swsetup_r+0x14>
 8007648:	f7fe f996 	bl	8005978 <__sinit>
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007652:	0718      	lsls	r0, r3, #28
 8007654:	d422      	bmi.n	800769c <__swsetup_r+0x64>
 8007656:	06d9      	lsls	r1, r3, #27
 8007658:	d407      	bmi.n	800766a <__swsetup_r+0x32>
 800765a:	2309      	movs	r3, #9
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007662:	81a3      	strh	r3, [r4, #12]
 8007664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007668:	e034      	b.n	80076d4 <__swsetup_r+0x9c>
 800766a:	0758      	lsls	r0, r3, #29
 800766c:	d512      	bpl.n	8007694 <__swsetup_r+0x5c>
 800766e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007670:	b141      	cbz	r1, 8007684 <__swsetup_r+0x4c>
 8007672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007676:	4299      	cmp	r1, r3
 8007678:	d002      	beq.n	8007680 <__swsetup_r+0x48>
 800767a:	4628      	mov	r0, r5
 800767c:	f7fe fa9c 	bl	8005bb8 <_free_r>
 8007680:	2300      	movs	r3, #0
 8007682:	6363      	str	r3, [r4, #52]	; 0x34
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	2300      	movs	r3, #0
 800768e:	6063      	str	r3, [r4, #4]
 8007690:	6923      	ldr	r3, [r4, #16]
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	f043 0308 	orr.w	r3, r3, #8
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	b94b      	cbnz	r3, 80076b4 <__swsetup_r+0x7c>
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076aa:	d003      	beq.n	80076b4 <__swsetup_r+0x7c>
 80076ac:	4621      	mov	r1, r4
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 f884 	bl	80077bc <__smakebuf_r>
 80076b4:	89a0      	ldrh	r0, [r4, #12]
 80076b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076ba:	f010 0301 	ands.w	r3, r0, #1
 80076be:	d00a      	beq.n	80076d6 <__swsetup_r+0x9e>
 80076c0:	2300      	movs	r3, #0
 80076c2:	60a3      	str	r3, [r4, #8]
 80076c4:	6963      	ldr	r3, [r4, #20]
 80076c6:	425b      	negs	r3, r3
 80076c8:	61a3      	str	r3, [r4, #24]
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	b943      	cbnz	r3, 80076e0 <__swsetup_r+0xa8>
 80076ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076d2:	d1c4      	bne.n	800765e <__swsetup_r+0x26>
 80076d4:	bd38      	pop	{r3, r4, r5, pc}
 80076d6:	0781      	lsls	r1, r0, #30
 80076d8:	bf58      	it	pl
 80076da:	6963      	ldrpl	r3, [r4, #20]
 80076dc:	60a3      	str	r3, [r4, #8]
 80076de:	e7f4      	b.n	80076ca <__swsetup_r+0x92>
 80076e0:	2000      	movs	r0, #0
 80076e2:	e7f7      	b.n	80076d4 <__swsetup_r+0x9c>
 80076e4:	200001d0 	.word	0x200001d0

080076e8 <_raise_r>:
 80076e8:	291f      	cmp	r1, #31
 80076ea:	b538      	push	{r3, r4, r5, lr}
 80076ec:	4604      	mov	r4, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	d904      	bls.n	80076fc <_raise_r+0x14>
 80076f2:	2316      	movs	r3, #22
 80076f4:	6003      	str	r3, [r0, #0]
 80076f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80076fe:	b112      	cbz	r2, 8007706 <_raise_r+0x1e>
 8007700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007704:	b94b      	cbnz	r3, 800771a <_raise_r+0x32>
 8007706:	4620      	mov	r0, r4
 8007708:	f000 f830 	bl	800776c <_getpid_r>
 800770c:	462a      	mov	r2, r5
 800770e:	4601      	mov	r1, r0
 8007710:	4620      	mov	r0, r4
 8007712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007716:	f000 b817 	b.w	8007748 <_kill_r>
 800771a:	2b01      	cmp	r3, #1
 800771c:	d00a      	beq.n	8007734 <_raise_r+0x4c>
 800771e:	1c59      	adds	r1, r3, #1
 8007720:	d103      	bne.n	800772a <_raise_r+0x42>
 8007722:	2316      	movs	r3, #22
 8007724:	6003      	str	r3, [r0, #0]
 8007726:	2001      	movs	r0, #1
 8007728:	e7e7      	b.n	80076fa <_raise_r+0x12>
 800772a:	2400      	movs	r4, #0
 800772c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007730:	4628      	mov	r0, r5
 8007732:	4798      	blx	r3
 8007734:	2000      	movs	r0, #0
 8007736:	e7e0      	b.n	80076fa <_raise_r+0x12>

08007738 <raise>:
 8007738:	4b02      	ldr	r3, [pc, #8]	; (8007744 <raise+0xc>)
 800773a:	4601      	mov	r1, r0
 800773c:	6818      	ldr	r0, [r3, #0]
 800773e:	f7ff bfd3 	b.w	80076e8 <_raise_r>
 8007742:	bf00      	nop
 8007744:	200001d0 	.word	0x200001d0

08007748 <_kill_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d07      	ldr	r5, [pc, #28]	; (8007768 <_kill_r+0x20>)
 800774c:	2300      	movs	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	4608      	mov	r0, r1
 8007752:	4611      	mov	r1, r2
 8007754:	602b      	str	r3, [r5, #0]
 8007756:	f7fa faf3 	bl	8001d40 <_kill>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d102      	bne.n	8007764 <_kill_r+0x1c>
 800775e:	682b      	ldr	r3, [r5, #0]
 8007760:	b103      	cbz	r3, 8007764 <_kill_r+0x1c>
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	bd38      	pop	{r3, r4, r5, pc}
 8007766:	bf00      	nop
 8007768:	20000518 	.word	0x20000518

0800776c <_getpid_r>:
 800776c:	f7fa bae0 	b.w	8001d30 <_getpid>

08007770 <__swhatbuf_r>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	460c      	mov	r4, r1
 8007774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007778:	2900      	cmp	r1, #0
 800777a:	b096      	sub	sp, #88	; 0x58
 800777c:	4615      	mov	r5, r2
 800777e:	461e      	mov	r6, r3
 8007780:	da0d      	bge.n	800779e <__swhatbuf_r+0x2e>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007788:	f04f 0100 	mov.w	r1, #0
 800778c:	bf0c      	ite	eq
 800778e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007792:	2340      	movne	r3, #64	; 0x40
 8007794:	2000      	movs	r0, #0
 8007796:	6031      	str	r1, [r6, #0]
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	b016      	add	sp, #88	; 0x58
 800779c:	bd70      	pop	{r4, r5, r6, pc}
 800779e:	466a      	mov	r2, sp
 80077a0:	f000 f848 	bl	8007834 <_fstat_r>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	dbec      	blt.n	8007782 <__swhatbuf_r+0x12>
 80077a8:	9901      	ldr	r1, [sp, #4]
 80077aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80077ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80077b2:	4259      	negs	r1, r3
 80077b4:	4159      	adcs	r1, r3
 80077b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ba:	e7eb      	b.n	8007794 <__swhatbuf_r+0x24>

080077bc <__smakebuf_r>:
 80077bc:	898b      	ldrh	r3, [r1, #12]
 80077be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077c0:	079d      	lsls	r5, r3, #30
 80077c2:	4606      	mov	r6, r0
 80077c4:	460c      	mov	r4, r1
 80077c6:	d507      	bpl.n	80077d8 <__smakebuf_r+0x1c>
 80077c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	6123      	str	r3, [r4, #16]
 80077d0:	2301      	movs	r3, #1
 80077d2:	6163      	str	r3, [r4, #20]
 80077d4:	b002      	add	sp, #8
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	ab01      	add	r3, sp, #4
 80077da:	466a      	mov	r2, sp
 80077dc:	f7ff ffc8 	bl	8007770 <__swhatbuf_r>
 80077e0:	9900      	ldr	r1, [sp, #0]
 80077e2:	4605      	mov	r5, r0
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7fe fdab 	bl	8006340 <_malloc_r>
 80077ea:	b948      	cbnz	r0, 8007800 <__smakebuf_r+0x44>
 80077ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f0:	059a      	lsls	r2, r3, #22
 80077f2:	d4ef      	bmi.n	80077d4 <__smakebuf_r+0x18>
 80077f4:	f023 0303 	bic.w	r3, r3, #3
 80077f8:	f043 0302 	orr.w	r3, r3, #2
 80077fc:	81a3      	strh	r3, [r4, #12]
 80077fe:	e7e3      	b.n	80077c8 <__smakebuf_r+0xc>
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	6020      	str	r0, [r4, #0]
 8007804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	9b00      	ldr	r3, [sp, #0]
 800780c:	6163      	str	r3, [r4, #20]
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	6120      	str	r0, [r4, #16]
 8007812:	b15b      	cbz	r3, 800782c <__smakebuf_r+0x70>
 8007814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007818:	4630      	mov	r0, r6
 800781a:	f000 f81d 	bl	8007858 <_isatty_r>
 800781e:	b128      	cbz	r0, 800782c <__smakebuf_r+0x70>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	f023 0303 	bic.w	r3, r3, #3
 8007826:	f043 0301 	orr.w	r3, r3, #1
 800782a:	81a3      	strh	r3, [r4, #12]
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	431d      	orrs	r5, r3
 8007830:	81a5      	strh	r5, [r4, #12]
 8007832:	e7cf      	b.n	80077d4 <__smakebuf_r+0x18>

08007834 <_fstat_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d07      	ldr	r5, [pc, #28]	; (8007854 <_fstat_r+0x20>)
 8007838:	2300      	movs	r3, #0
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	f7fa fadc 	bl	8001dfe <_fstat>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d102      	bne.n	8007850 <_fstat_r+0x1c>
 800784a:	682b      	ldr	r3, [r5, #0]
 800784c:	b103      	cbz	r3, 8007850 <_fstat_r+0x1c>
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	bd38      	pop	{r3, r4, r5, pc}
 8007852:	bf00      	nop
 8007854:	20000518 	.word	0x20000518

08007858 <_isatty_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d06      	ldr	r5, [pc, #24]	; (8007874 <_isatty_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7fa fadb 	bl	8001e1e <_isatty>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_isatty_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_isatty_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	20000518 	.word	0x20000518

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
